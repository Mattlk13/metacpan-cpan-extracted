=encoding utf8

=head1 NAME

PDK::DBI::Pg - Moose-based wrapper for PostgreSQL database operations using DBIx::Custom

=head1 SYNOPSIS

  use PDK::DBI::Pg;

  my $db = PDK::DBI::Pg->new(
    host     => 'localhost',
    port     => 5432,
    dbname   => 'mydb',
    user     => 'username',
    password => 'password'
  );

  my $result = $db->execute("SELECT * FROM users WHERE id = ?", [1])->all;

  $db->disconnect;

=head1 DESCRIPTION

PDK::DBI::Pg is a Moose-based module that provides a high-level interface for PostgreSQL database operations. It uses DBIx::Custom to handle the underlying database connections and queries, and implements transaction management and connection pooling.

=head1 ATTRIBUTES

=head2 option

Read-only HashRef for storing database connection options.

=head1 METHODS

=head2 new(%params)

Constructor for creating a new PDK::DBI::Pg object. Accepts the following parameters:

=over 4

=item * host - Database host

=item * port - Database port

=item * dbname - Database name

=item * user - Database username

=item * password - Database password

=item * dsn - Data Source Name (optional; automatically generated if not provided)

=item * option - HashRef for additional database connection options

=back

=head2 clone()

Creates a new instance of the current object, copying connection information (dsn, user, password, and options).

Returns: A new PDK::DBI::Pg object.

=head2 batchExecute($params, $sql)

Executes a batch SQL operation.

=over 4

=item * $params - ArrayRef of SQL query parameters

=item * $sql - SQL query string

=back

=head2 disconnect()

Closes the database connection.

=head2 reconnect()

Disconnects and re-establishes the database connection.

=head1 INHERITED METHODS

The following methods are inherited from DBIx::Custom and can be called directly on PDK::DBI::Pg objects:

=over 4

=item * select

=item * update

=item * insert

=item * delete

=item * execute

=item * user

=back

=head1 TRANSACTION HANDLING

All database operations (execute, delete, update, insert, batchExecute) are automatically wrapped in transactions. If an error occurs during the operation, the transaction will roll back.

=head1 EXAMPLES

=head2 Connecting to the database

  my $db = PDK::DBI::Pg->new(
    host     => 'localhost',
    port     => 5432,
    dbname   => 'mydb',
    user     => 'username',
    password => 'password'
  );

=head2 Executing a SELECT query

  my $results = $db->execute("SELECT * FROM users WHERE status = ?", ['active'])->all;

=head2 Inserting data

  $db->insert('users', {name => 'John Doe', email => 'john@example.com'});

=head2 Updating data

  $db->update('users', {status => 'inactive'}, {id => 1});

=head2 Deleting data

  $db->delete('users', {id => 1});

=head2 Batch execution

  my $params = [
    ['John Doe', 'john@example.com'],
    ['Jane Smith', 'jane@example.com']
  ];
  $db->batchExecute($params, "INSERT INTO users (name, email) VALUES (?, ?)");

=head1 SEE ALSO

L<Moose>, L<DBIx::Custom>, L<DBI>

=head1 AUTHOR

WENWU YAN <968828@gmail.com>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2024 WENWU YAN

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See L<http://dev.perl.org/licenses/> for more information.

=cut
