#!perl

# Note: This script is a CLI for Riap function /Perinci/Examples/CLI/demo_cli_opts
# and generated automatically using Perinci::CmdLine::Gen version 0.501

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2022-03-08'; # DATE
our $DIST = 'Perinci-Examples-Bin-Any'; # DIST
our $VERSION = '0.072'; # VERSION

my $cmdline = Perinci::CmdLine::Any->new(
    url => "/Perinci/Examples/CLI/demo_cli_opts",
    program_name => "peri-eg-demo-cli-opts-any",
);

$cmdline->run;

# ABSTRACT: Summary for `demo_cli_opts`
# PODNAME: peri-eg-demo-cli-opts-any

__END__

=pod

=encoding UTF-8

=head1 NAME

peri-eg-demo-cli-opts-any - Summary for `demo_cli_opts`

=head1 VERSION

This document describes version 0.072 of peri-eg-demo-cli-opts-any (from Perl distribution Perinci-Examples-Bin-Any), released on 2022-03-08.

=head1 SYNOPSIS

Usage:

% B<peri-eg-demo-cli-opts-any> [B<--are-baz>|B<--arent-baz>] [B<--bool1>|B<-z>|B<--no-bool1>|B<--nobool1>] [B<--config-path>=I<path>|B<-c>|B<--no-config>|B<-C>] [B<--config-profile>=I<profile>|B<-P>] [B<--flag1>|B<-f>] [B<--format>=I<name>|B<--json>] [B<--full>|B<--no-full>|B<--nofull>] [B<--full2>|B<--no-full2>|B<--nofull2>] [B<--gender>=I<str>] [B<--hash1>=I<s>] [B<--input-base64>=I<buf>] [B<--input>=I<buf>] [B<--int1>=I<int>] [B<--int2>=I<int>] [B<--is-bar>|B<--isnt-bar>] [B<--(no)naked-res>] [B<--no-env>] [B<--output>=I<filename>] [B<--page-result>[=I<program>]|B<--view-result>[=I<program>]] [B<--pass>=I<str>] [B<--with-foo>|B<--wf>|B<--without-foo>] [B<--hash1-json>=I<json>] [B<-F>|B<-M>|B<--female>|B<--male>] [B<-i>=I<int>] [B<-p>=I<str>] -- E<lt>I<str1>E<gt> E<lt>I<array1>E<gt> ...

=head1 DESCRIPTION

Description for C<demo_cli_opts>.

This is another paragraph from the description. Description by default is
assumed to be marked up in I<Markdown> (currently referring to CommonMark).

 This paragraph should be set in verbatim.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--array1-json>=I<s>

Positional, slurpy, and plural (JSON-encoded).

See C<--array1>.

Can also be specified as the 2nd command-line argument and onwards.

=item B<--array1>=I<s@>*

Positional, slurpy, and singular.

Argument with non-scalar types (like array or hash) can be specified in the CLI
using `--ARG-json` or `--ARG-yaml`. Arguments with type of array of string can
also be specified using multiple `--ARG` options.

This option also links to another option.


Can also be specified as the 2nd command-line argument and onwards.

Can be specified multiple times.

=item B<--female>

Alias for `--gender=F`.

See C<--gender>.

=item B<--gender>=I<s>

A string option.

Valid values:

 ["M","F"]

This option contains flag aliases that have code.


=item B<--hash1-json>=I<s>

Demonstrate hash argument with default value from schema (JSON-encoded).

See C<--hash1>.

=item B<--hash1>=I<s>

Demonstrate hash argument with default value from schema.

Default value:

 {default=>1}

=item B<--input-base64>=I<s>

Specify input (base64-encoded).

See C<--input>.

=item B<--input>=I<s>

Specify input.

This option demonstrates the `cmdline_src` property. Also, since schema type is
`buf`, we know that the value is binary data. CLI framework will provide
`--input-base64` to allow specifying binary data encoded in base64.


=item B<--int1>=I<s>*, B<-i>

Demonstrate an option with no summary. And a required option.


=item B<--int2>=I<s>

Another int option.

Default value:

 10

Demonstrate a scalar/simple default value.


=item B<--male>

Alias for `--gender=M`.

See C<--gender>.

=item B<--output>=I<s>

Specify output filename.

This option demonstrates how the option would be displayed in the help/usage.
Due to the `schema` being `filename` instead of just `str`, CLI framework can
show:

    --output=filename

instead of the less informative:

    --output=str


=item B<--pass>=I<s>, B<-p>

=item B<--str1>=I<s>*

A required option as well as positional argument.

Can also be specified as the 1st command-line argument.

=item B<-F>

Alias for `--female`.

See C<--gender>.

=item B<-M>

Alias for `--male`.

See C<--gender>.

=back

=head2 Cat1 options

=over

=item B<--bool1>

A bool option.

CLI framework should generate `--nobool1` (and `--nobool1`) automatically.

This option has an alias, `-z`. Because the alias has its own
summary/description, it will be displayed separately.


=item B<--flag1>, B<-f>

A flag option.

A flag option is a bool option with the value of 1 (true). It is meant to
activate something if specified and there is no notion of disabling by
specifying the opposite. Thus the CLI framework should not generate a
`--noflag1` option.

This flag has an alias `-f` with no summary/description nor code. So the CLI
framework should display the alias along with the option. Note that short
(single-letter) options/aliases do not get `--noX`.


=item B<--no-full>

Turn off full processing.

Another bool option with on default.

CLI framework should perhaps show `--nobool2` instead of `--bool2` because
`--bool2` is active by default. And if it does so, it should also show the
negative summary in the `summary.alt.bool.not` attribute instead of the normal
`summary` property.


=item B<-z>

This is summary for option `-z`.

See C<--bool1>.

=back

=head2 Cat2 options

=over

=item B<--no-full2>

Another bool option with on default. Because this option does not have
`summary.alt.bool.not`, CLI framework should not show any summary, despite the
existence of `summary`.


=back

=head2 Configuration options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--no-config>, B<-C>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Negation options

=over

=item B<--are-baz>

This demonstrate negation of --are-foo to --arent-foo.

=item B<--is-bar>

This demonstrate negation of --is-foo to --isnt-foo.

=item B<--with-foo>, B<--wf>

This demonstrate negation of --with-foo to --without-foo.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--page-result>

Filter output through a pager.

=item B<--view-result>

View output using a viewer.

=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C peri-eg-demo-cli-opts-any peri-eg-demo-cli-opts-any

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete peri-eg-demo-cli-opts-any 'p/*/`peri-eg-demo-cli-opts-any`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/u1/.config/peri-eg-demo-cli-opts-any.conf>, F</home/u1/peri-eg-demo-cli-opts-any.conf>, or F</etc/peri-eg-demo-cli-opts-any.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable equals some string: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal some string: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when the value of an environment variable includes some string: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. If you only want a section to be read when the value of an environment variable does not include some string: C<[env=HOSTNAME!*=server ...]> or C<[SOMESECTION env=HOSTNAME!*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

 are_baz (see --are-baz)
 array1 (see --array1)
 bool1 (see --bool1)
 flag1 (see --flag1)
 format (see --format)
 full (see --no-full)
 full2 (see --no-full2)
 gender (see --gender)
 hash1 (see --hash1)
 input (see --input)
 int1 (see --int1)
 int2 (see --int2)
 is_bar (see --is-bar)
 naked_res (see --naked-res)
 output (see --output)
 pass (see --pass)
 str1 (see --str1)
 with_foo (see --with-foo)

=head1 ENVIRONMENT

=head2 PERI_EG_DEMO_CLI_OPTS_ANY_OPT => str

Specify additional command-line options.

=head1 FILES

F</home/u1/.config/peri-eg-demo-cli-opts-any.conf>

F</home/u1/peri-eg-demo-cli-opts-any.conf>

F</etc/peri-eg-demo-cli-opts-any.conf>

=head1 EXAMPLES

Summary for an example:

 % peri-eg-demo-cli-opts-any --int1 10 'a value' elem1 elem2
 [
    200,
    "OK",
    {
       "array1" : [
          "elem1",
          "elem2"
       ],
       "full" : 1,
       "full2" : 1,
       "hash1" : {
          "default" : 1
       },
       "int1" : 10,
       "int2" : 10,
       "str1" : "a value"
    },
    {}
 ]

A second example:

 % peri-eg-demo-cli-opts-any --int1 20 --str1 x --array1-json '[1,2]'
 ERROR 400: Can't parse argv (500: GetOptions failed)

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/Perinci-Examples-Bin-Any>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-Perinci-Examples-Bin-Any>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla plugin and/or Pod::Weaver::Plugin. Any additional steps required
beyond that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2022, 2020, 2015, 2014 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=Perinci-Examples-Bin-Any>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
