#!perl

our $DATE = '2017-07-10'; # DATE
our $VERSION = '0.07'; # VERSION

use 5.010001;
use strict;
use warnings;

use File::Slurper qw(write_text);
use Perinci::CmdLine::Any;
use PHPLive::Report qw(%reports %legends);
use String::JS qw(encode_js_string);

our %SPEC;
$SPEC{gen_phplive_reports} = {
    v => 1.1,
    summary => 'Generate reports for PHP Live!',
    args => {
        db_dsn  => {schema=>'str*', req=>1},
        db_user => {schema=>'str'},
        db_pass => {schema=>'str'},
        year    => {schema=>'int*', req=>1},
        month   => {schema=>['int*', between=>[1,12]], req=>1},
    },
};
sub gen_phplive_reports {
    require Data::Format::Pretty::HTML;
    require DBI;
    require PHPLive::Report;

    my %args = @_;
    my $year   = int($args{year});
    my $month  = int($args{month});

    my $period = sprintf("%04d-%02d", $year, $month);

    my $dbh = DBI->connect($args{db_dsn}, $args{db_user}, $args{db_pass},
                           {RaiseError=>1});

    my $res = PHPLive::Report::gen_phplive_reports(
        dbh=>$dbh, year=>$year, month=>$month);

    my @fres;
    push @fres, "<html>\n";
    push @fres, "<head>\n";
    push @fres, "<title>PHP Live! Reports for $period</title>\n";
    push @fres, qq(<meta name="generator" content="PHPLive::Report $PHPLive::Report::VERSION" />\n);
    push @fres, qq|<meta name="date" content="${\(scalar localtime)}" />\n|;
    push @fres, qq(<script type="text/javascript" src="jquery.js"></script>\n);
    push @fres, qq(<script type="text/javascript" src="jquery.tablesorter.js"></script>\n);
    push @fres, qq(<link rel="stylesheet" href="themes/blue/style.css" type="text/css" media="print, projection, screen" />\n);
    push @fres, q(<script>)."\n";
    push @fres, q|  $(document).ready(function() {|."\n";
    for my $k (sort keys %legends) {
        push @fres, qq|    \$("th:contains(${\( encode_js_string($k, 2) )})").attr("title", ${\( encode_js_string($legends{$k}) )})|."\n";
    }
    push @fres, q(    $("table").addClass("tablesorter").tablesorter())."\n";
    push @fres, q|  });|."\n";
    push @fres, q(</script>)."\n";
    push @fres, "</head>\n";
    push @fres, "<body>\n";
    push @fres, "<h1>PHP Live! Reports for $period</h1>\n";

    for my $k (sort keys %$res) {
        push @fres, "<h2>$k</h2>\n";
        push @fres, Data::Format::Pretty::HTML::format_pretty($res->{$k});
        push @fres, "\n";
    }

    push @fres, "</body>\n";
    push @fres, "</html>\n";

    my $fname = "phplive-reports-$period.html";
    write_text($fname, join("", @fres));

    [200, "OK"];
}

Perinci::CmdLine::Any->new(
    url => "/main/gen_phplive_reports",
)->run;

# ABSTRACT: Generate reports for PHP Live!
# PODNAME: gen-phplive-reports

__END__

=pod

=encoding UTF-8

=head1 NAME

gen-phplive-reports - Generate reports for PHP Live!

=head1 VERSION

This document describes version 0.07 of gen-phplive-reports (from Perl distribution PHPLive-Report), released on 2017-07-10.

=head1 SYNOPSIS

 % gen-phplive-reports --db-dsn dbi:mysql:dbname=PHPLIVE --db-user PHPLIVE --db-pass SECRET --year 2014 --month 7

Will produce C<phplive-reports-YYYY-MM.html> file in current directory.

To make nice sortable tables, I use jQuery tablesorter plugin,
L<http://tablesorter.com/>. Drop the jQuery as well as the tablesorter files
into the same directory as the reports.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--db-dsn>=I<s>*

=item B<--db-pass>=I<s>

=item B<--db-user>=I<s>

=item B<--month>=I<i>*

=item B<--year>=I<i>*

=back

=head2 Configuration options

=over

=item B<--config-path>=I<filename>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--no-config>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C gen-phplive-reports gen-phplive-reports

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete gen-phplive-reports 'p/*/`gen-phplive-reports`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/gen-phplive-reports.conf>, F<~/gen-phplive-reports.conf>, or F</etc/gen-phplive-reports.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

 db_dsn (see --db-dsn)
 db_pass (see --db-pass)
 db_user (see --db-user)
 format (see --format)
 month (see --month)
 naked_res (see --naked-res)
 year (see --year)

=head1 ENVIRONMENT

=head2 GEN_PHPLIVE_REPORTS_OPT => str

Specify additional command-line options.

=head1 FILES

F<~/.config/gen-phplive-reports.conf>

F<~/gen-phplive-reports.conf>

F</etc/gen-phplive-reports.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/PHPLive-Report>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-PHPLive-Report>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=PHPLive-Report>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<PHPLive::Report>

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2017, 2015, 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
