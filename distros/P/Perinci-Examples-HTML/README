NAME
    Perinci::Examples::HTML - Examples related to HTML form generation

VERSION
    This document describes version 0.002 of Perinci::Examples::HTML (from
    Perl distribution Perinci-Examples-HTML), released on 2022-11-27.

DESCRIPTION
FUNCTIONS
  bmi
    Usage:

     bmi(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Calculate BMI and show body weight category.

    Demonstrates: schema's "in" clause, label (summary) of 'in' values,
    schema's "min" & "max" clauses, summary, caption, default value,
    function metadata.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   age => *uint*

        Gender.

    *   height => *ufloat*

        Body height, in cm.

    *   weight => *ufloat*

        Body weight, in kg.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  hello1
    Usage:

     hello1(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Accept a choice of salutation, an optional name and return a greeting.

    The acceptable name is restricted to safe characters only so it is safe
    when it needs to be displayed as HTML without any escaping.

    Demonstrates: "in" clause, summary.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   name => *str*

        Name to greet.

    *   salutation => *str*

        Salutation (e.g. Mr, Mrs).

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/Perinci-Examples-HTML>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-Perinci-Examples-HTML>.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=Perinci-Examples-HTML
    >

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

