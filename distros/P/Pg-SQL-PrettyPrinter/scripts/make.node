#!/usr/bin/env bash

die() {
    echo "$@" >&2
    exit 1
}

node_name="${1}"
[[ -n "${node_name}" ]] || die "You didn't provide Node Name!"

[[ "${node_name}" =~ ^[A-Z][a-zA-Z_]+$ ]] || die "Invalid node name: ${node_name}"

this_script="$( readlink -f "$0" )"
script_dir="$( readlink -f "$( dirname "${this_script}" )" )"
top_dir="$( readlink -f "$( dirname "${script_dir}" )" )"
node_dir="$( readlink -f "${top_dir}/lib/Pg/SQL/PrettyPrinter/Node" )"

[[ -d "${node_dir}" ]] || die "Node dir (${node_dir}) doesn't exist!"
cd "${node_dir}" || die "Cannot enter node dir (${node_dir})!"

[[ -f "${node_name}.pm" ]] && die "Node file (${node_name}.pm) already exists in ${node_dir}!"
[[ -f "${node_name}.pod" ]] && die "Node file (${node_name}.pod) already exists in ${node_dir}!"

cat > "${node_name}.pod" << _END_OF_POD_
=head1 NAME

Pg::SQL::PrettyPrinter::Node::${node_name} - Class representing *** FIX ME ***

=head1 SYNOPSIS

Not to be used directly.

=head1 FUNCTIONS

Aside from functions listed below, it inherits functions from
L<Pg::SQL::PrettyPrinter::Node>.

=head2 new

Makes object, first using parent's constructur, and then "unpacks" it's elements.

=head2 as_text

Returns this object as plain text, with next to none formatting.

=head2 pretty_print

Returns this object as text using pretty printing.

=head1 AUTHOR

hubert depesz lubaczewski, C<< <depesz at depesz.com> >>

=head1 BUGS

Please report any bugs or feature requests to C<depesz at depesz.com>.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Pg::SQL::PrettyPrinter::Node::${node_name}

=head1 COPYRIGHT & LICENSE

Copyright  hubert depesz lubaczewski, all rights reserved.

This program is distributed under the (Revised) BSD License.

_END_OF_POD_

echo "package Pg::SQL::PrettyPrinter::Node::${node_name};" > "${node_name}.pm"
cat >> "${node_name}.pm" << '_END_OF_PM_'

# UTF8 boilerplace, per http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/
use v5.26;
use strict;
use warnings;
use warnings qw( FATAL utf8 );
use utf8;
use open qw( :std :utf8 );
use Unicode::Normalize qw( NFC );
use Unicode::Collate;
use Encode qw( decode );

if ( grep /\P{ASCII}/ => @ARGV ) {
    @ARGV = map { decode( 'UTF-8', $_ ) } @ARGV;
}

# If there is __DATA__,then uncomment next line:
# binmode( DATA, ':encoding(UTF-8)' );
# UTF8 boilerplace, per http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/

# Useful common code
use autodie;
use Carp qw( carp croak confess cluck );
use English qw( -no_match_vars );
use Data::Dumper qw( Dumper );

# give a full stack dump on any untrapped exceptions
local $SIG{ __DIE__ } = sub {
    confess "Uncaught exception: @_" unless $^S;
};

# now promote run-time warnings into stackdumped exceptions
#   *unless* we're in an try block, in which
#   case just generate a clucking stackdump instead
local $SIG{ __WARN__ } = sub {
    if   ( $^S ) { cluck "Trapped warning: @_" }
    else         { confess "Deadly warning: @_" }
};

# Useful common code

use parent qw( Pg::SQL::PrettyPrinter::Node );

sub new {
    my $class = shift;
    my $self  = $class->SUPER::new( @_ );
    bless $self, $class;

    *** FIX ME ***

    return $self;
}

sub as_text {
    my $self = shift;
    *** FIX ME ***
}

sub pretty_print {
    my $self = shift;
    *** FIX ME ***
}

1;

# vim: set ft=perl:
_END_OF_PM_

echo "All done:"
ls -l "${node_dir}/${node_name}."{pm,pod}

# vim: set ft=sh:
