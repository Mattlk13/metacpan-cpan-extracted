=encoding utf8

=head1 NAME

PDK::Device::ConfigBackup - Device Configuration Backup and Management Module

=head1 SYNOPSIS

  use PDK::Device::ConfigBackup;

  my $cb = PDK::Device::ConfigBackup->new();

  # Retrieve the list of devices from the database
  use PDK::DBI::Pg;

  # Database connection parameters
  my $db_params = {
    host     => '192.168.99.99',
    port     => 5432,
    dbname   => 'netdisco',
    user     => 'netdisco',
    password => 'Cisc0123'
  };

  # Create a database connection
  my $dbi = PDK::DBI::Pg->new($db_params);

  # SQL query to retrieve device information
  my $sql = <<SQL;
  SELECT name, ip, os
    FROM device
  SQL

  # Execute the query and retrieve all devices
  my $devices = $dbi->execute($sql)->all;

  # Fetch device configurations in parallel
  $cb->getConfigJob($devices);

  # Send commands to devices
  $cb->execCommandsJob($devices, ['conf t', 'no ip do loo', 'end', 'wri']);

  # Execute FTP backup
  $cb->ftpConfigJob($devices);

=head1 DESCRIPTION

This module provides a set of methods for fetching configurations from devices, sending commands to devices, and executing FTP backups. It supports parallel processing to enhance efficiency.

=head1 ATTRIBUTES

=over 4

=item queue

Specifies the number of concurrent tasks. Default is 10 or the value of the PDK_DEVICE_BACKUP_QUEUE environment variable.

=item workdir

Specifies the root directory for configuration files. Default is the user's home directory or the value of the PDK_DEVICE_BACKUP_HOME environment variable.

=item debug

Specifies the debug level. Default is 0 or the value of the PDK_DEVICE_BACKUP_DEBUG environment variable.

=item result

Stores the results of operations (getConfig, ftpConfig, execCommands) with success and fail lists.

=back

=head1 METHODS

=head2 getConfigJob($devices)

Fetches device configurations in parallel.

=head2 ftpConfigJob($devices)

Executes FTP backup for multiple devices in parallel.

=head2 execCommandsJob($devices, $commands)

Sends the same commands to multiple devices in parallel.

=head2 runCommandsJob($devices)

Executes device-specific commands in parallel. Each device in the $devices array should have its own 'commands' key with an array of commands.

=head2 ftpConfig($param)

Performs FTP configuration backup for a single device.

=head2 getConfig($param)

Retrieves the configuration for a single device.

=head2 execCommands($param, $commands)

Executes commands on a single device.

=head2 startFtpConfig($param)

Initiates FTP configuration backup and records the result.

=head2 startExecCommands($param, $commands)

Initiates command execution and records the result.

=head2 startGetConfig($param)

Initiates configuration retrieval and records the result.

=head2 dump($msg)

Outputs debug information based on the debug level.

=head1 USAGE EXAMPLE

Here is a complete example demonstrating the usage of this module:

  #!/usr/bin/perl

  use 5.030;
  use strict;
  use warnings;

  use Test::More;
  use PDK::DBI::Pg;
  use PDK::Device::ConfigBackup;

  # Database connection parameters
  my $db_params = {
    host     => '192.168.99.99',
    port     => 5432,
    dbname   => 'netdisco',
    user     => 'netdisco',
    password => 'Cisc0123'
  };

  # Create a database connection
  my $dbi = PDK::DBI::Pg->new($db_params);

  # SQL query to retrieve device information
  my $sql = <<SQL;
  SELECT name, ip, os
    FROM device
  SQL

  # Execute the query and retrieve all devices
  my $devices = $dbi->execute($sql)->all;

  # Initialize the configuration backup object
  my $cb = PDK::Device::ConfigBackup->new(dbi => $dbi);

  # Fetch device configurations in parallel
  $cb->getConfigJob($devices);

  # Send a set of commands to the devices
  $cb->execCommandsJob($devices, ['conf t', 'no ip do loo', 'end', 'wri']);

  # Execute FTP backup
  $cb->ftpConfigJob($devices);

=head1 AUTHOR

WENWU YAN <968828@gmail.com>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2024 WENWU YAN

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

=head1 SEE ALSO

PDK::DBI::Pg, Parallel::ForkManager, Thread::Queue

=cut