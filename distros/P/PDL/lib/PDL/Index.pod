
=head1 NAME

PDL::Index - an index of PDL documentation

=head1 DESCRIPTION

A meta document listing the documented PDL modules and
the PDL manual documents

=head1 PDL manuals

=over 4

=item *

L<Inline::Pdlpp> - Write PDL Subroutines inline with PDL::PP

=item *

L<PDL::API> - making ndarrays from Perl and C/XS code

=item *

L<PDL::BadValues> - Discussion of bad value support in PDL

=item *

L<PDL::Broadcasting> - Tutorial for PDL's Broadcasting feature

=item *

L<PDL::Bugs> - How to diagnose and report PDL problems

=item *

L<PDL::Course> - A journey through PDL's documentation, from beginner to advanced.

=item *

L<PDL::Dataflow> - description of the dataflow implementation and philosophy

=item *

L<PDL::FAQ> - Frequently asked questions about PDL

=item *

L<PDL::Graphics> - Introduction to the PDL::Graphics modules

=item *

L<PDL::IO> - An overview of the modules in the PDL::IO namespace.

=item *

L<PDL::Indexing> - Introduction to indexing and slicing ndarrays.

=item *

L<PDL::Internals> - description of some aspects of the current internals

=item *

L<PDL::MATLAB> - A guide for MATLAB users.

=item *

L<PDL::Modules> - A guide to PDL's module reference.

=item *

L<PDL::Objects> - Object-Orientation, what is it and how to exploit it

=item *

L<PDL::PP> - Generate PDL routines from concise descriptions

=item *

L<PDL::ParallelCPU> - Parallel processor multi-threading support in PDL

=item *

L<PDL::Philosophy> - Why did we write PDL?

=item *

L<PDL::QuickStart> - Quick introduction to PDL features.

=item *

L<PDL::Scilab> - A guide for Scilab users.

=item *

L<PDL::Tips> - Small tidbits of useful arcana. Programming tidbits and such.

=item *

L<PDL::Tutorials> - A guide to PDL's tutorial documentation.


=back

=head1 PDL scripts

=over 4

=item *

L<perldl> - Simple shell for PDL

=item *

L<pptemplate|PDL::pptemplate> - script to generate Makefile.PL and PP file skeleton


=back

=head1 PDL modules

=over 4

=item *

L<PDL> - the Perl Data Language

=item *

L<PDL::AutoLoader> - MatLab style AutoLoader for PDL

=item *

L<PDL::Bad> - PDL always processes bad values

=item *

L<PDL::Basic> - Basic utility functions for PDL

=item *

L<PDL::Char> - PDL subclass which allows reading and writing of fixed-length character strings as byte PDLs

=item *

L<PDL::Complex::Overloads> - subclass of Math::Complex with overload fallbacks

=item *

L<PDL::Compression> - compression utilities

=item *

L<PDL::Constants> - basic compile time constants for PDL

=item *

L<PDL::Core> - fundamental PDL functionality and vectorization/broadcasting

=item *

L<PDL::Core::Dev> - PDL development module

=item *

L<PDL::Dbg> - functions to support debugging of PDL scripts

=item *

L<PDL::Demos> - PDL demo infrastructure

=item *

L<PDL::Demos::Sound> - play PDL-generated sounds

=item *

L<PDL::DiskCache> - Non-memory-resident array object

=item *

L<PDL::Doc> - support for PDL online documentation

=item *

L<PDL::Doc::Perldl> - commands for accessing PDL doc database from 'perldl' shell

=item *

L<PDL::Exporter> - PDL export control

=item *

L<PDL::FFT> - FFTs for PDL

=item *

L<PDL::Func> - interpolation, integration, & gradient estimation (differentiation) of functions

=item *

L<PDL::IO::Dumper> - data dumping for structs with PDLs

=item *

L<PDL::IO::FITS> - Simple FITS support for PDL

=item *

L<PDL::IO::FastRaw> - A simple, fast and convenient io format for PerlDL.

=item *

L<PDL::IO::FlexRaw> - A flexible binary I/O format for PerlDL

=item *

L<PDL::IO::Misc> - misc IO routines for PDL

=item *

L<PDL::IO::Pic> - image I/O for PDL

=item *

L<PDL::IO::Pnm> - pnm format I/O for PDL

=item *

L<PDL::IO::STL> - read/write 3D stereolithography files

=item *

L<PDL::IO::Storable> - helper functions to make PDL usable with Storable

=item *

L<PDL::Image2D> - Miscellaneous 2D image processing functions

=item *

L<PDL::ImageND> - useful image processing in N dimensions

=item *

L<PDL::ImageRGB> - some utility functions for RGB image data handling

=item *

L<PDL::Install::Files> - Module for use by L<ExtUtils::Depends> and L<Inline>

=item *

L<PDL::Lite> - minimum PDL module OO loader

=item *

L<PDL::LiteF> - minimum PDL module function loader

=item *

L<PDL::Math> - extended mathematical operations and special functions

=item *

L<PDL::Matrix> - a convenience matrix class for column-major access

=item *

L<PDL::MatrixOps> - Some Useful Matrix Operations

=item *

L<PDL::NiceSlice> - toward a nicer slicing syntax for PDL

=item *

L<PDL::Ops> - Fundamental mathematical operators

=item *

L<PDL::Options> - simplifies option passing by hash in PerlDL

=item *

L<PDL::Primitive> - primitive operations for pdl

=item *

L<PDL::Reduce> - a C<reduce> function for PDL

=item *

L<PDL::Slices> - Indexing, slicing, and dicing

=item *

L<PDL::Transform> - Coordinate transforms, image warping, and N-D functions

=item *

L<PDL::Transform::Cartography> - Useful cartographic projections

=item *

L<PDL::Types> - define fundamental PDL Datatypes

=item *

L<PDL::Ufunc> - primitive ufunc operations for pdl


=back

=head1 HISTORY

Automatically generated by scantree.pl for PDL version 2.089_01.

