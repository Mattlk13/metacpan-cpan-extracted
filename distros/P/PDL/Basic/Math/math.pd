use strict;
use warnings;
use Config;
use PDL::Types qw(ppdefs ppdefs_complex types);
require PDL::Core::Dev;

my $R = [ppdefs()];
my $F = [map $_->ppsym, grep $_->real && !$_->integer, types()];
my $C = [ppdefs_complex()];
my @Rtypes = grep $_->real, types();
my @Ctypes = grep !$_->real, types();

pp_addpm({At=>'Top'},<<'EOD');
use strict;
use warnings;

=head1 NAME

PDL::Math - extended mathematical operations and special functions

=head1 SYNOPSIS

 use PDL::Math;

 use PDL::Graphics::TriD;
 imag3d [SURF2D,bessj0(rvals(zeroes(50,50))/2)];

=head1 DESCRIPTION

This module extends PDL with more advanced mathematical functions than
provided by standard Perl.

All the functions have one input pdl, and one output, unless otherwise
stated.

Many of the functions are linked from the system maths library or the
Cephes maths library (determined when PDL is compiled); a few are implemented
entirely in PDL.

=cut

### Kludge for backwards compatibility with older scripts
### This should be deleted at some point later than 21-Nov-2003.
BEGIN {use PDL::MatrixOps;}

EOD

# Internal doc util

my %doco;
sub doco {
  my @funcs = @_;
  my $doc = pop @funcs;
  for (@funcs) { $doco{$_} = $doc }
}

doco (qw/acos asin atan tan/, <<'EOF');
The usual trigonometric function.
EOF

doco (qw/cosh sinh tanh acosh asinh atanh/, <<'EOF');
The standard hyperbolic function.
EOF

doco (qw/ceil floor/,
'Round to integer values in floating-point format.');

doco ('rint',
q/=for ref

Round to integer values in floating-point format.

=for method

rint uses the 'round half to even' rounding method (also known as
banker's rounding).  Half-integers are rounded to the nearest even
number. This avoids a slight statistical bias inherent in always
rounding half-integers up or away from zero.

If you are looking to round half-integers up (regardless of sign), try
C<floor($x+0.5)>.  If you want to round half-integers away from zero,
try C<< ceil(abs($x)+0.5)*($x<=>0) >>./);

doco( 'pow',"Synonym for `**'.");

doco ('erf',"The error function.");
doco ('erfc',"The complement of the error function.");
doco ('erfi',"The inverse of the error function.");
doco ('ndtri',
"=for ref

The value for which the area under the
Gaussian probability density function (integrated from
minus infinity) is equal to the argument (cf L</erfi>).");

doco(qw/bessj0 bessj1/,
     "The regular Bessel function of the first kind, J_n" );

doco(qw/bessy0 bessy1/,
     "The regular Bessel function of the second kind, Y_n." );

doco( qw/bessjn/,
'=for ref

The regular Bessel function of the first kind, J_n
.
This takes a second int argument which gives the order
of the function required.
');

doco( qw/bessyn/,
'=for ref

The regular Bessel function of the first kind, Y_n
.
This takes a second int argument which gives the order
of the function required.
');

if ($^O !~ /win32/i || $Config{cc} =~ /\bgcc/i) {  # doesn't seem to be in the MS VC lib
doco( 'lgamma' ,<<'EOD');
=for ref

log gamma function

This returns 2 ndarrays -- the first set gives the log(gamma) values,
while the second set, of integer values, gives the sign of the gamma
function.  This is useful for determining factorials, amongst other
things.

EOD

} # if: $^O !~ win32

pp_addhdr('
#include <tgmath.h>
#include "protos.h"
');

if ($^O =~ /MSWin/) {
pp_addhdr('
#include <float.h>
#ifdef _MSC_VER
double rint (double);
#endif
');
}

# Standard `-lm'
my (@ufuncs1) = qw(acos asin atan cosh sinh tan tanh); # F,D only
my (@ufuncs1g) = qw(ceil floor rint); # Any real type

# Note:
#  ops.pd has a power() function that does the same thing
#  (although it has OtherPars => 'int swap;' as well)
#  - left this in for now.
#
my (@bifuncs1) = qw(pow); # Any type

# Extended `-lm'
my (@ufuncs2) = qw(acosh asinh atanh erf erfc);  # F,D only
my (@besufuncs) = qw(j0 j1 y0 y1); # "
my (@besbifuncs) = qw(jn yn); # "
# Need igamma, ibeta, and a fall-back implementation of the above

sub code_ufunc {
<<EOF
PDL_IF_BAD(if ( \$ISBAD(a()) ) { \$SETBAD(b()); } else {,)
  \$b() = $_[0](\$a());
PDL_IF_BAD(},)
EOF
}

sub code_bifunc {
    my $name = $_[0];
    my $x = $_[1] || 'a'; my $y = $_[2] || 'b'; my $c = $_[3] || 'c';
<<EOF
PDL_IF_BAD(if ( \$ISBAD($x()) || \$ISBAD($y()) ) { \$SETBAD($c()); } else {,)
  \$$c() = $name(\$$x(),\$$y());
PDL_IF_BAD(},)
EOF
}

sub inplace_doc {
    my $func = shift;
    return "$doco{$func} Works inplace.";
}

foreach my $func (@ufuncs1) {
    my $got_complex = PDL::Core::Dev::got_complex_version($func, 1);
    pp_def($func,
	   HandleBad => 1,
	   NoBadifNaN => 1,
	   GenericTypes => [($got_complex ? @$C : ()), @$F],
	   Pars => 'a(); [o]b();',
	   Inplace => 1,
	   Doc => inplace_doc( $func ),
	   Code => code_ufunc($func),
	   );
}
# real types
foreach my $func (@ufuncs1g) {
    pp_def($func,
	   HandleBad => 1,
	   NoBadifNaN => 1,
	   Pars => 'a(); [o]b();',
	   Inplace => 1,
	   Doc => inplace_doc( $func ),
	   Code => code_ufunc($func),
	   );
}

foreach my $func (@bifuncs1) {
    my $got_complex = PDL::Core::Dev::got_complex_version($func, 2);
    pp_def($func,
	   HandleBad => 1,
	   NoBadifNaN => 1,
	   Pars => 'a(); b(); [o]c();',
	   Inplace => [ 'a' ],
	   GenericTypes => [($got_complex ? @$C : ()), @$R],
	   Doc => inplace_doc( $func ),
	   Code => code_bifunc($func),
	   );
}

# Functions provided by extended -lm
foreach my $func (@ufuncs2) {
    pp_def($func,
	   HandleBad => 1,
	   NoBadifNaN => 1,
	   GenericTypes => $F,
	   Pars => 'a(); [o]b();',
	   Inplace => 1,
	   Doc => inplace_doc( $func ),
	   Code => code_ufunc($func),
	   );
}

foreach my $func (@besufuncs) {
    my $fname = "bess$func";
    pp_def($fname,
	   HandleBad => 1,
	   NoBadifNaN => 1,
	   GenericTypes => $F,
	   Pars => 'a(); [o]b();',
	   Inplace => 1,
	   Doc => inplace_doc( $fname ),
	   Code => code_ufunc($func),
	   );
}

foreach my $func (@besbifuncs) {
    my $fname = "bess$func";
    pp_def($fname,
	   HandleBad => 1,
	   NoBadifNaN => 1,
	   GenericTypes => $F,
	   Pars => 'a(); int n(); [o]b();',
	   Inplace => [ 'a' ],
	   Doc => inplace_doc( $fname ),
	   Code => code_bifunc($func,'n','a','b'),
	   );
}

if ($^O !~ /win32/i) {
    pp_def("lgamma",
	   HandleBad => 1,
	   Pars => 'a(); [o]b(); int[o]s()',
	   Doc => $doco{"lgamma"},
	   Code => '
	    extern int signgam;
	    PDL_IF_BAD(if ( $ISBAD(a()) ) { $SETBAD(b()); $SETBAD(s()); } else {,)
	      $b() = lgamma($a());
	      $s() = signgam;
	    PDL_IF_BAD(},)
	   ',     # what happens to signgam if $a() is bad?
	   );
} # if: os !~ win32

elsif ($Config{cc} =~ /\bgcc/i) {
    pp_def("lgamma",
	   HandleBad => 1,
	   Pars => 'a(); [o]b(); int[o]s()',
	   Doc => $doco{"lgamma"},
	   Code => '
	    PDL_IF_BAD(if ( $ISBAD(a()) ) { $SETBAD(b()); $SETBAD(s()); } else {,)
	    $b() = lgamma($a());
	    $s() = tgamma($a()) < 0 ? -1 : 1;
	    PDL_IF_BAD(},)
	    ',     # what happens to signgam if $a() is bad?
	   );
} # elsif: cc =~ /\bgcc/i

pp_def(
       'badmask',
       Pars => 'a(); b(); [o]c();',
       Inplace => [ 'a' ],
       HandleBad => 1,
       Code =>
       '$c() = isfinite((double) $a()) ? $a() : $b();',
       BadCode =>
       '$c() = ( isfinite((double) $a()) && $ISGOOD(a()) ) ? $a() : $b();',
       CopyBadStatusCode =>
       'if ( a == c && $ISPDLSTATEBAD(a) )
           PDL->propagate_badflag( c, 0 );  /* propagate badflag if inplace AND its changed */
        $SETPDLSTATEGOOD(c);          /* always make sure the output is "good" */
       ',
       Doc =>
'=for ref

Clears all C<infs> and C<nans> in C<$a> to the corresponding value in C<$b>.

badmask can be run with C<$x> inplace:

  badmask($x->inplace,0);
  $x->inplace->badmask(0);

',
       BadDoc =>
       'If bad values are present, these are also cleared.',
       );

pp_def(
       'isfinite',
       Pars => 'a(); int [o]mask();',
       Inplace => 1,
       HandleBad => 1,
       Code =>
       '$mask() = isfinite((double) $a()) != 0;',
       BadCode =>
       '$mask() = isfinite((double) $a()) != 0 && $ISGOOD($a());',
       CopyBadStatusCode =>
       'if ( a == mask && $ISPDLSTATEBAD(a) )
           PDL->propagate_badflag( mask, 0 );  /* propagate badflag if inplace AND its changed */
        $SETPDLSTATEGOOD(mask);          /* always make sure the output is "good" */
       ',
       Doc =>
'Sets C<$mask> true if C<$a> is not a C<NaN> or C<inf> (either positive or negative). Works inplace.',
       BadDoc =>
'Bad values are treated as C<NaN> or C<inf>.',
       );

# Extra functions from cephes
pp_def(
       "erfi",
       HandleBad => 1,
       NoBadifNaN => 1,
       GenericTypes => $F,
       Pars => 'a(); [o]b()',
       Inplace => 1,
       Doc => inplace_doc( "erfi" ),
       Code =>
       'extern double ndtri(double), SQRTH;
	$b() = SQRTH*ndtri((1+(double)$a())/2);',
       BadCode =>
       'extern double ndtri(double), SQRTH;
        if ( $ISBAD(a()) ) { $SETBAD(b()); }
        else { $b() = SQRTH*ndtri((1+(double)$a())/2); }',
       );

pp_def(
       "ndtri",
       HandleBad => 1,
       NoBadifNaN => 1,
       GenericTypes => $F,
       Pars => 'a(); [o]b()',
       Inplace => 1,
       Doc => inplace_doc( "ndtri" ),
       Code =>
       'extern double ndtri(double);
	$b() = ndtri((double)$a());',
       BadCode =>
       'extern double ndtri(double);
        if ( $ISBAD(a()) ) { $SETBAD(b()); }
	else { $b() = ndtri((double)$a()); }',
       );

pp_def("polyroots",
      Pars => 'cr(n); ci(n); [o]rr(m); [o]ri(m);',
      RedoDimsCode => '$SIZE(m) = $PDL(cr)->dims[0]-1;',
      GenericTypes => ['D'],
      Code => '
              extern int cpoly( double *cr, double *ci, int deg,
                    double *rr, double *ri );
              int deg = (int)$SIZE(n)-1;
              if (cpoly($P(cr), $P(ci), deg, $P(rr), $P(ri)))
                 $CROAK("PDL::Math::polyroots failed");
',
      , Doc => '

=for ref

Complex roots of a complex polynomial, given coefficients in order
of decreasing powers.

=for usage

 ($rr, $ri) = polyroots($cr, $ci);

',);

pp_addpm({At=>'Bot'},<<'EOD');

=head1 BUGS

Hasn't been tested on all platforms to ensure Cephes
versions are picked up automatically and used correctly.

=head1 AUTHOR

Copyright (C) R.J.R. Williams 1997 (rjrw@ast.leeds.ac.uk), Karl Glazebrook
(kgb@aaoepp.aao.gov.au) and Tuomas J. Lukka (Tuomas.Lukka@helsinki.fi).
Portions (C) Craig DeForest 2002 (deforest@boulder.swri.edu).

All rights reserved. There is no warranty. You are allowed
to redistribute this software / documentation under certain
conditions. For details, see the file COPYING in the PDL
distribution. If this file is separated from the PDL distribution,
the PDL copyright notice should be included in the file.

=cut

EOD
pp_done();
