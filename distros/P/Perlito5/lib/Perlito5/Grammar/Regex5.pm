# Do not edit this file - Generated by Perlito5 9.023

{
    package main;
    package Perlito5::Grammar::Regex5;
    use strict ;
    use warnings ;
    our $CAPTURE_ID = 0;
    sub Perlito5::Grammar::Regex5::any {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = (('' ne $str->[$MATCH->{"to"}] && ++$MATCH->{"to"}));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::string_of_code {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $last_match_null = 0;
            my $m = $MATCH;
            my $to = $MATCH->{"to"};
            my $count = 0;
            while ((do {
                my $tmp105 = $MATCH->{"to"};
                (((("\\" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && ('' ne $str->[$MATCH->{"to"}] && ++$MATCH->{"to"}))) || ($MATCH->{"to"} = $tmp105, ((("{" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $m2 = string_of_code($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        1
                    }
                    else {;
                        0
                    }
                }) && (("}" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)))) || ($MATCH->{"to"} = $tmp105, ((do {
                    my $tmp = $MATCH;
                    $MATCH = {"from" => $tmp->{"to"}, "to" => $tmp->{"to"}, };
                    my $res = (("}" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1));
                    $MATCH = $tmp;
                    $res ? 0 : 1
                }) && ('' ne $str->[$MATCH->{"to"}] && ++$MATCH->{"to"})))
            }) && ($last_match_null < 2)) {
                if ($to == $MATCH->{"to"}) {;
                    $last_match_null = $last_match_null + 1
                }
                else {;
                    $last_match_null = 0
                }
                $m = $MATCH;
                $to = $MATCH->{"to"};
                $count = $count + 1
            }
            $MATCH = $m;
            $MATCH->{"to"} = $to;
            $count > 0
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::quotemeta {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $last_match_null = 0;
            my $m = $MATCH;
            my $to = $MATCH->{"to"};
            while (((do {
                my $tmp = $MATCH;
                $MATCH = {"from" => $tmp->{"to"}, "to" => $tmp->{"to"}, };
                my $res = ((("\\" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (("E" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)));
                $MATCH = $tmp;
                $res ? 0 : 1
            }) && ('' ne $str->[$MATCH->{"to"}] && ++$MATCH->{"to"})) && ($last_match_null < 2)) {
                if ($to == $MATCH->{"to"}) {;
                    $last_match_null = $last_match_null + 1
                }
                else {;
                    $last_match_null = 0
                }
                $m = $MATCH;
                $to = $MATCH->{"to"}
            }
            $MATCH = $m;
            $MATCH->{"to"} = $to;
            1
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::posix_character_class {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $tmp127 = $MATCH->{"to"};
            ((("a" eq $str->[($MATCH->{"to"}) + 0]) && ("l" eq $str->[($MATCH->{"to"}) + 1]) && ("p" eq $str->[($MATCH->{"to"}) + 2]) && ("h" eq $str->[($MATCH->{"to"}) + 3]) && ("a" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("a" eq $str->[($MATCH->{"to"}) + 0]) && ("l" eq $str->[($MATCH->{"to"}) + 1]) && ("n" eq $str->[($MATCH->{"to"}) + 2]) && ("u" eq $str->[($MATCH->{"to"}) + 3]) && ("m" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("a" eq $str->[($MATCH->{"to"}) + 0]) && ("s" eq $str->[($MATCH->{"to"}) + 1]) && ("c" eq $str->[($MATCH->{"to"}) + 2]) && ("i" eq $str->[($MATCH->{"to"}) + 3]) && ("i" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("b" eq $str->[($MATCH->{"to"}) + 0]) && ("l" eq $str->[($MATCH->{"to"}) + 1]) && ("a" eq $str->[($MATCH->{"to"}) + 2]) && ("n" eq $str->[($MATCH->{"to"}) + 3]) && ("k" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("c" eq $str->[($MATCH->{"to"}) + 0]) && ("n" eq $str->[($MATCH->{"to"}) + 1]) && ("t" eq $str->[($MATCH->{"to"}) + 2]) && ("r" eq $str->[($MATCH->{"to"}) + 3]) && ("l" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("d" eq $str->[($MATCH->{"to"}) + 0]) && ("i" eq $str->[($MATCH->{"to"}) + 1]) && ("g" eq $str->[($MATCH->{"to"}) + 2]) && ("i" eq $str->[($MATCH->{"to"}) + 3]) && ("t" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("g" eq $str->[($MATCH->{"to"}) + 0]) && ("r" eq $str->[($MATCH->{"to"}) + 1]) && ("a" eq $str->[($MATCH->{"to"}) + 2]) && ("p" eq $str->[($MATCH->{"to"}) + 3]) && ("h" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("l" eq $str->[($MATCH->{"to"}) + 0]) && ("o" eq $str->[($MATCH->{"to"}) + 1]) && ("w" eq $str->[($MATCH->{"to"}) + 2]) && ("e" eq $str->[($MATCH->{"to"}) + 3]) && ("r" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("p" eq $str->[($MATCH->{"to"}) + 0]) && ("r" eq $str->[($MATCH->{"to"}) + 1]) && ("i" eq $str->[($MATCH->{"to"}) + 2]) && ("n" eq $str->[($MATCH->{"to"}) + 3]) && ("t" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("p" eq $str->[($MATCH->{"to"}) + 0]) && ("u" eq $str->[($MATCH->{"to"}) + 1]) && ("n" eq $str->[($MATCH->{"to"}) + 2]) && ("c" eq $str->[($MATCH->{"to"}) + 3]) && ("t" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("s" eq $str->[($MATCH->{"to"}) + 0]) && ("p" eq $str->[($MATCH->{"to"}) + 1]) && ("a" eq $str->[($MATCH->{"to"}) + 2]) && ("c" eq $str->[($MATCH->{"to"}) + 3]) && ("e" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("u" eq $str->[($MATCH->{"to"}) + 0]) && ("p" eq $str->[($MATCH->{"to"}) + 1]) && ("p" eq $str->[($MATCH->{"to"}) + 2]) && ("e" eq $str->[($MATCH->{"to"}) + 3]) && ("r" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp127, (("w" eq $str->[($MATCH->{"to"}) + 0]) && ("o" eq $str->[($MATCH->{"to"}) + 1]) && ("r" eq $str->[($MATCH->{"to"}) + 2]) && ("d" eq $str->[($MATCH->{"to"}) + 3]) && ($MATCH->{"to"} += 4))) || ($MATCH->{"to"} = $tmp127, (("x" eq $str->[($MATCH->{"to"}) + 0]) && ("d" eq $str->[($MATCH->{"to"}) + 1]) && ("i" eq $str->[($MATCH->{"to"}) + 2]) && ("g" eq $str->[($MATCH->{"to"}) + 3]) && ("i" eq $str->[($MATCH->{"to"}) + 4]) && ("t" eq $str->[($MATCH->{"to"}) + 5]) && ($MATCH->{"to"} += 6)))
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::character {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = (((do {
            my $tmp = $MATCH;
            $MATCH = {"from" => $tmp->{"to"}, "to" => $tmp->{"to"}, };
            my $res = (("]" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1));
            $MATCH = $tmp;
            $res ? 0 : 1
        }) && (do {
            my $m2 = Perlito5::Grammar::Regex5::any($str, $MATCH->{"to"});
            if ($m2) {
                $MATCH->{"to"} = $m2->{"to"};
                $MATCH->{"any"} = $m2;
                1
            }
            else {;
                0
            }
        }) && (do {
            $MATCH->{"capture"} = {"character" => Perlito5::Match::flat($MATCH->{"any"}), };
            1
        })));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::character2 {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = (((do {
            my $tmp = $MATCH;
            $MATCH = {"from" => $tmp->{"to"}, "to" => $tmp->{"to"}, };
            my $res = (("]" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1));
            $MATCH = $tmp;
            $res ? 0 : 1
        }) && (do {
            my $m2 = Perlito5::Grammar::Regex5::any($str, $MATCH->{"to"});
            if ($m2) {
                $MATCH->{"to"} = $m2->{"to"};
                $MATCH->{"any"} = $m2;
                1
            }
            else {;
                0
            }
        }) && (do {
            $MATCH->{"capture"} = {"character" => Perlito5::Match::flat($MATCH->{"any"}), };
            1
        })));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::character_class {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $tmp147 = $MATCH->{"to"};
            (((("[" eq $str->[($MATCH->{"to"}) + 0]) && (":" eq $str->[($MATCH->{"to"}) + 1]) && ($MATCH->{"to"} += 2)) && (do {
                my $m2 = Perlito5::Grammar::Regex5::posix_character_class($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"posix_character_class"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && ((":" eq $str->[($MATCH->{"to"}) + 0]) && ("]" eq $str->[($MATCH->{"to"}) + 1]) && ($MATCH->{"to"} += 2)) && (do {
                $MATCH->{"capture"} = {"posix_character_class" => Perlito5::Match::flat($MATCH->{"posix_character_class"}), };
                1
            }))) || ($MATCH->{"to"} = $tmp147, ((("[" eq $str->[($MATCH->{"to"}) + 0]) && (":" eq $str->[($MATCH->{"to"}) + 1]) && ("^" eq $str->[($MATCH->{"to"}) + 2]) && ($MATCH->{"to"} += 3)) && (do {
                my $m2 = Perlito5::Grammar::Regex5::posix_character_class($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"posix_character_class"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && ((":" eq $str->[($MATCH->{"to"}) + 0]) && ("]" eq $str->[($MATCH->{"to"}) + 1]) && ($MATCH->{"to"} += 2)) && (do {
                $MATCH->{"capture"} = {"negated_posix_character_class" => Perlito5::Match::flat($MATCH->{"posix_character_class"}), };
                1
            }))) || ($MATCH->{"to"} = $tmp147, ((do {
                my $m2 = Perlito5::Grammar::Regex5::character($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"character"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                my $tmp148 = $MATCH->{"to"};
                (((("-" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $m2 = Perlito5::Grammar::Regex5::character2($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"character2"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (do {
                    $MATCH->{"capture"} = {"character_range" => [Perlito5::Match::flat($MATCH->{"character"}), Perlito5::Match::flat($MATCH->{"character2"})], };
                    1
                }))) || ($MATCH->{"to"} = $tmp148, (do {
                    $MATCH->{"capture"} = Perlito5::Match::flat($MATCH->{"character"});
                    1
                }))
            })))
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::character_class_list {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $tmp159 = $MATCH->{"to"};
            (((do {
                my $m2 = Perlito5::Grammar::Regex5::character_class($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"character_class"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                my $tmp160 = $MATCH->{"to"};
                (((do {
                    my $m2 = character_class_list($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"character_class_list"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (do {
                    $MATCH->{"capture"} = [Perlito5::Match::flat($MATCH->{"character_class"}), @{Perlito5::Match::flat($MATCH->{"character_class_list"})}];
                    1
                }))) || ($MATCH->{"to"} = $tmp160, (do {
                    $MATCH->{"capture"} = [Perlito5::Match::flat($MATCH->{"character_class"})];
                    1
                }))
            }))) || ($MATCH->{"to"} = $tmp159, (do {
                $MATCH->{"capture"} = [];
                1
            }))
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::verb {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $tmp169 = $MATCH->{"to"};
            ((("P" eq $str->[($MATCH->{"to"}) + 0]) && ("R" eq $str->[($MATCH->{"to"}) + 1]) && ("U" eq $str->[($MATCH->{"to"}) + 2]) && ("N" eq $str->[($MATCH->{"to"}) + 3]) && ("E" eq $str->[($MATCH->{"to"}) + 4]) && ($MATCH->{"to"} += 5))) || ($MATCH->{"to"} = $tmp169, (("S" eq $str->[($MATCH->{"to"}) + 0]) && ("K" eq $str->[($MATCH->{"to"}) + 1]) && ("I" eq $str->[($MATCH->{"to"}) + 2]) && ("P" eq $str->[($MATCH->{"to"}) + 3]) && ($MATCH->{"to"} += 4))) || ($MATCH->{"to"} = $tmp169, (("M" eq $str->[($MATCH->{"to"}) + 0]) && ("A" eq $str->[($MATCH->{"to"}) + 1]) && ("R" eq $str->[($MATCH->{"to"}) + 2]) && ("K" eq $str->[($MATCH->{"to"}) + 3]) && ($MATCH->{"to"} += 4))) || ($MATCH->{"to"} = $tmp169, (("T" eq $str->[($MATCH->{"to"}) + 0]) && ("H" eq $str->[($MATCH->{"to"}) + 1]) && ("E" eq $str->[($MATCH->{"to"}) + 2]) && ("N" eq $str->[($MATCH->{"to"}) + 3]) && ($MATCH->{"to"} += 4))) || ($MATCH->{"to"} = $tmp169, (("C" eq $str->[($MATCH->{"to"}) + 0]) && ("O" eq $str->[($MATCH->{"to"}) + 1]) && ("M" eq $str->[($MATCH->{"to"}) + 2]) && ("M" eq $str->[($MATCH->{"to"}) + 3]) && ("I" eq $str->[($MATCH->{"to"}) + 4]) && ("T" eq $str->[($MATCH->{"to"}) + 5]) && ($MATCH->{"to"} += 6))) || ($MATCH->{"to"} = $tmp169, (("F" eq $str->[($MATCH->{"to"}) + 0]) && ("A" eq $str->[($MATCH->{"to"}) + 1]) && ("I" eq $str->[($MATCH->{"to"}) + 2]) && ("L" eq $str->[($MATCH->{"to"}) + 3]) && ($MATCH->{"to"} += 4))) || ($MATCH->{"to"} = $tmp169, (("F" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp169, (("A" eq $str->[($MATCH->{"to"}) + 0]) && ("C" eq $str->[($MATCH->{"to"}) + 1]) && ("C" eq $str->[($MATCH->{"to"}) + 2]) && ("E" eq $str->[($MATCH->{"to"}) + 3]) && ("P" eq $str->[($MATCH->{"to"}) + 4]) && ("T" eq $str->[($MATCH->{"to"}) + 5]) && ($MATCH->{"to"} += 6)))
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::rule_term {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $tmp175 = $MATCH->{"to"};
            (((("^" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                $MATCH->{"capture"} = "beginning_of_line";
                1
            }))) || ($MATCH->{"to"} = $tmp175, ((("\$" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                $MATCH->{"capture"} = "end_of_line";
                1
            }))) || ($MATCH->{"to"} = $tmp175, ((("." eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                $MATCH->{"capture"} = "any";
                1
            }))) || ($MATCH->{"to"} = $tmp175, ((("(" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                my $tmp176 = $MATCH->{"to"};
                (((("?" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $tmp177 = $MATCH->{"to"};
                    ((((":" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = rule($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"rule"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = Perlito5::Match::flat($MATCH->{"rule"});
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((("=" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = rule($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"rule"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"positive_look_ahead" => Perlito5::Match::flat($MATCH->{"rule"}), };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((("!" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = rule($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"rule"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"negative_look_ahead" => Perlito5::Match::flat($MATCH->{"rule"}), };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, (((">" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = rule($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"rule"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"possessive_quantifier" => Perlito5::Match::flat($MATCH->{"rule"}), };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((("<" eq $str->[($MATCH->{"to"}) + 0]) && ("=" eq $str->[($MATCH->{"to"}) + 1]) && ($MATCH->{"to"} += 2)) && (do {
                        my $m2 = rule($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"rule"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"positive_look_behind" => Perlito5::Match::flat($MATCH->{"rule"}), };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((("<" eq $str->[($MATCH->{"to"}) + 0]) && ("!" eq $str->[($MATCH->{"to"}) + 1]) && ($MATCH->{"to"} += 2)) && (do {
                        my $m2 = rule($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"rule"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"negative_look_behind" => Perlito5::Match::flat($MATCH->{"rule"}), };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((do {
                        $MATCH->{"capture_id"} = ++$CAPTURE_ID;
                        1
                    }) && (("<" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = Perlito5::Grammar::ident($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"Perlito5::Grammar::ident"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && ((">" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = rule($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"rule"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"named_capture" => {"name" => Perlito5::Match::flat($MATCH->{"Perlito5::Grammar::ident"}), "term" => Perlito5::Match::flat($MATCH->{"rule"}), "id" => $MATCH->{"capture_id"}, }, };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((("{" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = Perlito5::Grammar::Regex5::string_of_code($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"string_of_code"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (("}" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        $MATCH->{"capture"} = {"code" => Perlito5::Match::flat($MATCH->{"string_of_code"}), };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((("?" eq $str->[($MATCH->{"to"}) + 0]) && ("{" eq $str->[($MATCH->{"to"}) + 1]) && ($MATCH->{"to"} += 2)) && (do {
                        my $m2 = Perlito5::Grammar::Regex5::string_of_code($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"string_of_code"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (("}" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        $MATCH->{"capture"} = {"postponed_code" => Perlito5::Match::flat($MATCH->{"string_of_code"}), };
                        1
                    }))) || ($MATCH->{"to"} = $tmp177, ((("#" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $last_match_null = 0;
                        my $m = $MATCH;
                        my $to = $MATCH->{"to"};
                        while (((do {
                            my $tmp = $MATCH;
                            $MATCH = {"from" => $tmp->{"to"}, "to" => $tmp->{"to"}, };
                            my $res = ((")" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1));
                            $MATCH = $tmp;
                            $res ? 0 : 1
                        }) && ('' ne $str->[$MATCH->{"to"}] && ++$MATCH->{"to"})) && ($last_match_null < 2)) {
                            if ($to == $MATCH->{"to"}) {;
                                $last_match_null = $last_match_null + 1
                            }
                            else {;
                                $last_match_null = 0
                            }
                            $m = $MATCH;
                            $to = $MATCH->{"to"}
                        }
                        $MATCH = $m;
                        $MATCH->{"to"} = $to;
                        1
                    }) && (do {
                        $MATCH->{"capture"} = "comment";
                        1
                    })))
                }))) || ($MATCH->{"to"} = $tmp176, ((("*" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $tmp178 = $MATCH->{"to"};
                    ((((":" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = Perlito5::Grammar::ident($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"Perlito5::Grammar::ident"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"verb" => {"tag" => "MARK", "name" => Perlito5::Match::flat($MATCH->{"Perlito5::Grammar::ident"}), }, };
                        1
                    }))) || ($MATCH->{"to"} = $tmp178, ((do {
                        my $m2 = Perlito5::Grammar::Regex5::verb($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"verb"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        my $tmp179 = $MATCH->{"to"};
                        ((((":" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                            my $m2 = Perlito5::Grammar::ident($str, $MATCH->{"to"});
                            if ($m2) {
                                $MATCH->{"to"} = $m2->{"to"};
                                $MATCH->{"Perlito5::Grammar::ident"} = $m2;
                                1
                            }
                            else {;
                                0
                            }
                        }) && (do {
                            $MATCH->{"capture"} = {"verb" => {"tag" => Perlito5::Match::flat($MATCH->{"verb"}), "name" => Perlito5::Match::flat($MATCH->{"Perlito5::Grammar::ident"}), }, };
                            1
                        }))) || ($MATCH->{"to"} = $tmp179, (do {
                            $MATCH->{"capture"} = {"verb" => {"tag" => Perlito5::Match::flat($MATCH->{"verb"}), }, };
                            1
                        }))
                    })))
                }))) || ($MATCH->{"to"} = $tmp176, ((do {
                    $MATCH->{"capture_id"} = ++$CAPTURE_ID;
                    1
                }) && (do {
                    my $m2 = rule($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"rule"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (do {
                    $MATCH->{"capture"} = {"capture" => {"term" => Perlito5::Match::flat($MATCH->{"rule"}), "id" => $MATCH->{"capture_id"}, }, };
                    1
                })))
            }) && (do {
                my $tmp180 = $MATCH->{"to"};
                (((")" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp180, (do {
                    die("Unmatched ( in regex");
                    1
                }))
            }))) || ($MATCH->{"to"} = $tmp175, ((("\\" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && ((do {
                my $m2 = Perlito5::Grammar::Regex5::any($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"any"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                $MATCH->{"capture"} = {"special_character" => Perlito5::Match::flat($MATCH->{"any"}), };
                1
            })))) || ($MATCH->{"to"} = $tmp175, ((("[" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                my $tmp181 = $MATCH->{"to"};
                (((("^" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $tmp182 = $MATCH->{"to"};
                    (((("]" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                        my $m2 = Perlito5::Grammar::Regex5::character_class_list($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"character_class_list"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"negated_character_class" => [{"character" => "]", }, @{Perlito5::Match::flat($MATCH->{"character_class_list"})}], };
                        1
                    }))) || ($MATCH->{"to"} = $tmp182, ((do {
                        my $m2 = Perlito5::Grammar::Regex5::character_class_list($str, $MATCH->{"to"});
                        if ($m2) {
                            $MATCH->{"to"} = $m2->{"to"};
                            $MATCH->{"character_class_list"} = $m2;
                            1
                        }
                        else {;
                            0
                        }
                    }) && (do {
                        $MATCH->{"capture"} = {"negated_character_class" => Perlito5::Match::flat($MATCH->{"character_class_list"}), };
                        1
                    })))
                }))) || ($MATCH->{"to"} = $tmp181, ((("]" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $m2 = Perlito5::Grammar::Regex5::character_class_list($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"character_class_list"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (do {
                    $MATCH->{"capture"} = {"character_class" => [{"character" => "]", }, @{Perlito5::Match::flat($MATCH->{"character_class_list"})}], };
                    1
                }))) || ($MATCH->{"to"} = $tmp181, ((do {
                    my $m2 = Perlito5::Grammar::Regex5::character_class_list($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"character_class_list"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (do {
                    $MATCH->{"capture"} = {"character_class" => Perlito5::Match::flat($MATCH->{"character_class_list"}), };
                    1
                }))) || ($MATCH->{"to"} = $tmp181, (do {
                    die("Unmatched [ in regex");
                    1
                }))
            }) && (do {
                my $tmp183 = $MATCH->{"to"};
                ((("]" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp183, (do {
                    die("Unmatched [ in regex");
                    1
                }))
            }))) || ($MATCH->{"to"} = $tmp175, ((do {
                my $tmp = $MATCH;
                $MATCH = {"from" => $tmp->{"to"}, "to" => $tmp->{"to"}, };
                my $res = (do {
                    my $tmp184 = $MATCH->{"to"};
                    (((")" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp184, (("+" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp184, (("?" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp184, (("\\" eq $str->[($MATCH->{"to"}) + 0]) && ("\\" eq $str->[($MATCH->{"to"}) + 1]) && ($MATCH->{"to"} += 2))) || ($MATCH->{"to"} = $tmp184, (("|" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp184, (("*" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)))
                });
                $MATCH = $tmp;
                $res ? 0 : 1
            }) && (do {
                my $m2 = Perlito5::Grammar::Regex5::any($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"any"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                $MATCH->{"capture"} = {"character" => Perlito5::Match::flat($MATCH->{"any"}), };
                1
            })))
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::quant_exp {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = (((do {
            my $tmp226 = $MATCH->{"to"};
            ((("?" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp226, (("*" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp226, (("+" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp226, ((("{" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                my $m2 = Perlito5::Grammar::Number::digits($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"Perlito5::Grammar::Number::digits"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                my $tmp227 = $MATCH->{"to"};
                ((("}" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp227, ((("," eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (("}" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)))) || ($MATCH->{"to"} = $tmp227, ((("," eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $m2 = Perlito5::Grammar::Number::digits($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"Perlito5::Grammar::Number::digits"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (("}" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))))
            })))
        }) && (do {
            my $tmp228 = $MATCH->{"to"};
            ((("?" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp228, (("+" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1))) || ($MATCH->{"to"} = $tmp228, 1)
        })));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::quantifier {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = (((do {
            my $m2 = Perlito5::Grammar::Regex5::rule_term($str, $MATCH->{"to"});
            if ($m2) {
                $MATCH->{"to"} = $m2->{"to"};
                $MATCH->{"rule_term"} = $m2;
                1
            }
            else {;
                0
            }
        }) && (do {
            my $tmp238 = $MATCH->{"to"};
            (((do {
                my $m2 = Perlito5::Grammar::Regex5::quant_exp($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"quant_exp"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                $MATCH->{"capture"} = {"quantifier" => {"term" => Perlito5::Match::flat($MATCH->{"rule_term"}), "quant" => Perlito5::Match::flat($MATCH->{"quant_exp"}), }, };
                1
            }))) || ($MATCH->{"to"} = $tmp238, (do {
                $MATCH->{"capture"} = Perlito5::Match::flat($MATCH->{"rule_term"});
                1
            }))
        })));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::concat_list {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $tmp246 = $MATCH->{"to"};
            (((do {
                my $m2 = Perlito5::Grammar::Regex5::quantifier($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"quantifier"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                my $tmp247 = $MATCH->{"to"};
                (((do {
                    my $m2 = concat_list($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"concat_list"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (do {
                    $MATCH->{"capture"} = [Perlito5::Match::flat($MATCH->{"quantifier"}), @{Perlito5::Match::flat($MATCH->{"concat_list"})}];
                    1
                }))) || ($MATCH->{"to"} = $tmp247, (do {
                    $MATCH->{"capture"} = [Perlito5::Match::flat($MATCH->{"quantifier"})];
                    1
                }))
            }))) || ($MATCH->{"to"} = $tmp246, (do {
                $MATCH->{"capture"} = [];
                1
            }))
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::concat_exp {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = (((do {
            my $m2 = Perlito5::Grammar::Regex5::concat_list($str, $MATCH->{"to"});
            if ($m2) {
                $MATCH->{"to"} = $m2->{"to"};
                $MATCH->{"concat_list"} = $m2;
                1
            }
            else {;
                0
            }
        }) && (do {
            my $arg = Perlito5::Match::flat($MATCH->{"concat_list"});
            if (@{$arg} < 1) {;
                $MATCH->{"capture"} = "empty"
            }
            elsif (@{$arg} < 2) {;
                ($MATCH->{"capture"}) = @{$arg}
            }
            else {;
                $MATCH->{"capture"} = {"concat_list" => $arg, }
            }
            1
        })));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::or_list_exp {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = ((do {
            my $tmp262 = $MATCH->{"to"};
            (((do {
                my $m2 = Perlito5::Grammar::Regex5::concat_exp($str, $MATCH->{"to"});
                if ($m2) {
                    $MATCH->{"to"} = $m2->{"to"};
                    $MATCH->{"concat_exp"} = $m2;
                    1
                }
                else {;
                    0
                }
            }) && (do {
                my $tmp263 = $MATCH->{"to"};
                (((("|" eq $str->[($MATCH->{"to"}) + 0]) && ($MATCH->{"to"} += 1)) && (do {
                    my $m2 = or_list_exp($str, $MATCH->{"to"});
                    if ($m2) {
                        $MATCH->{"to"} = $m2->{"to"};
                        $MATCH->{"or_list_exp"} = $m2;
                        1
                    }
                    else {;
                        0
                    }
                }) && (do {
                    $MATCH->{"capture"} = [Perlito5::Match::flat($MATCH->{"concat_exp"}), @{Perlito5::Match::flat($MATCH->{"or_list_exp"})}];
                    1
                }))) || ($MATCH->{"to"} = $tmp263, (do {
                    $MATCH->{"capture"} = [Perlito5::Match::flat($MATCH->{"concat_exp"})];
                    1
                }))
            }))) || ($MATCH->{"to"} = $tmp262, (do {
                $MATCH->{"capture"} = [];
                1
            }))
        }));
        $tmp ? $MATCH : undef
    }
    sub Perlito5::Grammar::Regex5::rule {
        my $str = $_[0];
        my $pos = $_[1];
        my $MATCH = {"str" => $str, "from" => $pos, "to" => $pos, };
        my $tmp = (((do {
            my $m2 = Perlito5::Grammar::Regex5::or_list_exp($str, $MATCH->{"to"});
            if ($m2) {
                $MATCH->{"to"} = $m2->{"to"};
                $MATCH->{"or_list_exp"} = $m2;
                1
            }
            else {;
                0
            }
        }) && (do {
            my $arg = Perlito5::Match::flat($MATCH->{"or_list_exp"});
            if (@{$arg} < 1) {;
                $MATCH->{"capture"} = "empty"
            }
            elsif (@{$arg} < 2) {;
                ($MATCH->{"capture"}) = @{$arg}
            }
            else {;
                $MATCH->{"capture"} = {"or_list" => $arg, }
            }
            1
        })));
        $tmp ? $MATCH : undef
    }
}
;1
