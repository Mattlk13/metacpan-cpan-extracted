TYPEMAP
POSIX::RT::Timer	T_INTOBJ
POSIX::RT::Clock	T_INTOBJ
clockid_t	T_PACKED
timer_init	T_SLURP_VAR
sigset_t*	T_SIGSET
signo_t	T_SIGNO
siginfo_t	T_SIGINFO
struct timespec	T_TIMESPEC

INPUT
T_SIGSET
	if (SvROK($arg)) {
		if (!sv_derived_from($arg, \"POSIX::SigSet\")) {
			Perl_croak(aTHX_ \"$var is not of type POSIX::SigSet\");
		} else {
	%:if PERL_VERSION > 15 || PERL_VERSION == 15 && PERL_SUBVERSION > 2
			$var = (sigset_t *) SvPV_nolen(SvRV($arg));
	%:else
			IV tmp = SvIV((SV*)SvRV($arg));
			$var = INT2PTR(sigset_t*, tmp);
	%:endif
		}
	} else if (SvOK($arg)) {
		int signo = (SvIOK($arg) || looks_like_number($arg)) && SvIV($arg) ? SvIV($arg) : whichsig(SvPV_nolen($arg));
		SV* buffer = sv_2mortal(newSVpvn(\"\", 0));
		sv_grow(buffer, sizeof(sigset_t));
		$var = (sigset_t*)SvPV_nolen(buffer);
		sigemptyset($var);
		sigaddset($var, signo);
	} else {
		$var = NULL;
	}
T_SIGNO
	$var = (SvIOK($arg) || looks_like_number($arg)) && SvIV($arg) ? SvIV($arg) : whichsig(SvPV_nolen($arg));
T_TIMESPEC
	{
	NV input = SvNV($arg);
	$var.tv_sec  = (time_t) floor(input);
	$var.tv_nsec = (long) ((input - $var.tv_sec) * 1000000000);
	}
T_INTOBJ
    {
		SV * sv = $arg;
		if (SvROK(sv) && sv_derived_from(sv, \"$ntype\"))
			$var = ($type)SvUV(SvRV(sv));
		else
			croak(\"%s: %s is not of type %s\", ${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]}, \"$var\", \"$ntype\");
    }

T_INTREF
    {
		SV * sv = $arg;
		if (SvROK(sv) && SvIOK(SvRV(sv)))
			$var = ($type)SvUV(SvRV(sv));
		else 
			croak(\"%s: %s is not a reference\", ${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]}, \"$var\");
    }

T_SLURP_VAL
	$var = ${ntype}_gather(&ST($argoff), items - $argoff)
T_SLURP_VAR
	${ntype}_gather(&$var, &ST($argoff), items - $argoff)
T_SLURP_AV
	$var = av_make(items - $argoff, &ST($argoff))

OUTPUT
T_TIMESPEC
	sv_setnv($arg, $var.tv_sec + $var.tv_nsec / 1000000000.0);
T_SIGINFO
	{
	HV* ret = newHV();
	hv_stores(ret, \"signo\", newSViv($var.si_signo));
	hv_stores(ret, \"code\", newSViv($var.si_code));
	hv_stores(ret, \"errno\", newSViv($var.si_errno));
	hv_stores(ret, \"pid\", newSViv($var.si_pid));
	hv_stores(ret, \"uid\", newSViv($var.si_uid));
	hv_stores(ret, \"status\", newSViv($var.si_status));
	hv_stores(ret, \"band\", newSViv($var.si_band));
	%:ifdef si_fd
	hv_stores(ret, \"fd\", newSViv($var.si_fd));
	%:endif
	hv_stores(ret, \"value\", newSViv($var.si_value.sival_int));
	hv_stores(ret, \"ptr\", newSVuv(PTR2UV($var.si_value.sival_ptr)));
	hv_stores(ret, \"addr\", newSVuv(PTR2UV($var.si_addr)));
	$arg = newRV_noinc((SV*)ret);
	}
T_INTOBJ
	{
		sv_setref_uv($arg, \"$ntype\", (UV)$var);
		SvREADONLY_on(SvRV($arg));
	}

T_INTREF
	{
		sv_setref_uv($arg, NULL, (UV)$var);
		SvREADONLY_on(SvRV($arg));
	}

