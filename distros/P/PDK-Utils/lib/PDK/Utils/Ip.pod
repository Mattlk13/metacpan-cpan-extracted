=pod

=encoding UTF-8

=head1 NAME

PDK::Utils::Ip - Utility class for IP address and mask handling

=head1 VERSION

Version 1.0

=head1 SYNOPSIS

    use PDK::Utils::Ip;

    my $ip_utils = PDK::Utils::Ip->new();

    # Get integer range from IP range
    my ($min, $max) = $ip_utils->getRangeFromIpRange('192.168.1.1', '192.168.1.10');

    # Get range from IP and mask
    my $set = $ip_utils->getRangeFromIpMask('192.168.1.1', 24);

    # Get network IP
    my $net_ip = $ip_utils->getNetIpFromIpMask('192.168.1.1', 24);

=head1 METHODS

=head2 getRangeFromIpRange($ipMin, $ipMax)

Get integer range from an IP range.

Parameters:

=over 4

=item * C<$ipMin> - Minimum IP address

=item * C<$ipMax> - Maximum IP address

=back

Returns:

Scalar context: C<PDK::Utils::Set> object

List context: (minimum, maximum)

=head2 getRangeFromIpMask($ip, $mask)

Get range from IP and mask.

Parameters:

=over 4

=item * C<$ip> - IP address or IP range

=item * C<$mask> - Mask (optional, default is 32)

=back

Returns:

Scalar context: C<PDK::Utils::Set> object

List context: (minimum, maximum)

=head2 getNetIpFromIpMask($ip, $mask)

Get network IP from IP and mask.

Parameters:

=over 4

=item * C<$ip> - IP address

=item * C<$mask> - Mask (optional, default is 32)

=back

Returns:

Network IP address

=head2 changeIntToIp($num)

Convert an integer to an IP address.

Parameters:

=over 4

=item * C<$num> - Integer form of IP

=back

Returns:

Dotted-decimal form of IP address

=head2 changeIpToInt($ip)

Convert an IP address to an integer.

Parameters:

=over 4

=item * C<$ip> - Dotted-decimal form of IP address

=back

Returns:

Integer form of IP

Exception:

Throws an exception if the IP format is invalid.

=head2 changeMaskToNumForm($mask)

Convert a mask to numeric form.

Parameters:

=over 4

=item * C<$mask> - Mask (can be in dotted-decimal or numeric form)

=back

Returns:

Numeric form of mask (0-32)

Exception:

Throws an exception if the mask format is invalid or out of range.

=head2 changeWildcardToMaskForm($wildcard)

Convert a wildcard mask to standard mask form.

Parameters:

=over 4

=item * C<$wildcard> - Wildcard mask

=back

Returns:

Mask form, or C<undef> if conversion fails.

=head2 changeMaskToIpForm($mask)

Convert a numeric mask to IP form.

Parameters:

=over 4

=item * C<$mask> - Mask (numeric or IP form)

=back

Returns:

IP form of the mask

Exception:

Throws an exception if the mask format is invalid or out of range.

=head2 getIpMaskFromRange($min, $max)

Get IP/mask representation from IP range.

Parameters:

=over 4

=item * C<$min> - Minimum IP (integer form)

=item * C<$max> - Maximum IP (integer form)

=back

Returns:

IP/mask representation or IP range

Exception:

Throws an exception if C<$max> is undefined.

=head2 getRangeFromService($service)

Get range from service description.

Parameters:

=over 4

=item * C<$service> - Service description (format: protocol/port)

=back

Returns:

Scalar context: C<PDK::Utils::Set> object

List context: (minimum, maximum)

=head1 AUTHOR

WENWU YAN <968828@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2024 WENWU YAN. All rights reserved.

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
