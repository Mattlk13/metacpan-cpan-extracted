NAME
    Getopt::Long::Util - Utilities for Getopt::Long

VERSION
    This document describes version 0.897 of Getopt::Long::Util (from Perl
    distribution Getopt-Long-Util), released on 2022-10-09.

FUNCTIONS
  array_getopt_long_spec_to_hash
    Usage:

     array_getopt_long_spec_to_hash($spec) -> hash

    Convert array form of Getopt::Long spec to hash.

    Getopt::Long's "GetOptions" function accepts a list of arguments. The
    first optional argument is a hash for option storage. After that, a list
    of option specs (e.g. "foo=s"), each optionally followed by a reference
    to specify destination (e.g. a reference to scalar, or array, or code).

    Die on failure (e.g. invalid option spec).

    This routine converts that array into a hash of option specs as keys and
    destinations as values. If an option spec does not have a destination,
    its destination is set to "undef". If hash storage is specified then the
    destination will fall back to the hash storage's appropriate key when a
    specific destination is not specified.

    Note that by converting to hash, 1) duplicate option specs are merged;
    and 2) order of option specs is not preserved.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   $spec* => *array*

        Getopt::Long spec.

    Return value: (hash)

  detect_getopt_long_script
    Usage:

     detect_getopt_long_script(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Detect whether a file is a Getopt::Long-based CLI script.

    The criteria are:

    *   the file must exist and readable;

    *   (optional, if "include_noexec" is false) file must have its
        executable mode bit set;

    *   content must start with a shebang "#!";

    *   either: must be perl script (shebang line contains 'perl') and must
        contain something like "use Getopt::Long";

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   filename => *str*

        Path to file to be checked.

    *   include_noexec => *bool* (default: 1)

        Include scripts that do not have +x mode bit set.

    *   string => *buf*

        String to be checked.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  gen_getopt_long_spec_from_getopt_std_spec
    Usage:

     gen_getopt_long_spec_from_getopt_std_spec(%args) -> hash

    Generate Getopt::Long spec from Getopt::Std spec.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   is_getopt => *bool*

        Whether to assume spec is for getopt() or getopts().

        By default spec is assumed to be for getopts() instead of getopt().
        This means that for a spec like "abc:", "a" and "b" don't take
        argument while "c" does. But if "is_getopt" is true, the meaning of
        ":" is reversed: "a" and "b" take arguments while "c" doesn't.

    *   spec* => *str*

        Getopt::Std spec string.

    Return value: (hash)

  humanize_getopt_long_opt_spec
    Usage:

     humanize_getopt_long_opt_spec( [ \%optional_named_args ] , $optspec) -> str|hash

    Convert Getopt::Long option specification into a more human-friendly
    notation that is suitable for including in help/usage text, for example:

     help|h|?       ->  "--help, -h, -?"
     help|h|?       ->  "--help | -h | -?"               # if you provide 'separator'
     --foo=s        ->  "--foo=s"
     --foo=s        ->  "--foo=somelabel"                # if you provide 'value_label'
     --foo:s        ->  "--foo[=s]"
     --foo=s@       ->  "(--foo=s)+"
     --foo=s%       ->  "(--foo key=value)+"
     --foo=s%       ->  "(--foo somelabel1=somelabel2)+" # if you provide 'key_label' and 'value_label'
     --debug!       ->  "--(no)debug"

    It also produces POD-formatted string for use in POD documentation:

     --foo=s        ->  {plaintext=>"--foo=s", pod=>"B<--foo>=I<s>"}
                                                         # if you set 'extended' to true

    Will die if can't parse the optspec string.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   extended => *bool*

        If set to true, will return a hash of multiple formats instead of a
        single plaintext format.

    *   key_label => *str* (default: "key")

    *   $optspec* => *str*

    *   separator => *str* (default: ", ")

    *   value_label => *str*

    *   value_label_link => *str*

    Return value: (str|hash)

  parse_getopt_long_opt_spec
    Usage:

     parse_getopt_long_opt_spec($optspec) -> hash

    Parse a single Getopt::Long option specification.

    Examples:

    *   Example #1:

         parse_getopt_long_opt_spec("help|h|?"); # -> { dash_prefix => "", opts => ["help", "h", "?"] }

    *   Example #2:

         parse_getopt_long_opt_spec("--foo=s"); # -> { dash_prefix => "--", desttype => "", opts => ["foo"], type => "s" }

    Will produce a hash with some keys:

    *   "is_arg" (if true, then option specification is the special "<>" for
        argument callback)

    *   "opts" (array of option names, in the order specified in the opt
        spec)

    *   "type" (string, type name)

    *   "desttype" (either '', or '@' or '%'),

    *   "is_neg" (true for "--opt!")

    *   "is_inc" (true for "--opt+")

    *   "min_vals" (int, usually 0 or 1)

    *   "max_vals" (int, usually 0 or 1 except for option that requires
        multiple values)

    Will return undef if it can't parse the string.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   $optspec* => *str*

    Return value: (hash)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/Getopt-Long-Util>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-Getopt-Long-Util>.

SEE ALSO
    Getopt::Long

    Getopt::Long::Spec, which can also parse Getopt::Long spec into hash as
    well as transform back the hash to Getopt::Long spec. OO interface. I
    should've found this module first before writing my own
    "parse_getopt_long_opt_spec()". But at least currently
    "parse_getopt_long_opt_spec()" is at least about 30-100+% faster than
    Getopt::Long::Spec::Parser, has a much simpler implementation (a single
    regex match), and can handle valid Getopt::Long specs that
    Getopt::Long::Spec::Parser fails to parse, e.g. "foo|f=s@".

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTOR
    Steven Haryanto <stevenharyanto@gmail.com>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022, 2021, 2020, 2016, 2015, 2014 by
    perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=Getopt-Long-Util>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

