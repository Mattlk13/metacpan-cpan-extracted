#!perl

use strict;
use warnings;
use Log::ger;

use Complete::Util qw(complete_array_elem combine_answers);
use Getopt::Long::Complete qw(GetOptionsWithCompletion);

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2023-02-21'; # DATE
our $DIST = 'Getopt-Long-Complete'; # DIST
our $VERSION = '0.317'; # VERSION

my %opts;
my $res = GetOptionsWithCompletion(
    sub {
        my %args = @_;
        #use DD; dd \%args;
        my $word = $args{word};
        my $type = $args{type};

        if ($type eq 'arg') {
            my $argpos = $args{argpos};
            return complete_array_elem(
                array=>["arg$argpos-a", "arg$argpos-b"], word=>$word);
        } elsif ($type eq 'optval') {
            my $opts = ref $args{opt} eq 'ARRAY' ? $args{opt} : [$args{opt}];
            #log_trace "opts=%s", $opts;
            my @comps;
            if (grep { $_ eq '--int-comp-array' } @$opts) {
                push @comps, complete_array_elem(array=>[1..10], word=>$word);
            }
            if (grep { $_ eq '--str-comp-sub' } @$opts) {
                push @comps, complete_array_elem(array=>[map {"$word$_"} "a".."z"],
                                                 word=>$word);
            }
            if (grep { /\A(--planet|-P|--opt-planet|-p)\z/ } @$opts) {
                push @comps, {
                    words => complete_array_elem(
                        array=>[
                            "mercury",
                            "venus",
                            "mars",
                        ],
                        word=>$word,
                    ),
                    path_sep => '::',
                };
            }
            if (grep { /\A(--fruit)\z/ } @$opts) {
                push @comps, {
                    words => complete_array_elem(
                        array=>[
                            "banana",
                            "apple",
                            "apricot",
                            "durian",
                        ],
                        word=>$word,
                    ),
                    path_sep => '::',
                };
            }
            return combine_answers(@comps);
        }

        undef;
    },
    \%opts,
    'flag1|1',
    'flag2|f',
    'bool|b!',
    'int=i',
    'float|F=f',
    'str|text|S=s',
    'array=s@',
    'int-comp-array=i',
    'str-comp-sub=s',

    # to demonstrate completing optval
    'planet|P=s',
    'opt-planet|p:s',
    'fruit=s',

    'version|v' => sub{
        no warnings;
        print "demo-getopt-long-complete version $main::VERSION\n";
        exit 0;
    },
    'help|h|?' => sub {
        print <<_;
Usage:
  $0 --help (or -h, -?)
  $0 [opts]

Options:
  --array=s@
  --(no)bool, -b
  --flag1, -1
  --flag2, -f
  --float=f, -F
  --fruit=s
  --int-comp-array=i
  --int=i
  --opt-planet:s, -p
  --planet=s, -P
  --str-comp-sub=s
  --str=s, --text, -S
_
        exit 0;
    },
);

print $res ? "Getopt succeeded\n" : "Getopt failed\n";
print "Result:\n";
for (sort keys %opts) {
    print "  $_: $opts{$_}\n";
}

# ABSTRACT: Script to demonstrate Getopt::Long::Complete
# PODNAME: demo-getopt-long-complete

__END__

=pod

=encoding UTF-8

=head1 NAME

demo-getopt-long-complete - Script to demonstrate Getopt::Long::Complete

=head1 VERSION

This document describes version 0.317 of demo-getopt-long-complete (from Perl distribution Getopt-Long-Complete), released on 2023-02-21.

=head1 SYNOPSIS

Activate completion using (can be put in your bash startup file):

 % complete -C demo-getopt-long-complete demo-getopt-long-complete

Test completion:

 % demo-getopt-long-complete <tab>
 % demo-getopt-long-complete -<tab>
 % demo-getopt-long-complete --int 1 -<tab>
 # and so on

=head2

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C demo-getopt-long-complete demo-getopt-long-complete

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete demo-getopt-long-complete 'p/*/`demo-getopt-long-complete`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/Getopt-Long-Complete>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-Getopt-Long-Complete>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2023, 2020, 2017, 2016, 2015, 2014 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=Getopt-Long-Complete>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
