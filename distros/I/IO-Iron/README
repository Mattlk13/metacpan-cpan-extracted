NAME

    IO::Iron - Client Libraries to Iron services IronCache, IronMQ and
    IronWorker.

VERSION

    version 0.13

SYNOPSIS

        use IO::Iron;
        use IO::Iron qw{ironcache ironmq ironworker};
        use IO::Iron ':all';
    
        my $iron_mq_client = ironmq();
        my @iron_mq_queues = $iron_mq_client->get_queues();
    
        my $iron_cache_client = ironcache( config => 'iron_cache.json' );
        my @iron_caches = $iron_cache_client->get_caches();
    
        my $iron_worker_client = ironworker( config => 'iron_worker.json' );
        my @iron_codes = $iron_worker_client->list_code_packages();

DESCRIPTION

    IronCache, IronMQ and IronWorker are cloud based services accessible
    via a REST API. CPAN Distribution IO::Iron contains Perl clients for
    accessing them.

    [See http://www.iron.io/]

    Please see the individual clients for further documentation and usage.

    Clients:

    IO::Iron::IronCache::Client

    IO::Iron::IronMQ::Client

    IO::Iron::IronWorker::Client

    IO-Iron code is available at Github: IO-Iron
    <https://github.com/mikkoi/io-iron> for download with Git:
    https://github.com/mikkoi/io-iron.git.

 IO::Iron

    Package IO::Iron is only a "convenience" module for quick startup. The
    three functions provided are ironcache, ironmq and ironworker.

    The following parameters can be given to each of them as hash item type
    parameters. See section SYNOPSIS for an example.

    project_id, The ID of the project to use for requests.

    token, The OAuth token that is used to authenticate requests.

    host, The domain name the API can be located at. E.g.
    'mq-aws-us-east-1.iron.io/1'.

    protocol, The protocol that will be used to communicate with the API.
    Defaults to "https".

    port, The port to connect to the API through. Defaults to 443.

    api_version, The version of the API to connect through. Defaults to the
    version supported by the client.

    timeout, REST client timeout (for REST calls accessing IronMQ.)

    config, Config filename with path if required.

    You can also give the parameters in the config file .iron.json or
    iron.json (in local directory) or as environmental variables. Please
    read Configuring the Official Client Libraries
    <http://dev.iron.io/mq/reference/configuration/> for further details.

  Client Documentation

    Please read individual client's documentation for using them.

  Exceptions

    A REST call to Iron service may fail for several reason. All failures
    generate an exception using the Exception::Class package. Class
    IronHTTPCallException contains the field status_code, response_message
    and error. Error is formatted as such: IronHTTPCallException:
    status_code=<HTTP status code> response_message=<response_message>.

        use Try::Tiny;
        use Scalar::Util qw{blessed};
        try {
            my $asked_iron_cache_01 = $iron_cache_client->get_cache('name' => 'unique_cache_name_01');
        }
        catch {
            die $_ unless blessed $_ && $_->can('rethrow');
            if ( $_->isa('IronHTTPCallException') ) {
                if ($_->status_code == 404) {
                    print "Bad things! Can not just find the catch in this!\n";
                }
            }
            else {
                $_->rethrow; # Push the error upwards.
            }
        };

    When using policies (see next chapter) also exceptions
    NoIronPolicyException and CharacterGroupNotDefinedIronPolicyException
    can be met.

  Policies

    Policies is a way to limit the names of message queues, code packages,
    caches and items (item keys) to a predefined group of possible strings.
    This can limit the chances for typos and enforce an enterprise policy.
    The policies are loaded from a JSON file which is specified either when
    creating a IO::Iron::Iron*::Client object, or in the config file
    .iron.json (or equivalent).

   Policies in Config file

    Add the item policies to the config file. The value of the item is the
    filename of the policies file.

    Example config file:

        {
            "project_id":"51bdf5fb2267d84ced002c99",
            "token":"-Q9OEHZPhdZtd0KHBzzdUJIqV_E",
            "host":"cache-aws-us-east-1.iron.io",
            "policies":"iron_policies.json"
        }

   Policies file specified when creating the client

        my $policies_filename = '/etc/ironmq/global_policies.json';
        my $client = IO::Iron::IronCache::Client->new('policies' => $policies_filename);

   Examples of Policies File and Explanation of Configuration

    The 'default' policies JSON file:

        {
        "definition":{
            "character_group":{
            },
            "no_limitation":1, # There is an unlimited number of alternatives.
        },
        "queue":{ "name":[ "[:alnum:]{1,}" ], },
        "cache":{
            "name":[ "[:alnum:]{1,}" ],
            "item_key":[ "[:alnum:]{1,}" ]
            },
        "worker":{ "name":[ "[:alnum:]{1,}" ], }
        }

    The above file would set an open policy for IronMQ, IronCache and
    IronWorker alike. The file is divided into four parts: definition for
    defining meta options, and queue|cache|worker parts for defining the
    changing strings (queue|cache|worker names and item keys). The
    character group alnum covers all ascii alphabetic characters (both
    lower and upper case) and digits (0-9).

    N.B. The option definition:no_limitation controls the open/closed
    policy. If definition:no_limitation is set (1=set), the policy control
    is turned off.

    An example of policies file

        {
            "__comment1":"Use normal regexp. [:digit:] = number:0-9, [:alpha:] = alphabetic character, [:alnum:] = character or number.",
            "__comment2":"Do not use end/begin limitators '^' and '\$'. They are added automatically.",
            "__comment3":"Note that character groups are closed inside '[::]', not '[[:]]' as normal POSIX groups.",
            "definition":{
                "character_group":{
                    "[:lim_uchar:]":"ABC",
                    "[:low_digit:]":"0123"
                },
            },
            "cache":{
                "name":[
                    "cache_01_main",
                    "cache_[:alpha:]{1}[:digit:]{2}"
                ],
                "item_key":[
                    "item.01_[:digit:]{2}",
                    "item.02_[:lim_uchar:]{1,2}"
                ]
            }
        }

    This policies file sets policies for cache names and item keys. Both
    have two templates. Template "cache_01_main" is without wildcards: the
    template list can also only contain predefined names or keys. Sometimes
    this could be exactly the wanted behaviour, especially in regard to
    cache and message queue names.

    Items beginning with '__' are considered comments. Comments can not be
    inserted into lists, such as character_group.

    The definition part contains the list character_group for user-defined
    groups. The following groups are predefined:

    [:alpha:], ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz

    [:alnum:],
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789

    [:digit:], 0123456789

    [:lower:], abcdefghijklmnopqrstuvwxyz

    [:upper:], ABCDEFGHIJKLMNOPQRSTUVWXYZ

    [:word:],
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_

    All lower ASCII (7-bit) characters are allowed in names and in
    character groups, except for the reserved characters (RFC 3986)
    !$&'()*+,;=:/?#[]@.

    A character group definition is closed inside characters '[::]', not
    '[[:]]' as normal POSIX groups. Only the equivalents of the POSIX
    groups mentioned above can be used; e.g. POSIX group [[:graph:]] is not
    available.

    When using the character groups in a name or key, only two markings are
    allowed: [:group:]{n} and [:group:]{n,n}, where n is an integer. This
    limitation (not being able to use any regular expression) is due to the
    double functionality of the policy: a) it acts as a filter when
    creating and naming new message queues, code packages, caches and cache
    items; 2) it can be used to list all possible names, for example when
    querying for cache items.

STATUS

    Iron.io libraries are currently being developed so changes in the API
    are possible.

REQUIREMENTS

    IO::Iron requires an IronIO account. Three configuration items must be
    set (others available) before using the functions: project_id, token
    and host. These can be set in a json file, as environmental variables
    or as parameters when creating the object.

    project_id, the identification string, from IronIO.

    token, an OAuth authentication token string, from IronIO.

    host, the cloud in which you want to operate, e.g.
    'cache-aws-us-east-1' for AWS (Amazon) or 'mq-rackspace-ord.iron.io' or
    'mq-rackspace-lon.iron.io' for Rackspace.

      Please see IronMQ HTTP API Reference (hosts)
      <http://dev.iron.io/mq/3/host/> for available hosts.

TESTING

    Subdirectory integ_t contains "integration" tests which require an
    active Iron.io account and Internet connection. To run the tests,
    create first three config files in the main directory: iron_cache.json,
    iron_mq.json, iron_worker.json. Set at least the following attributes:
    project_id, token and host.

    Execute prove (prove
    <https://metacpan.org/pod/distribution/TAP-Parser/bin/prove>), e.g.
    prove -lv -Iinteg_t integ_t\Iron\iron_all.t.

FUNCTIONS

 ironcache

    Create an IronCache client object and return it to user.

 ironmq

    Create an IronMQ client object and return it to user.

 ironworker

    Create an IronWorker client object and return it to user.

AUTHOR

    Mikko Koivunalho <mikko.koivunalho@iki.fi>

BUGS

    Please report any bugs or feature requests to bug-io-iron@rt.cpan.org
    or through the web interface at:
    http://rt.cpan.org/Public/Dist/Display.html?Name=IO-Iron

COPYRIGHT AND LICENSE

    This software is copyright (c) 2017 by Mikko Koivunalho.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

    The full text of the license can be found in the LICENSE file included
    with this distribution.

