# This file was automatically generated by Dist::Zilla::Plugin::MakeMaker v6.030.
use strict;
use warnings;

# inserted by Dist::Zilla::Plugin::CheckBin 0.008
use Devel::CheckBin;
check_bin('ds9');

use 5.010000;

use ExtUtils::MakeMaker;

my %WriteMakefileArgs = (
  "ABSTRACT" => "interface to the DS9 image display and analysis program",
  "AUTHOR" => "Diab Jerius <djerius\@cpan.org>",
  "CONFIGURE_REQUIRES" => {
    "Config" => 0,
    "Devel::CheckBin" => 0,
    "ExtUtils::MakeMaker" => 0,
    "File::Spec" => 0
  },
  "DISTNAME" => "Image-DS9",
  "LICENSE" => "gpl",
  "MIN_PERL_VERSION" => "5.010000",
  "NAME" => "Image::DS9",
  "PREREQ_PM" => {
    "CXC::Exporter::Util" => 0,
    "Carp" => 0,
    "Data::Dump" => 0,
    "Data::Visitor::Tiny" => 0,
    "Exporter" => 0,
    "Exporter::Shiny" => 0,
    "Exporter::Tiny" => 0,
    "IPC::XPA" => 0,
    "List::Util" => 0,
    "Log::Any" => 0,
    "Module::Runtime" => 0,
    "Proc::Background" => 0,
    "Proc::Daemon" => 0,
    "Ref::Util" => 0,
    "Safe::Isa" => 0,
    "Scalar::Util" => 0,
    "SemVer" => 0,
    "Time::HiRes" => 0,
    "Type::Tiny" => 0,
    "Types::TypeTiny" => 0,
    "base" => 0,
    "constant" => 0,
    "enum" => 0,
    "namespace::clean" => 0,
    "overload" => 0,
    "parent" => 0,
    "strict" => 0,
    "warnings" => 0
  },
  "TEST_REQUIRES" => {
    "Astro::FITS::Header" => 0,
    "Cwd" => 0,
    "DDP" => 0,
    "ExtUtils::MakeMaker" => 0,
    "File::Spec" => 0,
    "File::Spec::Functions" => 0,
    "File::pushd" => 0,
    "Getopt::Long" => 0,
    "IO::Handle" => 0,
    "IPC::Open3" => 0,
    "Log::Any::Adapter" => 0,
    "PDL" => 0,
    "Path::Tiny" => 0,
    "Regexp::Common" => 0,
    "Test2::Tools::Command" => 0,
    "Test2::V0" => 0,
    "Test::Lib" => 0,
    "Test::More" => 0,
    "Test::TempDir::Tiny" => 0,
    "version" => 0
  },
  "VERSION" => "v1.0.0",
  "test" => {
    "TESTS" => "t/*.t"
  }
);


my %FallbackPrereqs = (
  "Astro::FITS::Header" => 0,
  "CXC::Exporter::Util" => 0,
  "Carp" => 0,
  "Cwd" => 0,
  "DDP" => 0,
  "Data::Dump" => 0,
  "Data::Visitor::Tiny" => 0,
  "Exporter" => 0,
  "Exporter::Shiny" => 0,
  "Exporter::Tiny" => 0,
  "ExtUtils::MakeMaker" => 0,
  "File::Spec" => 0,
  "File::Spec::Functions" => 0,
  "File::pushd" => 0,
  "Getopt::Long" => 0,
  "IO::Handle" => 0,
  "IPC::Open3" => 0,
  "IPC::XPA" => 0,
  "List::Util" => 0,
  "Log::Any" => 0,
  "Log::Any::Adapter" => 0,
  "Module::Runtime" => 0,
  "PDL" => 0,
  "Path::Tiny" => 0,
  "Proc::Background" => 0,
  "Proc::Daemon" => 0,
  "Ref::Util" => 0,
  "Regexp::Common" => 0,
  "Safe::Isa" => 0,
  "Scalar::Util" => 0,
  "SemVer" => 0,
  "Test2::Tools::Command" => 0,
  "Test2::V0" => 0,
  "Test::Lib" => 0,
  "Test::More" => 0,
  "Test::TempDir::Tiny" => 0,
  "Time::HiRes" => 0,
  "Type::Tiny" => 0,
  "Types::TypeTiny" => 0,
  "base" => 0,
  "constant" => 0,
  "enum" => 0,
  "namespace::clean" => 0,
  "overload" => 0,
  "parent" => 0,
  "strict" => 0,
  "version" => 0,
  "warnings" => 0
);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.040
if (! can_run( 'ds9' )) {
print "Missing external dependency: ds9 executable\n";
print STDERR "NA: Unable to build distribution on this platform.\n";
exit(0);
}



unless ( eval { ExtUtils::MakeMaker->VERSION(6.63_03) } ) {
  delete $WriteMakefileArgs{TEST_REQUIRES};
  delete $WriteMakefileArgs{BUILD_REQUIRES};
  $WriteMakefileArgs{PREREQ_PM} = \%FallbackPrereqs;
}

delete $WriteMakefileArgs{CONFIGURE_REQUIRES}
  unless eval { ExtUtils::MakeMaker->VERSION(6.52) };

WriteMakefile(%WriteMakefileArgs);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.040
sub can_run {
  my ($cmd) = @_;

  return $cmd if -x $cmd;
  if (my $found_cmd = MM->maybe_command($cmd)) {
    return $found_cmd;
  }

  for my $dir ((split /$Config::Config{path_sep}/, $ENV{PATH}), '.') {
    next if $dir eq '';
    require File::Spec;
    my $abs = File::Spec->catfile($dir, $cmd);
    return $abs if (-x $abs or $abs = MM->maybe_command($abs));
  }

  return;
}

# Fix Cygwin bug on maybe_command(), fixed in EUMM 6.69_04
BEGIN { if ( $^O eq 'cygwin' ) {
  require ExtUtils::MM_Cygwin;
  require ExtUtils::MM_Win32;
  {
    no warnings 'redefine';
    package ExtUtils::MM_Cygwin;
    sub maybe_command {
      my ($self, $file) = @_;
      my $cygpath = Cygwin::posix_to_win_path('/', 1);
      my $filepath = Cygwin::posix_to_win_path($file, 1);
      return (substr($filepath,0,length($cygpath)) eq $cygpath)
        ? $self->SUPER::maybe_command($file) # Unix
        : ExtUtils::MM_Win32->maybe_command($file); # Win32
    }
  }
} }
