name             = Dancer2-Logger-LogAny
license          = Perl_5
author           = Nick Tonkin <tonkin@cpan.org>
copyright_holder = Nick Tonkin
copyright_year   = 2017

[Prereqs]
Dancer2           = 0
Log::Any::Adapter = 0
Moo               = 0

[Prereqs / TestRequires]
HTTP::Request::Common = 0
Log::Any::Test        = 0
Plack::Test           = 0
Test::Pod::Coverage   = 0

[RewriteVersion]
[PodWeaver]
[MinimumPerlFast]
[InsertCopyright]
[License]
[Pod2Readme]
[Authority]
authority = cpan:TONKIN

[GatherDir]
exclude_filename = README.pod   ; skip this generated file
exclude_filename = README.mkdn  ; skip this generated file
exclude_filename = META.json    ; skip this generated file
exclude_filename = cpanfile     ; skip this generated file
exclude_filename = Makefile.PL  ; skip this generated file

[PruneCruft]
[ManifestSkip]

[MetaNoIndex]       ; sets 'no_index' in META
directory = t
directory = xt
directory = examples
directory = corpus
package = DB        ; just in case

[GithubMeta]        ; set META resources
remote = origin
remote = github
issues = 1

[MetaProvides::Package] ; add 'provides' to META files
meta_noindex = 1        ; respect prior no_index directives

[Prereqs::AuthorDeps]   ; add authordeps as develop/requires
[MetaYAML]              ; generate META.yml (v1.4)
[MetaJSON]              ; generate META.json (v2)
[CPANFile]              ; generate cpanfile

; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include 'share/' for File::ShareDir
[MakeMaker]         ; create Makefile.PL
eumm_version = 6.17
default_jobs = 9

[Manifest]          ; create MANIFEST

[Git::CheckFor::CorrectBranch] ; ensure on master branch
[Git::Check]
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = cpanfile

[CheckMetaResources]     ; ensure META has 'resources' data
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated

[RunExtraTests]   ; ensure xt/ tests pass
default_jobs = 9

[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading
[UploadToCPAN]      ; uploads to CPAN
;[FakeRelease]

; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)
[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

[NextRelease]
[BumpVersionAfterRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

[Git::Push]         ; push repo to remote
push_to = origin

