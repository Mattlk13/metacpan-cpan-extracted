Installing DBI and DBD::Informix without root privileges
========================================================

PERL5LIB and INSTALL_BASE are both relevant, but there are multiple other
sources of confusion.  Setting PREFIX is not necessary.

Note that PERL5LIB is a path-like environment variable — it consists
of multiple entries separated by colons on Unix systems; semi-colons on
Windows.  Perl uses it at runtime to modify the @INC list of directories
which controls the runtime search for modules.  (See "PERL5LIB — How
does it work?" http://www.perlmonks.org/?node_id=639559 for more
insight.)  In a simple case, you might set it to $HOME/perl5.

INSTALL_BASE is a single directory that can be specified on the command
line to "perl Makefile.PL INSTALL_BASE=$HOME/perl5" for example (where
this is one of possibly many directories specified in PERL5LIB).  (See:
"perldoc ExtUtils::MakeMaker" for discussion of INSTALL_BASE vs other
directory names, include PREFIX.  INSTALL_BASE was added in version 6.31
of ExtUtils::MakeMaker in October 2006.  The documentation says: 

    INSTALL_BASE can be passed into Makefile.PL to change where your
    module will be installed.  INSTALL_BASE is more like what everyone
    else calls "prefix" than PREFIX is.

When you install software compiled with the invocation of 'perl
Makefile.PL INSTALL_BASE=$HOME/perl5',

* programs will be placed in $HOME/perl5/bin.
* platform-neutral script files will be placed in $HOME/perl5/lib/perl5
* manual pages in for modules go in $HOME/perl5/man/man3
* manual pages for commands go in $HOME/perl5/man/man1
* architecture-specific files go in
  $HOME/perl5/lib/perl5/x86_64-linux-gnu-thread-multi (where the last
  component is the canonical architecture name for your version of Perl)
* some architecture-specific files go in the auto sub-dir:
  $HOME/perl5/lib/perl5/x86_64-linux-gnu-thread-multi/auto

Setting PERL5LIB to include the base directory ($HOME/perl5) specified
as INSTALL_BASE seems to be sufficient to make things work.

To install DBI and DBD::Informix, you need to install these modules in
this sequence:

* Net::Daemon
* PlRPC (which installs RPC::PlServer, RPC::PlClient)
* DBI
* DBD::Informix

The DBI bundle lists DBI::Shell and DBD::Multiplex too; however, DBI can
be installed successfully without those (tested: Perl 5.22.1, DBI
1.641).  It is possible that there are othher dependencies which
sufficiently archaic versions of Perl will not install by default; you
may need to install those, too.

Jonathan Leffler <jonathan.leffler@gmail.com>
Sunday 13th May 2018

---------------------------------------------------------------------------
The notes below from 1998 are hallowed by antiquity, but are not very
helpful in the second decade of the 21st century.  They may well have
been crucial at the time, but they are more complex than necessary now.
They are likely to be removed in the not-too-distant future.
---------------------------------------------------------------------------

From: David Alt <David.Alt@mailhost.bellhow.com>
Subject: Re: compiling/installing DBI/DBD modules in home directory tree
To: matthew@nocturnal.org
Date: Thu, 18 Jun 1998 15:15:12 -0400 (EDT)

> I basically dont wanna deal with the sysadmin's on this contract anymore,
> so I wanna start installing all my modules in my home dir.  This has been
> successful with installing every module i've run into EXCEPT DBD modules
> that wanna compile against DBI.

I've done this on Solaris with Oracle (for essentially the same reason),
and these steps work for me:

1) run the Makefile.PL command for DBI with the PREFIX=$PREFIX option
   (where you've defined PREFIX to the location you'd like)

2) run the Madefile.PL command for DBD with the options PREFIX=$PREFIX and
   -I$PREFIX

3) when you run your scripts, either invoke them with the -I$PREFIX option,
   or put a "use $ENV{'PREFIX'}" statement in them.

> perl -I$HOME/perl_mod -I$HOME/perl_mod/i386-linux Makefile.PL
>      PREFIX=~/perl_mod LIB=~/perl_mod

I don't think you need the -I$HOME/perl_mod/i386-linux argument.  I started
out specifying the architecture specific directory, too, but it turnes out
you don't really need it.

> It just seems to be puking when it tries to get at the DBI header files.
> Now, I noticed in (atleast the DBD::Pg) that $Config{installsitearch}
> and $Config{installarchlib} are getting set, but I was under the
> impression that setting INSTALLARCHLIB and INSTALLSITEARCH as attributes
> to the Makefile.PL should fix the matter.

I don't think you need to specify INSTALLARCHLIB and INSTALLSITEARCH,
because they just default to PREFIX/site-lib.  I tend to use  them,
though, because I'm not interested in that extra hierarchy.

In summary, what works for me is:

DBI
---
perl Makefile.PL PREFIX=$PREFIX INSTALLSITELIB=$PREFIX INSTALLSITEARCH=$PREFIX/sun4-solaris

DBD
---
perl -I$PREFIX Makefile.PL PREFIX=$PREFIX INSTALLSITELIB=$PREFIX INSTALLSITEARCH=$PREFIX/sun4-solaris

David Alt
bird@alum.mit.edu              "confusion is highly underrated"
(415) 474-1439

---------------------------------------------------------------------------

Date: Wed, 1 Jul 1998 14:20:03 -0700 (PDT)
To: dbi-users@fugue.com
From: Matt Johnson <mattj@spaatz.org>
Subject: Re: DBI Installation (PUT INTO DBI DOCUMENTATION/FAQ!!!)

> I now want to install the perl DBI.  My problem is that I do not have
> root access, nor write access to the perl directories.  So my question
> is, can I install the perl DBI without access to the perl directories?
> If so, what are the changes I have to make to the Makefile?

This question comes up *so* often, could somebody just add this to the
DBI documentation/FAQ? (provided by Randy Kobes, it worked flawlessly
for me):

What one would have to do is first install DBI into your own local perl
library, using

$ perl Makefile.PL PREFIX=/path/to/my/perllib \
  INSTALLMAN1DIR=/path/to/my/man/man1 \
  INSTALLMAN3DIR=/path/to/my/man/man3
$ make
$ make test
$ make install

You may get an error in this about a file not being created - just
create the path indicated to the file, and install again.  Then do the
same thing with the Msql-Mysql modules.  However, these need to see DBI,
which has just been installed in your private directory.  To ensure DBI
can be found, set the environment variable PERL5LIB to your private perl
library before going through the installation procedure; eg,

$ PERL5LIB=/path/to/my/perllib/site_perl
$ export PERL5LIB

Then, in your scripts, insert the line (for later perls)

    use lib '/path/to/my/perllib/site_perl';

or for earlier perls (5.000 and 5.001)

    BEGIN { unshift(@INC, "/path/to/my/perllib/site_perl") }

to indicate where your private library is.

@(#)$Id: nonroot.install,v 2018.3 2018/05/14 00:20:28 jleffler Exp $
