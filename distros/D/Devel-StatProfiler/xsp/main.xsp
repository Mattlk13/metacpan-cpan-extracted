#define _DEVEL_STATPROFILER_XSP

#include "EXTERN.h"
#include "perl.h"
#include "ppport.h"

#include "runloop.h"
#include "tracefile.h"

%module{Devel::StatProfiler};
%package{Devel::StatProfiler};

%name{_install} void install_runloop();
void set_enabled(bool enabled);
void set_output_file(const char *path, bool is_template);
void set_sampling_interval(unsigned int interval);
void set_stack_collection_depth(unsigned int num_stack_frames);
void set_max_output_file_size(size_t max_size);
void set_save_source(unsigned int save_source);
void set_global_metadata(HV *metadata)
  %code{% set_global_metadata(aTHX_ metadata); %};

void write_custom_metadata(SV *key, SV *value)
  %code{% write_custom_metadata(aTHX_ key, value); %};
void start_section(SV *section_name)
  %code{% start_section(aTHX_ section_name); %};
void end_section(SV *section_name)
  %code{% end_section(aTHX_ section_name); %};
int get_precision();
bool is_running();

%package{Devel::StatProfiler::Test};

void test_enable();
void test_force_sample(unsigned int increment);

double test_hires_usleep(unsigned usec);
double test_hires_sleep(double sleep);
double test_hires_time();

%name{Devel::StatProfiler::Reader} class TraceFileReader
{
    TraceFileReader(SV *path, SV *mapper = NULL)
      %code{%
          STRLEN len;
          const char *str = SvPV(path, len);
          const std::string pathstr(str, len);
          RETVAL = new TraceFileReader(aTHX_ mapper);
          RETVAL->open(pathstr);
      %};
    ~TraceFileReader();

    SV *read_trace();

    int get_format_version();
    int get_source_tick_duration();
    int get_source_stack_sample_depth();
    HV *get_custom_metadata();
    HV *get_source_code();
    void clear_custom_metadata();
    void delete_custom_metadata(AV *keys);
    HV *get_active_sections();
    bool is_file_ended();
    bool is_stream_ended();

    SV *get_source_perl_version()
      %code{%
        const PerlVersion_t &version = THIS->get_source_perl_version();
        RETVAL = newSVpvf("%lu.%lu.%lu", (unsigned long)version.revision,
                                          (unsigned long)version.version,
                                          (unsigned long)version.subversion);
      %};

    SV *get_genealogy_info()
      %code{%
        const Genealogy_t &genealogy_info = THIS->get_genealogy_info();
        AV *res = newAV();
        av_push(res, newSVpvn((const char *) genealogy_info.id, sizeof(genealogy_info.id) - 1));
        av_push(res, newSVuv(genealogy_info.ordinal));
        av_push(res, newSVpvn((const char *) genealogy_info.parent_id, sizeof(genealogy_info.parent_id) - 1));
        av_push(res, newSVuv(genealogy_info.parent_ordinal));
        RETVAL = newRV_noinc((SV *)res);
      %};
};

%{

BOOT:
    init_runloop(aTHX);

void
CLONE(...)
  CODE:
    clone_runloop(aTHX);

%}
