.TH "apreq_module_t" 3 "Wed Mar 10 2021" "Version 2.16" "libapreq2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apreq_module_t \- Vtable describing the necessary module functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <apreq_module\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const char * \fBname\fP"
.br
.ti -1c
.RI "apr_uint32_t \fBmagic_number\fP"
.br
.ti -1c
.RI "apr_status_t(* \fBjar\fP )(\fBapreq_handle_t\fP *, const apr_table_t **)"
.br
.ti -1c
.RI "apr_status_t(* \fBargs\fP )(\fBapreq_handle_t\fP *, const apr_table_t **)"
.br
.ti -1c
.RI "apr_status_t(* \fBbody\fP )(\fBapreq_handle_t\fP *, const apr_table_t **)"
.br
.ti -1c
.RI "\fBapreq_cookie_t\fP *(* \fBjar_get\fP )(\fBapreq_handle_t\fP *, const char *)"
.br
.ti -1c
.RI "\fBapreq_param_t\fP *(* \fBargs_get\fP )(\fBapreq_handle_t\fP *, const char *)"
.br
.ti -1c
.RI "\fBapreq_param_t\fP *(* \fBbody_get\fP )(\fBapreq_handle_t\fP *, const char *)"
.br
.ti -1c
.RI "apr_status_t(* \fBparser_get\fP )(\fBapreq_handle_t\fP *, const \fBapreq_parser_t\fP **)"
.br
.ti -1c
.RI "apr_status_t(* \fBparser_set\fP )(\fBapreq_handle_t\fP *, \fBapreq_parser_t\fP *)"
.br
.ti -1c
.RI "apr_status_t(* \fBhook_add\fP )(\fBapreq_handle_t\fP *, \fBapreq_hook_t\fP *)"
.br
.ti -1c
.RI "apr_status_t(* \fBbrigade_limit_get\fP )(\fBapreq_handle_t\fP *, apr_size_t *)"
.br
.ti -1c
.RI "apr_status_t(* \fBbrigade_limit_set\fP )(\fBapreq_handle_t\fP *, apr_size_t)"
.br
.ti -1c
.RI "apr_status_t(* \fBread_limit_get\fP )(\fBapreq_handle_t\fP *, apr_uint64_t *)"
.br
.ti -1c
.RI "apr_status_t(* \fBread_limit_set\fP )(\fBapreq_handle_t\fP *, apr_uint64_t)"
.br
.ti -1c
.RI "apr_status_t(* \fBtemp_dir_get\fP )(\fBapreq_handle_t\fP *, const char **)"
.br
.ti -1c
.RI "apr_status_t(* \fBtemp_dir_set\fP )(\fBapreq_handle_t\fP *, const char *)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Vtable describing the necessary module functions\&. 
.SH "Field Documentation"
.PP 
.SS "apr_status_t(* apreq_module_t::args) (\fBapreq_handle_t\fP *, const apr_table_t **)"
get a table with all query string parameters 
.SS "\fBapreq_param_t\fP*(* apreq_module_t::args_get) (\fBapreq_handle_t\fP *, const char *)"
get a query string parameter by its name 
.SS "apr_status_t(* apreq_module_t::body) (\fBapreq_handle_t\fP *, const apr_table_t **)"
get a table with all body parameters 
.SS "\fBapreq_param_t\fP*(* apreq_module_t::body_get) (\fBapreq_handle_t\fP *, const char *)"
get a body parameter by its name 
.SS "apr_status_t(* apreq_module_t::brigade_limit_get) (\fBapreq_handle_t\fP *, apr_size_t *)"
determine the maximum in-memory bytes a brigade may use 
.SS "apr_status_t(* apreq_module_t::brigade_limit_set) (\fBapreq_handle_t\fP *, apr_size_t)"
set the maximum in-memory bytes a brigade may use 
.SS "apr_status_t(* apreq_module_t::hook_add) (\fBapreq_handle_t\fP *, \fBapreq_hook_t\fP *)"
add a hook function 
.SS "apr_status_t(* apreq_module_t::jar) (\fBapreq_handle_t\fP *, const apr_table_t **)"
get a table with all cookies 
.SS "\fBapreq_cookie_t\fP*(* apreq_module_t::jar_get) (\fBapreq_handle_t\fP *, const char *)"
get a cookie by its name 
.SS "apr_uint32_t apreq_module_t::magic_number"
magic number identifying the module and version 
.SS "const char* apreq_module_t::name"
name of this apreq module 
.SS "apr_status_t(* apreq_module_t::parser_get) (\fBapreq_handle_t\fP *, const \fBapreq_parser_t\fP **)"
gets the parser associated with the request body 
.SS "apr_status_t(* apreq_module_t::parser_set) (\fBapreq_handle_t\fP *, \fBapreq_parser_t\fP *)"
manually set a parser for the request body 
.SS "apr_status_t(* apreq_module_t::read_limit_get) (\fBapreq_handle_t\fP *, apr_uint64_t *)"
determine the maximum amount of data that will be fed into a parser 
.SS "apr_status_t(* apreq_module_t::read_limit_set) (\fBapreq_handle_t\fP *, apr_uint64_t)"
set the maximum amount of data that will be fed into a parser 
.SS "apr_status_t(* apreq_module_t::temp_dir_get) (\fBapreq_handle_t\fP *, const char **)"
determine the directory used by the parser for temporary files 
.SS "apr_status_t(* apreq_module_t::temp_dir_set) (\fBapreq_handle_t\fP *, const char *)"
set the directory used by the parser for temporary files 

.SH "Author"
.PP 
Generated automatically by Doxygen for libapreq2 from the source code\&.
