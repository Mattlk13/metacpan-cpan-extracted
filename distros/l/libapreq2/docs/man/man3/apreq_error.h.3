.TH "include/apreq_error.h" 3 "Wed Mar 10 2021" "Version 2.16" "libapreq2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/apreq_error.h \- Error status codes\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'apr_errno\&.h'\fP
.br
\fC#include 'apreq\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAPR_EBADARG\fP   APR_BADARG   /* XXX: don't use APR_BADARG */"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_GENERAL\fP   APR_OS_START_USERERR"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_TAINTED\fP   (\fBAPREQ_ERROR_GENERAL\fP + 1)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_INTERRUPT\fP   (\fBAPREQ_ERROR_GENERAL\fP + 2)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_BADDATA\fP   (\fBAPREQ_ERROR_GENERAL\fP  + 10)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_BADCHAR\fP   (\fBAPREQ_ERROR_BADDATA\fP  +  1)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_BADSEQ\fP   (\fBAPREQ_ERROR_BADDATA\fP  +  2)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_BADATTR\fP   (\fBAPREQ_ERROR_BADDATA\fP  +  3)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_BADHEADER\fP   (\fBAPREQ_ERROR_BADDATA\fP  +  4)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_BADUTF8\fP   (\fBAPREQ_ERROR_BADDATA\fP  +  5)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_NODATA\fP   (\fBAPREQ_ERROR_GENERAL\fP  + 20)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_NOTOKEN\fP   (\fBAPREQ_ERROR_NODATA\fP   +  1)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_NOATTR\fP   (\fBAPREQ_ERROR_NODATA\fP   +  2)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_NOHEADER\fP   (\fBAPREQ_ERROR_NODATA\fP   +  3)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_NOPARSER\fP   (\fBAPREQ_ERROR_NODATA\fP   +  4)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_MISMATCH\fP   (\fBAPREQ_ERROR_GENERAL\fP  + 30)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_OVERLIMIT\fP   (\fBAPREQ_ERROR_MISMATCH\fP +  1)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_UNDERLIMIT\fP   (\fBAPREQ_ERROR_MISMATCH\fP +  2)"
.br
.ti -1c
.RI "#define \fBAPREQ_ERROR_NOTEMPTY\fP   (\fBAPREQ_ERROR_MISMATCH\fP +  3)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBapreq_strerror\fP (apr_status_t s, char *buf, apr_size_t bufsize)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Error status codes\&. 

Define the APREQ_ error codes\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define APR_EBADARG   APR_BADARG   /* XXX: don't use APR_BADARG */"
Bad Arguments return value 
.PP
\fBSee also\fP
.RS 4
APR_BADARG 
.RE
.PP

.SS "#define APREQ_ERROR_BADATTR   (\fBAPREQ_ERROR_BADDATA\fP  +  3)"
Invalid attribute\&. 
.SS "#define APREQ_ERROR_BADCHAR   (\fBAPREQ_ERROR_BADDATA\fP  +  1)"
Invalid character\&. 
.SS "#define APREQ_ERROR_BADDATA   (\fBAPREQ_ERROR_GENERAL\fP  + 10)"
Invalid input data\&. 
.SS "#define APREQ_ERROR_BADHEADER   (\fBAPREQ_ERROR_BADDATA\fP  +  4)"
Invalid header\&. 
.SS "#define APREQ_ERROR_BADSEQ   (\fBAPREQ_ERROR_BADDATA\fP  +  2)"
Invalid byte sequence\&. 
.SS "#define APREQ_ERROR_BADUTF8   (\fBAPREQ_ERROR_BADDATA\fP  +  5)"
Invalid utf8 encoding\&. 
.SS "#define APREQ_ERROR_GENERAL   APR_OS_START_USERERR"
Internal apreq error\&. 
.SS "#define APREQ_ERROR_INTERRUPT   (\fBAPREQ_ERROR_GENERAL\fP + 2)"
Parsing interrupted\&. 
.SS "#define APREQ_ERROR_MISMATCH   (\fBAPREQ_ERROR_GENERAL\fP  + 30)"
Conflicting information\&. 
.SS "#define APREQ_ERROR_NOATTR   (\fBAPREQ_ERROR_NODATA\fP   +  2)"
Missing attribute\&. 
.SS "#define APREQ_ERROR_NODATA   (\fBAPREQ_ERROR_GENERAL\fP  + 20)"
Missing input data\&. 
.SS "#define APREQ_ERROR_NOHEADER   (\fBAPREQ_ERROR_NODATA\fP   +  3)"
Missing header\&. 
.SS "#define APREQ_ERROR_NOPARSER   (\fBAPREQ_ERROR_NODATA\fP   +  4)"
Missing parser\&. 
.SS "#define APREQ_ERROR_NOTEMPTY   (\fBAPREQ_ERROR_MISMATCH\fP +  3)"
Setting already configured\&. 
.SS "#define APREQ_ERROR_NOTOKEN   (\fBAPREQ_ERROR_NODATA\fP   +  1)"
Missing required token\&. 
.SS "#define APREQ_ERROR_OVERLIMIT   (\fBAPREQ_ERROR_MISMATCH\fP +  1)"
Exceeds configured maximum limit\&. 
.SS "#define APREQ_ERROR_TAINTED   (\fBAPREQ_ERROR_GENERAL\fP + 1)"
Attempted to perform unsafe action with tainted data\&. 
.SS "#define APREQ_ERROR_UNDERLIMIT   (\fBAPREQ_ERROR_MISMATCH\fP +  2)"
Below configured minimum limit\&. 
.SH "Function Documentation"
.PP 
.SS "char* apreq_strerror (apr_status_t s, char * buf, apr_size_t bufsize)"
apreq's wrapper around apr_strerror(); recognizes APREQ_ERROR_* status codes\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libapreq2 from the source code\&.
