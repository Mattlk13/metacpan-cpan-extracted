SYNOPSIS

     use lib::noop qw(Foo::Bar Baz);
     use Foo::Bar; # now a no-op
     use Qux; # load as usual

DESCRIPTION

    Given a list of module names, it will make subsequent loading of those
    modules a no-op. It works by installing a require hook in @INC that
    looks for the specified modules to be no-op'ed and return "1;" as the
    source code for those modules.

    This makes loading a no-op'ed module a success, even though the module
    does not exist on the filesystem. And the %INC entry for the module
    will be added, making subsequent loading of the same module a no-op too
    because Perl's require will see that the entry for the module in %INC
    already exists.

    But, since the loading is a no-op operation, no code other than "1;" is
    executed and if the original module contains function or package
    variable definition, they will not be defined.

    This pragma can be used e.g. for testing.

    To cancel the effect of lib::noop, you can unimport it. If you then
    want to actually load a module that has been no-op'ed, you have to
    delete its %INC entry first:

     use lib::noop qw(Data::Dumper);
     use Data::Dumper;
    
     # this code will die because Data::Dumper::Dumper is not defined
     BEGIN { print Data::Dumper::Dumper([1,2,3]) }
    
     no lib::noop;
     BEGIN { delete $INC{"Foo/Bar.pm"} }
     use Data::Dumper;
    
     # this code now runs ok
     BEGIN { print Data::Dumper::Dumper([1,2,3]) }

