---
x-api-blueprint:
  resource_section: name_uri
  action_section: name_method
swagger: "2.0"
info:
  version: "1.0"
  title: Parameters API
  description: |
    In this installment of the API Blueprint course we will discuss how to describe URI parameters.

    But first let's add more messages to our system. For that we would need introduce an message identifier - id. This id will be our parameter when communicating with our API about messages.

    ## API Blueprint
    + [Previous: Requests](06.%20Requests.md)
    + [This: Raw API Blueprint](https://raw.github.com/apiaryio/api-blueprint/master/examples/07.%20Parameters.md)
    + [Next: Attributes](08.%20Attributes.md)

paths:
  /message/{id}:
    x-api-blueprint:
      group: Messages
      summary: My Message
      description: |
        Group of all messages-related resources.
      group_description: |
        Here we have added the message `id` parameter as an [URI Template variable](http://tools.ietf.org/html/rfc6570) in the Message resource's URI.
        Note the parameter name `id` is enclosed in curly brackets. We will discuss this parameter in the `Parameters` section below, where we will also set its example value to `1` and declare it of an arbitrary 'number' type.
    get:
      summary: Retrieve a Message
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: An unique identifier of the message.
          type: number
          x-example: 1
          required: true
        - in: header
          name: Accept
          type: string
      responses:
        200:
          description: The response message
          headers:
            X-My-Message-Header:
              description: some header
              type: integer
          schema:
            type: object
            properties:
              message:
                type: string
            example: "{ \"id\": 1, \"message\": \"Hello World!\" }"
    put:
      summary: Update a Message
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: An unique identifier of the message.
          type: number
          x-example: 1
          required: true
        - in: body
          name: message
          schema:
            format: string
            example: "{ \"message\": \"All your base are belong to us.\" }"
      responses:
        204:
          description: The response message
  /messages:
    x-api-blueprint:
      group: Messages
      summary: All My Messages
      description: 
        A resource representing all of my messages in the system.
      group_description: |
        A resource representing all of my messages in the system.

        We have added the query URI template parameter - `limit`. This parameter is used for limiting the number of results returned by some actions on this resource. It does not affect every possible action of this resource therefore we will discuss it only at the particular action level below.
    get:
      summary: Retrieve all Messages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          description: The maximum number of results to return.
          type: number
          x-example: 3
          default: 20
          required: false
        - in: query
          name: page
          required: false
          description: The page to return.
          type: number
      responses:
        200:
          description: The response message
          schema:
            type: object
            properties:
              message:
                type: string
            example: |
              [
                {
                  "id": 1,
                  "message": "Hello World!"
                },
                {
                  "id": 2,
                  "message": "Time is an illusion. Lunchtime doubly so."
                },
                {
                  "id": 3,
                  "message": "So long, and thanks for all the fish."
                }
              ]

# vim: ts=2:sw=2:et
