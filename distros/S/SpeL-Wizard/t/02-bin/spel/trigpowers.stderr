spel-wizard.pl - v0.9 - Walter Daems <walter.daems@uantwerpen.be>
=================================================================
- Reading configuration file from /home/wdaems/perl5/lib/perl5/auto/share/dist/SpeL-Wizard/tts.conf
- no t/02-bin/spel/trigpowers.aux available at /home/wdaems/lab/spelbox/perl/lib/SpeL/Wizard.pm line 96.
- Treating t/02-bin/spel/spel/trigpowers.tex                       
  Parsing t/02-bin/spel/spel/trigpowers.tex                 [  0%]  Parsed  t/02-bin/spel/spel/trigpowers.tex                 [  0%]$Parsetree = bless( {
  'Element' => [
    bless( {
      '' => 'Zelfde vraag voor: '
    }, 'SpeL::Object::TokenSequence' ),
    bless( {
      'MathUnit' => bless( {
        '' => '(1+\\cos{\\alpha} + \\jz \\sin{\\alpha} )^n = 2^n \\cos^n{\\frac{\\alpha}{2}} \\,(\\cos{\\frac {n\\alpha }{2}} + \\jz \\sin{\\frac{n\\alpha }{2}})',
        'Left' => bless( {
          'Component' => bless( {
            '' => '1+\\cos{\\alpha} + \\jz \\sin{\\alpha} ',
            'Left' => bless( {
              'Component' => bless( {
                'Realnumber' => bless( {
                  'Sign' => '',
                  'Value' => '1',
                  'trailingws' => ''
                }, 'SpeL::Object::Realnumber' )
              }, 'SpeL::Object::Number' ),
              'Rest' => bless( {
                'Op' => bless( {
                  'Op' => '+'
                }, 'SpeL::Object::Binop' ),
                'Remainder' => bless( {
                  'Component' => bless( {
                    'Argument' => bless( {
                      'Component' => bless( {
                        'Greek' => '\\alpha',
                        'trailingws' => ''
                      }, 'SpeL::Object::Variable' ),
                      'Rest' => bless( {
                        'ws' => ''
                      }, 'SpeL::Object::Expressionrest' )
                    }, 'SpeL::Object::Expression' ),
                    'Trig' => '\\cos'
                  }, 'SpeL::Object::Function' ),
                  'Rest' => bless( {
                    'Op' => bless( {
                      'Op' => '+'
                    }, 'SpeL::Object::Binop' ),
                    'Remainder' => bless( {
                      'Component' => bless( {
                        'Name' => 'jz',
                        'trailingws' => ' '
                      }, 'SpeL::Object::Command' ),
                      'Rest' => bless( {
                        'Op' => bless( {
                          'Op' => ''
                        }, 'SpeL::Object::Binop' ),
                        'Remainder' => bless( {
                          'Component' => bless( {
                            'Argument' => bless( {
                              'Component' => bless( {
                                'Greek' => '\\alpha',
                                'trailingws' => ''
                              }, 'SpeL::Object::Variable' ),
                              'Rest' => bless( {
                                'ws' => ''
                              }, 'SpeL::Object::Expressionrest' )
                            }, 'SpeL::Object::Expression' ),
                            'Trig' => '\\sin'
                          }, 'SpeL::Object::Function' ),
                          'Rest' => bless( {
                            'ws' => ''
                          }, 'SpeL::Object::Expressionrest' )
                        }, 'SpeL::Object::Expression' )
                      }, 'SpeL::Object::Expressionrest' )
                    }, 'SpeL::Object::Expression' )
                  }, 'SpeL::Object::Expressionrest' )
                }, 'SpeL::Object::Expression' )
              }, 'SpeL::Object::Expressionrest' )
            }, 'SpeL::Object::Expression' )
          }, 'SpeL::Object::Relation' ),
          'Rest' => bless( {
            'Op' => bless( {
              'Lit' => 'n',
              'sup' => '^'
            }, 'SpeL::Object::Power' ),
            'Remainder' => bless( {
              'ws' => ''
            }, 'SpeL::Object::Expressionrest' )
          }, 'SpeL::Object::Expressionrest' ),
          'cbracket' => ')',
          'obracket' => '('
        }, 'SpeL::Object::Expression' ),
        'RelationChain' => [
          {
            'RelOperator' => bless( {
              '' => '='
            }, 'SpeL::Object::RelOperator' ),
            'Right' => bless( {
              'Component' => bless( {
                'Realnumber' => bless( {
                  'Sign' => '',
                  'Value' => '2',
                  'trailingws' => ''
                }, 'SpeL::Object::Realnumber' )
              }, 'SpeL::Object::Number' ),
              'Rest' => bless( {
                'Op' => bless( {
                  'Lit' => 'n',
                  'sup' => '^'
                }, 'SpeL::Object::Power' ),
                'Remainder' => bless( {
                  'Op' => bless( {
                    'Op' => ''
                  }, 'SpeL::Object::Binop' ),
                  'Remainder' => bless( {
                    'Component' => bless( {
                      'Argument' => bless( {
                        'Component' => bless( {
                          'den' => bless( {
                            'Realnumber' => bless( {
                              'Sign' => '',
                              'Value' => '2',
                              'trailingws' => ''
                            }, 'SpeL::Object::Realnumber' )
                          }, 'SpeL::Object::Number' ),
                          'num' => bless( {
                            'Component' => bless( {
                              'Greek' => '\\alpha',
                              'trailingws' => ''
                            }, 'SpeL::Object::Variable' ),
                            'Rest' => bless( {
                              'ws' => ''
                            }, 'SpeL::Object::Expressionrest' )
                          }, 'SpeL::Object::Expression' )
                        }, 'SpeL::Object::Fraction' ),
                        'Rest' => bless( {
                          'ws' => ''
                        }, 'SpeL::Object::Expressionrest' )
                      }, 'SpeL::Object::Expression' ),
                      'Power' => bless( {
                        'Lit' => 'n',
                        'sup' => '^'
                      }, 'SpeL::Object::Power' ),
                      'Trig' => '\\cos'
                    }, 'SpeL::Object::Function' ),
                    'Rest' => bless( {
                      'Op' => bless( {
                        'Op' => ''
                      }, 'SpeL::Object::Binop' ),
                      'Remainder' => bless( {
                        'Component' => bless( {
                          '' => '\\cos{\\frac {n\\alpha }{2}} + \\jz \\sin{\\frac{n\\alpha }{2}}',
                          'Left' => bless( {
                            'Component' => bless( {
                              'Argument' => bless( {
                                'Component' => bless( {
                                  'den' => bless( {
                                    'Realnumber' => bless( {
                                      'Sign' => '',
                                      'Value' => '2',
                                      'trailingws' => ''
                                    }, 'SpeL::Object::Realnumber' )
                                  }, 'SpeL::Object::Number' ),
                                  'num' => bless( {
                                    'Component' => bless( {
                                      'Alphabet' => 'n',
                                      'trailingws' => ''
                                    }, 'SpeL::Object::Variable' ),
                                    'Rest' => bless( {
                                      'Op' => bless( {
                                        'Op' => ''
                                      }, 'SpeL::Object::Binop' ),
                                      'Remainder' => bless( {
                                        'Component' => bless( {
                                          'Greek' => '\\alpha',
                                          'trailingws' => ' '
                                        }, 'SpeL::Object::Variable' ),
                                        'Rest' => bless( {
                                          'ws' => ''
                                        }, 'SpeL::Object::Expressionrest' )
                                      }, 'SpeL::Object::Expression' )
                                    }, 'SpeL::Object::Expressionrest' )
                                  }, 'SpeL::Object::Expression' )
                                }, 'SpeL::Object::Fraction' ),
                                'Rest' => bless( {
                                  'ws' => ''
                                }, 'SpeL::Object::Expressionrest' )
                              }, 'SpeL::Object::Expression' ),
                              'Trig' => '\\cos'
                            }, 'SpeL::Object::Function' ),
                            'Rest' => bless( {
                              'Op' => bless( {
                                'Op' => '+'
                              }, 'SpeL::Object::Binop' ),
                              'Remainder' => bless( {
                                'Component' => bless( {
                                  'Name' => 'jz',
                                  'trailingws' => ' '
                                }, 'SpeL::Object::Command' ),
                                'Rest' => bless( {
                                  'Op' => bless( {
                                    'Op' => ''
                                  }, 'SpeL::Object::Binop' ),
                                  'Remainder' => bless( {
                                    'Component' => bless( {
                                      'Argument' => bless( {
                                        'Component' => bless( {
                                          'den' => bless( {
                                            'Realnumber' => bless( {
                                              'Sign' => '',
                                              'Value' => '2',
                                              'trailingws' => ''
                                            }, 'SpeL::Object::Realnumber' )
                                          }, 'SpeL::Object::Number' ),
                                          'num' => bless( {
                                            'Component' => bless( {
                                              'Alphabet' => 'n',
                                              'trailingws' => ''
                                            }, 'SpeL::Object::Variable' ),
                                            'Rest' => bless( {
                                              'Op' => bless( {
                                                'Op' => ''
                                              }, 'SpeL::Object::Binop' ),
                                              'Remainder' => bless( {
                                                'Component' => bless( {
                                                  'Greek' => '\\alpha',
                                                  'trailingws' => ' '
                                                }, 'SpeL::Object::Variable' ),
                                                'Rest' => bless( {
                                                  'ws' => ''
                                                }, 'SpeL::Object::Expressionrest' )
                                              }, 'SpeL::Object::Expression' )
                                            }, 'SpeL::Object::Expressionrest' )
                                          }, 'SpeL::Object::Expression' )
                                        }, 'SpeL::Object::Fraction' ),
                                        'Rest' => bless( {
                                          'ws' => ''
                                        }, 'SpeL::Object::Expressionrest' )
                                      }, 'SpeL::Object::Expression' ),
                                      'Trig' => '\\sin'
                                    }, 'SpeL::Object::Function' ),
                                    'Rest' => bless( {
                                      'ws' => ''
                                    }, 'SpeL::Object::Expressionrest' )
                                  }, 'SpeL::Object::Expression' )
                                }, 'SpeL::Object::Expressionrest' )
                              }, 'SpeL::Object::Expression' )
                            }, 'SpeL::Object::Expressionrest' )
                          }, 'SpeL::Object::Expression' )
                        }, 'SpeL::Object::Relation' ),
                        'Rest' => bless( {
                          'ws' => ''
                        }, 'SpeL::Object::Expressionrest' ),
                        'cbracket' => ')',
                        'obracket' => '('
                      }, 'SpeL::Object::Expression' )
                    }, 'SpeL::Object::Expressionrest' )
                  }, 'SpeL::Object::Expression' )
                }, 'SpeL::Object::Expressionrest' )
              }, 'SpeL::Object::Expressionrest' )
            }, 'SpeL::Object::Expression' )
          }
        ]
      }, 'SpeL::Object::Relation' )
    }, 'SpeL::Object::MathInline' ),
    bless( {
      '' => 'waarbij '
    }, 'SpeL::Object::TokenSequence' ),
    bless( {
      'MathUnit' => bless( {
        '' => '\\alpha \\in \\Rbar ',
        'Left' => bless( {
          'Component' => bless( {
            'Greek' => '\\alpha',
            'trailingws' => ' '
          }, 'SpeL::Object::Variable' ),
          'Rest' => bless( {
            'ws' => ''
          }, 'SpeL::Object::Expressionrest' )
        }, 'SpeL::Object::Expression' ),
        'RelationChain' => [
          {
            'RelOperator' => bless( {
              '' => '\\in'
            }, 'SpeL::Object::RelOperator' ),
            'Right' => bless( {
              'Component' => bless( {
                'Name' => 'Rbar',
                'trailingws' => ' '
              }, 'SpeL::Object::Command' ),
              'Rest' => bless( {
                'ws' => ''
              }, 'SpeL::Object::Expressionrest' )
            }, 'SpeL::Object::Expression' )
          }
        ]
      }, 'SpeL::Object::Relation' )
    }, 'SpeL::Object::MathInline' ),
    bless( {
      '' => '.

'
    }, 'SpeL::Object::TokenSequence' )
  ]
}, 'SpeL::Object::ElementList' );

Done.
