$tex = bless( {
  'path' => 't/01-lib/SpeL/Parser/Chunk',
  'tree' => bless( {
    'ElementList' => bless( {
      'Element' => [
        bless( {
          'MathUnit' => [
            bless( {
              '' => '\\left(\\cos x+j\\sin x\\right)^n=\\cos(nx)+j\\sin(nx)
  ',
              'Left' => bless( {
                'Component' => bless( {
                  '' => '\\cos x+j\\sin x',
                  'Left' => bless( {
                    'Component' => bless( {
                      'Argument' => bless( {
                        'Component' => bless( {
                          'Alphabet' => 'x',
                          'trailingws' => ''
                        }, 'SpeL::Object::Variable' ),
                        'Rest' => bless( {
                          'Op' => bless( {
                            'Op' => '+'
                          }, 'SpeL::Object::Binop' ),
                          'Remainder' => bless( {
                            'Component' => bless( {
                              'Alphabet' => 'j',
                              'trailingws' => ''
                            }, 'SpeL::Object::Variable' ),
                            'Rest' => bless( {
                              'Op' => bless( {
                                'Op' => ''
                              }, 'SpeL::Object::Binop' ),
                              'Remainder' => bless( {
                                'Component' => bless( {
                                  'Argument' => bless( {
                                    'Component' => bless( {
                                      'Alphabet' => 'x',
                                      'trailingws' => ''
                                    }, 'SpeL::Object::Variable' ),
                                    'Rest' => bless( {
                                      'ws' => ''
                                    }, 'SpeL::Object::Expressionrest' )
                                  }, 'SpeL::Object::Expression' ),
                                  'Trig' => '\\sin'
                                }, 'SpeL::Object::Function' ),
                                'Rest' => bless( {
                                  'ws' => ''
                                }, 'SpeL::Object::Expressionrest' )
                              }, 'SpeL::Object::Expression' )
                            }, 'SpeL::Object::Expressionrest' )
                          }, 'SpeL::Object::Expression' )
                        }, 'SpeL::Object::Expressionrest' )
                      }, 'SpeL::Object::Expression' ),
                      'Trig' => '\\cos'
                    }, 'SpeL::Object::Function' ),
                    'Rest' => bless( {
                      'ws' => ''
                    }, 'SpeL::Object::Expressionrest' )
                  }, 'SpeL::Object::Expression' )
                }, 'SpeL::Object::Relation' ),
                'Rest' => bless( {
                  'Op' => bless( {
                    'Lit' => 'n',
                    'sup' => '^'
                  }, 'SpeL::Object::Power' ),
                  'Remainder' => bless( {
                    'ws' => ''
                  }, 'SpeL::Object::Expressionrest' )
                }, 'SpeL::Object::Expressionrest' ),
                'cbracket' => '\\right)',
                'obracket' => '\\left('
              }, 'SpeL::Object::Expression' ),
              'RelationChain' => [
                {
                  'RelOperator' => bless( {
                    '' => '='
                  }, 'SpeL::Object::RelOperator' ),
                  'Right' => bless( {
                    'Component' => bless( {
                      'Argument' => bless( {
                        'Component' => bless( {
                          'Alphabet' => 'n',
                          'trailingws' => ''
                        }, 'SpeL::Object::Variable' ),
                        'Rest' => bless( {
                          'Op' => bless( {
                            'Op' => ''
                          }, 'SpeL::Object::Binop' ),
                          'Remainder' => bless( {
                            'Component' => bless( {
                              'Alphabet' => 'x',
                              'trailingws' => ''
                            }, 'SpeL::Object::Variable' ),
                            'Rest' => bless( {
                              'ws' => ''
                            }, 'SpeL::Object::Expressionrest' )
                          }, 'SpeL::Object::Expression' )
                        }, 'SpeL::Object::Expressionrest' )
                      }, 'SpeL::Object::Expression' ),
                      'Trig' => '\\cos',
                      'cbracket' => ')',
                      'obracket' => '('
                    }, 'SpeL::Object::Function' ),
                    'Rest' => bless( {
                      'Op' => bless( {
                        'Op' => '+'
                      }, 'SpeL::Object::Binop' ),
                      'Remainder' => bless( {
                        'Component' => bless( {
                          'Alphabet' => 'j',
                          'trailingws' => ''
                        }, 'SpeL::Object::Variable' ),
                        'Rest' => bless( {
                          'Op' => bless( {
                            'Op' => ''
                          }, 'SpeL::Object::Binop' ),
                          'Remainder' => bless( {
                            'Component' => bless( {
                              'Argument' => bless( {
                                'Component' => bless( {
                                  'Alphabet' => 'n',
                                  'trailingws' => ''
                                }, 'SpeL::Object::Variable' ),
                                'Rest' => bless( {
                                  'Op' => bless( {
                                    'Op' => ''
                                  }, 'SpeL::Object::Binop' ),
                                  'Remainder' => bless( {
                                    'Component' => bless( {
                                      'Alphabet' => 'x',
                                      'trailingws' => ''
                                    }, 'SpeL::Object::Variable' ),
                                    'Rest' => bless( {
                                      'ws' => ''
                                    }, 'SpeL::Object::Expressionrest' )
                                  }, 'SpeL::Object::Expression' )
                                }, 'SpeL::Object::Expressionrest' )
                              }, 'SpeL::Object::Expression' ),
                              'Trig' => '\\sin',
                              'cbracket' => ')',
                              'obracket' => '('
                            }, 'SpeL::Object::Function' ),
                            'Rest' => bless( {
                              'ws' => ''
                            }, 'SpeL::Object::Expressionrest' )
                          }, 'SpeL::Object::Expression' )
                        }, 'SpeL::Object::Expressionrest' )
                      }, 'SpeL::Object::Expression' )
                    }, 'SpeL::Object::Expressionrest' )
                  }, 'SpeL::Object::Expression' )
                }
              ]
            }, 'SpeL::Object::Relation' )
          ],
          'mathtag' => 'equation',
          'trailingws' => '
    '
        }, 'SpeL::Object::MathEnvironment' ),
        bless( {
          '' => '
'
        }, 'SpeL::Object::TokenSequence' )
      ]
    }, 'SpeL::Object::ElementList' )
  }, 'SpeL::Object::Document' )
}, 'SpeL::Parser::Chunk' );

