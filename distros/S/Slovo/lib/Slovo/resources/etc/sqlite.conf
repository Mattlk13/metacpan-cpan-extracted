#!/usr/bin/env perl
use Mojo::Base -strict;

# TODO: move all the code that appeared in this file into a plugin and leave
# just settings in this file. For example:db_adaptor => 'Mojo::SQLite',
# migrate_file => $app->resources->child("data/${\ $app->VERSION}.sql"),
# sql_debug=>5(for caller($sql_debug)), tables =>[groups, users] (for which you
# have classes (or just classe)) OR Model namespace and Model classes to load

# Let us try to make a switchable database!
# Replace this file with your own database setup and restart the application to
# see if it works. Contributing your example setup to Slovo is welcome!
$app->log->debug("Loading Mojo::SQLite");
$app->load_class('Mojo::SQLite');    # or Mojo::Pg, or Mojo::Mysql

my ($mode, $moniker) = ($app->mode, $app->moniker);
my $db_file   = $app->resources->child("data/$moniker.$mode.sqlite");
my $config    = {db_foo => 'чудесно!'};
my $SQL_DEBUG = 0;                                                      #4;

# A common db helper - one for all database types. Using it allows you to
# switch to another database adapter just by replacing this file with the
# appropriate one for Mojo::Pg or Mojo::mysql etc.
$app->helper(
  dbx => sub {
    my $sqlite = Mojo::SQLite->new($db_file);

    # database specific code on_connect
    my $dbh = $sqlite->db->dbh;
    $dbh->do($_)
      for (    #Replace it with something else if using MySQL or PostgreSQL
               #http://www.sqlite.org/pragma.html
      'PRAGMA encoding = "UTF-8"', 'PRAGMA temp_store = MEMORY',
      'PRAGMA synchronous = OFF',  'PRAGMA journal_mode=WAL',
      'PRAGMA foreign_keys = ON'
          );
    if ($SQL_DEBUG) {
      $dbh->{Callbacks} = {
        prepare => sub {
          my ($dh, $query, $attrs) = @_;
          my ($package, $filename, $line, $subroutine) = caller($SQL_DEBUG);
          $app->log->debug(
                         "SQL from $subroutine in $filename:$line :\n$query\n");
          return;
        },
        execute => sub {
          $app->log->debug("Executing " . $_[0]->{Statement});
        }
      };
    }
    return $sqlite;
  }
);
$app->dbx->max_connections(3);

# Load migrations from file and migrate to latest version
my $dbx = $app->dbx;
$dbx->migrations->from_file(
                $app->resources->child("data/${\ $app->VERSION}.sql"))->migrate;

# Generated resources
# ./script/slovo generate resources -D dbx -t "groups,users" \
#   -T lib/Slovo/resources/templates --api_dir lib/Slovo/resources
# helpers for most tables
for my $t (qw(groups users)) {
  my $T     = Mojo::Util::camelize($t);
  my $class = "Slovo::Model::$T";
  $app->log->debug("Loading model $class");
  $app->load_class($class);
  $app->helper($t => sub { $class->new(dbx => shift->dbx) });
}

$config;
