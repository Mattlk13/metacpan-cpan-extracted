## no critic: TestingAndDebugging::RequireStrict
package Sah::SchemaR::json_str::hash;

our $DATE = '2022-11-15'; # DATE
our $VERSION = '0.007'; # VERSION

our $rschema = do{my$var={base=>"str",clsets_after_base=>[{description=>"\nThis schema is like the `json_str` schema: it accepts a string that contains\nvalid JSON. The JSON string will not be decoded but you know that the string\ncontains a valid JSON. In addition to that, the JSON must encode a hash\n(JavaScript object). Data will not be valid if it is not a valid JSON or if the\nJSON is not a hash.\n\nNote that unlike the `hash_from_json` schema, a hash data is not accepted by\nthis schema. Data must be a string.\n\n",examples=>[{summary=>"Empty string is not a valid JSON",valid=>0,value=>""},{summary=>"Valid JSON but not a hash",valid=>0,value=>1},{summary=>"Valid JSON but not a hash",valid=>0,value=>"true"},{summary=>"Not a valid JSON literal",valid=>0,value=>"foo"},{summary=>"Valid JSON but not a hash",valid=>0,value=>"\"foo\""},{summary=>"Valid JSON but not a hash",valid=>0,value=>"[]"},{valid=>1,value=>"{\"a\":1,\"b\":2}"},{summary=>"Invalid JSON: missing closing curly bracket",valid=>0,value=>"{\"a\":1"},{summary=>"Invalid JSON: dangling comma",valid=>0,value=>"{\"a\":1,}"}],prefilters=>["JSON::check_decode_hash"],summary=>"A string that contains valid JSON and the JSON encodes a hash (JavaScript object)"}],clsets_after_type=>['$var->{clsets_after_base}[0]'],"clsets_after_type.alt.merge.merged"=>['$var->{clsets_after_base}[0]'],resolve_path=>["str"],type=>"str",v=>2};$var->{clsets_after_type}[0]=$var->{clsets_after_base}[0];$var->{"clsets_after_type.alt.merge.merged"}[0]=$var->{clsets_after_base}[0];$var};

1;
# ABSTRACT: A string that contains valid JSON and the JSON encodes a hash (JavaScript object)

__END__

=pod

=encoding UTF-8

=head1 NAME

Sah::SchemaR::json_str::hash - A string that contains valid JSON and the JSON encodes a hash (JavaScript object)

=head1 VERSION

This document describes version 0.007 of Sah::SchemaR::json_str::hash (from Perl distribution Sah-Schemas-JSON), released on 2022-11-15.

=head1 DESCRIPTION

This module is automatically generated by Dist::Zilla::Plugin::Sah::Schemas during distribution build.

A Sah::SchemaR::* module is useful if a client wants to quickly lookup the base type of a schema without having to do any extra resolving. With Sah::Schema::*, one might need to do several lookups if a schema is based on another schema, and so on. Compare for example L<Sah::Schema::poseven> vs L<Sah::SchemaR::poseven>, where in Sah::SchemaR::poseven one can immediately get that the base type is C<int>. Currently L<Perinci::Sub::Complete> uses Sah::SchemaR::* instead of Sah::Schema::* for reduced startup overhead when doing tab completion.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/Sah-Schemas-JSON>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-Sah-Schemas-JSON>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2022, 2021 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=Sah-Schemas-JSON>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
