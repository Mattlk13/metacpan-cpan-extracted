package Spp::Ast;

use 5.012;
no warnings "experimental";

use Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw(get_spp_ast);

use Spp::Builtin qw(from_json);

sub get_spp_ast {
   return from_json(<<'EOF'
[["spp",["Rules",[["Assert","^"],["Rept",["+",["Branch",[["Rtoken","_"],["Ntoken","Spec"]]]]],["Assert","$"]]]],["_",["Rept",["+",["Branch",[["Rept",["+",["Cclass","s"]]],["Rtoken","_comm"]]]]]],["_comm",["Rules",[["Str","//"],["Till",["Assert","$$"]]]]],["Spec",["Rules",[["Ntoken","Token"],["Rept",["*",["Cclass","s"]]],["Char","="],["Rept",["+",["Branch",[["Rtoken","_"],["Ntoken","Lbranch"],["Ntoken","Branch"],["Ctoken","rule"]]]]],["Branch",[["Char",";"],["Assert","$"]]]]]],["rule",["Branch",[["Ntoken","Group"],["Ntoken","Token"],["Ntoken","Str"],["Ntoken","String"],["Ntoken","Kstr"],["Ntoken","Point"],["Ntoken","Cclass"],["Ntoken","Char"],["Ntoken","Chclass"],["Ntoken","Sym"],["Ntoken","Expr"],["Ntoken","Assert"],["Ntoken","Any"],["Ntoken","Look"],["Ntoken","Not"],["Ntoken","Till"]]]],["Lbranch",["Rules",[["Str","||"],["Rept",["+",["Branch",[["Rtoken","_"],["Ntoken","Branch"],["Ctoken","rule"]]]]],["Str","||"]]]],["Branch",["Rules",[["Char","|"],["Rept",["+",["Branch",[["Rtoken","_"],["Ntoken","Lbranch"],["Ctoken","rule"]]]]],["Char","|"]]]],["Group",["Rules",[["Char","{"],["Rept",["+",["Branch",[["Rtoken","_"],["Ntoken","Lbranch"],["Ntoken","Branch"],["Ctoken","rule"]]]]],["Char","}"]]]],["Token",["Rept",["+",["Chclass",[["Cclass","a"],["Char","-"]]]]]],["Kstr",["Rules",[["Char",":"],["Rept",["+",["Cclass","S"]]]]]],["Point",["Rules",[["Str","0x"],["Rept",["+",["Cclass","x"]]]]]],["Str",["Rules",[["Char","'"],["Rept",["+",["Branch",[["Ntoken","Chars"],["Ntoken","Char"]]]]],["Char","'"]]]],["Chars",["Rept",["+",["Nchclass",[["Char","\\"],["Char","'"]]]]]],["String",["Rules",[["Char","\""],["Rept",["+",["Branch",[["Ntoken","Schars"],["Ntoken","Char"]]]]],["Char","\""]]]],["Schars",["Rept",["+",["Nchclass",[["Char","\\"],["Char","\""]]]]]],["Cclass",["Rules",[["Char","\\"],["Chclass",[["Char","a"],["Char","d"],["Char","h"],["Char","l"],["Char","s"],["Char","u"],["Char","v"],["Char","w"],["Char","x"],["Char","A"],["Char","D"],["Char","H"],["Char","L"],["Char","S"],["Char","U"],["Char","V"],["Char","W"],["Char","X"]]]]]],["Char",["Rules",[["Char","\\"],["Any","."]]]],["Chclass",["Rules",[["Char","["],["Rept",["?",["Ntoken","Flip"]]],["Rept",["+",["Branch",[["Rtoken","_"],["Ntoken","Cclass"],["Ntoken","Char"],["Ntoken","Range"],["Ntoken","Cchar"]]]]],["Char","]"]]]],["Flip",["Char","^"]],["Range",["Rules",[["Cclass","w"],["Char","-"],["Cclass","w"]]]],["Cchar",["Nchclass",[["Cclass","s"],["Char","]"],["Char","/"],["Char","\\"]]]],["Assert",["Branch",[["Str","^^"],["Str","$$"],["Char","$"],["Char","^"]]]],["Any",["Char","."]],["Look",["Rules",[["Ntoken","Rept"],["Rept",["?",["Ntoken","Flag"]]]]]],["Rept",["Chclass",[["Char","?"],["Char","*"],["Char","+"]]]],["Flag",["Char","?"]],["Not",["Char","!"]],["Till",["Char","~"]],["Sym",["Rules",[["Chclass",[["Char","$"],["Char","@"],["Char","%"]]],["Rept",["+",["Chclass",[["Cclass","a"],["Char","-"],["Char","?"],["Char","!"],["Char",">"]]]]]]]],["Expr",["Rules",[["Char","("],["Rept",["+",["Branch",[["Rtoken","_"],["Ctoken","atom"]]]]],["Char",")"]]]],["Array",["Rules",[["Char","["],["Rept",["*",["Branch",[["Rtoken","_"],["Ctoken","atom"]]]]],["Char","]"]]]],["atom",["Branch",[["Ntoken","Int"],["Ntoken","Expr"],["Ntoken","Array"],["Ntoken","Str"],["Ntoken","String"],["Ntoken","Sym"],["Ntoken","Kstr"]]]],["Int",["Rept",["+",["Cclass","d"]]]]]
EOF
) }
1;
