
(def create-cursor($str)
  (my $stim-str (trim $str))
  (return {
    :STR => $trim-str,
    :POS => 0,
    :LEN => (len $trim-str),
    :LOG => [],
  }))

(def add-exprs($atoms)
  (return ($atoms 0) if (1 == (len $atoms)))
  (return [:exprs, $atoms]))

(def all-is-match-atom($atoms)
  (for $atom in $atoms
    (next if (is-match-atom $atom))
    (return false))
  (return true))

(def all-is-spp-array($atoms)
  (if (all-is-match-atom $atoms)
    (return true if ((get-atoms-type $atoms) == :array)))
  (return false))

(def all-is-spp-int($atoms)
  (if (all-is-match-atom $atoms)
    (return true if ((get-atoms-type $atoms) == :int)))
  (return false))

(def all-is-spp-str($atoms)
  (if (all-is-match-atom $atoms)
    (return true if ((get-atoms-type $atoms) == :str)))
  (return false))

(def all-is-spp-sym($atoms)
  (if (all-is-match-atom $atoms)
    (return true if ((get-atoms-type $atoms) == :sym)))
  (return false))

(def get-atoms-type($atoms)
  (my $type ($atoms [0 0]))
  (for $atom in (rest $atoms)
    (next if (($atom 0) == $type))
    (return false))
  (return $type))

(def apply-char($len, %cursor)
  (my $POS (%cursor :POS))
  (my $STR (%cursor :STR))
  (my $LEN (%cursor :LEN))
  (return ''               if ($POS >= $LEN))
  (return (substr $str $pos $len)  if ($len > 0))
  (return (substr $str ($pos + 1) (abs $len)) if ($len < 0))
  (return ($str $POS)      if ($len == 0)))

(def error(message) (say message) (exit))

(def fill-array($value $len)
  (my $fill-array [])
  (for $x in (range 1 $len)
    ($fill-array << $value))
  (return $fill-array))

(def get-token-name($token-name)
  (if ($token-name ~~ '^\.')
    (return (substr $token-name 1)))
  (return $token-name))

(def is-bool(x)
  (if (is-match-atom x)
    (return true if ((x 0) == 'bool')))
  (return false))

(def is-false(x)
  (return true if ((is-bool x) and ((x 1) == :false)))
  (return false))

(def is-fail(x)
  (return true if ((is-false x) or (is-nil x)))
  (return false))

(def is-str(x)
  (return true if ((type x) == :str))
  (return false))

(def is-int(x)
  (return true if ((type x) == :str))
  (return false))

(def is-array(x)
  (return true if ((type x) == :array))
  (return false))

(def is-hash(x)
  (return true if ((type x) == :hash))
  (return false))

(def is-lambda(x)
  (return true if ((type x) == :lambda))
  (return false))

(def is-match-atom(x)
  (if (&& (is-array x) ((len x) == 2) (is-str (x 0)))
    (return true))
  (return false))

(def is-match-atoms($atoms)
  (if (is-array $atoms)
    (for $atom in $atoms
      (next if (is-match-atom $atom))
      (return false))
    (return true))
  (return false))
      
(def is-match(x)
  (return false if (is-false x))
  (return true if (is-true x))
  (return true if (is-str x))
  (retrun true if (is-match-atom x))
  (return true if (is-match-atoms x))
  (return false))

(def name-match(name match)
  (return false if (is-fail match))
  (return true  if (is-true match))
  (return [name match] if (is-str match))
  (return match if (name ~~ '^[a-z-]'))
  (return [name [match]] if (is-pair match))
  (return [name match]))

(def gather-match(gather match)
  (return match if (is-true gather))
  (if (is-str gather)
    (return gather if (is-true match))
    (return (gather + match) if (is-str match))
    (return match if (is-array match)))
  (if (is-array gather)
    (return gather if (or (is-true match) (is-str match)))
    (if (is-array match)
      (if (is-pair gather)
        (return [gather, match] if (is-pair match))
        (return (gather >> match) if (is-pairs match)))
      (if (is-pairs gather)
        (return (gather << match) if (is-pair match))
        (return (gather + match) if (is-pairs match)))))
  (error "{gather} could not gather {match}"))
