(ok nil nil)
(ok false false)
(ok true true)
(ok 1 1)
(ok -1 -1)
(ok x x)
(ok 'str' 'str')
(ok "str" "str")
(ok [] [])
(ok [1] [1])
(ok {} {})
(ok {a b} {a b})
(ok ('str' 0) 's')
(ok ('str' 1) 't')
(ok ('str' 1 -1) 'tr')
(ok ([1 2 3] 0) 1)
(ok ([0 1 2] 1 -1) [1 2])
(ok ({a b c d} a) b)
(ok (bool false) false)
(ok (bool true) true)
(ok (bool 0) true)
(ok (bool 1) true)
(ok (bool -1) true)
(ok (bool 'str') true)
(ok (bool x) true)
(ok (not false) true)
(ok (not true) false)
(ok (not 0) false)
(ok (not 1) false)
(ok (not 'str') false)
(ok (not x) false)
(ok (and nil 1 true) false)
(ok (and true nil true) false)
(ok (and true 1 'str') true)
(ok (or nil 1) true)
(ok (or true nil) true)
(ok (or nil nil) false)
(ok (1 + 2) 3)
(ok (+ 1 2 3) 6)
(ok ('a' + 'b') 'ab')
(ok ([1 2] + [3 4]) [1 2 3 4])
(ok (2 - 1) 1)
(ok (- 6 3) 3)
(ok (1 == 1) true)
(ok ('a' == 'a') true)
(ok (x == x) true)
(ok ([] == []) true)
(ok ({} == {}) true)
(ok ([1 2] == [1 2]) true)
(ok ({1 2} == {1 2}) true)
(ok (trim 'ab') 'ab')
(ok (trim ' ab') 'ab')
(ok (trim ' a ') 'a')
(ok (type xx) 'sym')
(ok (type 1) 'int')
(ok (type 'a') 'str')
(ok (type [1]) 'array')
(ok (type ['a']) 'array')
(ok (type nil) 'nil')
(ok (type true) 'bool')
(ok (type false) 'bool')
(ok (type []) 'array')
(ok (type {}) 'hash')
(ok (type {a b}) 'hash')
(ok (false == nil) false)
(ok (false != nil) true)
(ok (2 == 2) true)
(ok (2 != 2) false)
(ok (2 > 1) true)
(ok (2 < 1) false)
(ok (1 >= 1) true)
(ok (1 < 1) false)
(ok (1 < 2) true)
(ok (1 <= 1) true)
(ok (len 'str') 3)
(ok (len [1 2 3]) 3)
(ok ('str' ~~ 'str') true)
(ok ('str' ~~ 's') true)
(ok ('str' ~~ 'r') true)
(ok ('str' ~~ '^[a-z]') true)
(ok ('\n'  ~~ '\n') true)
(ok (hello in [hello, w||ld]) true)
(ok ('str' in ['str', 'hello']) true)
(ok (1 in [1 2 3]) true)
(ok (split 'str') ['s' 't' 'r'])
(ok (split 'str' 't') ['s' 'r'])
(ok (join (split 'str')) 'str')
(ok (join (split 'str' 't') 't') 'str')
(ok (begin (my x) (x = [])  (x << 'a')) ['a'])
(ok (begin (x = [])  (x << 1)) [1])
(ok (begin (x = [])  (x << [3])) [[3]])
(ok (begin (x = [0]) (x << 'a')) [0 'a'])
(ok (begin (x = [0]) (x << 1)) [0 1])
(ok (begin (x = [0]) (x << z)) [0 z])
(ok (begin (x = [0]) (x << 'a')) [0 'a'])
(ok (begin (x = [])  ('a' >> x)) ['a'])
(ok (begin (x = [])  (1 >> x))   [1])
(ok (begin (x = [])  (z >> x))   [z])
(ok (begin (x = [0]) (1 >> x))   [1 0])
(ok (begin (x = [0]) ('a' >> x)) ['a' 0])
(ok (begin (x = [0]) (z >> x))   [z 0])
(ok ('str' ~~ :{ 'str' }) 'str')
(ok ('str' ~~ :{ 's' }) 's')
(ok ('str' ~~ :{ str }) 'str')
(ok ('str' ~~ :{ s }) 's')
(ok ('str' ~~ :{ s | st | str }) 'str')
(ok ('str' ~~ :{ s || st || str }) 's')
(ok ('str' ~~ :{ < s st str > }) 'str')
(ok ('str' ~~ :{ \w }) 's')
(ok ('str' ~~ :{ \w+ }) 'str')
(ok ('sss' ~~ :{ .*? s }) 's')
(ok ('sss' ~~ :{ .+? s }) 'ss')
(ok ('str' ~~ :{ tr }) false)
(def is-false(x) (x == false)) (ok (is-false false) true)
(ok (is-false nil) false)
(ok (is-false true) false)
(ok (is-false 'str') false)
(ok (is-false [1 2]) false)
(def is-str(x) (:str == (type x))) (ok (is-str 'str') true)
(ok (is-str :str) true)
(ok (is-str '\n') true)
(ok (is-str "str") true)
(ok (is-str false) false)
(ok (is-str nil) false)
(ok (is-str [1 2]) false)
(def is-true(x) (x == true)) (ok (is-true true) true)
(ok (is-true false) false)
(ok (is-true :str) false)
(ok (is-true [1 2]) false)
(def is-array(x) (:array == (type x))) (ok (is-array [1 2]) true)
(ok (is-array []) true)
(ok (is-array [a b]) true)
(ok (is-array true) false)
(ok (is-array :str) false)
(ok (is-array false) false)
(ok (is-array nil) false)
(ok (is-array 'str') false)
(ok (type 1) :int)
(ok (type :str) :str)
(ok (type []) :array)
(ok (type {}) :hash)
(ok (type xxx) :sym)
(ok (type :{a}) :rule)
(def first(x) (x 0)) (ok (first 'str') 's')
(ok (first [0, 1]) 0)
(ok (first [[1],[0]]) [1])
(ok (first [:str, :-]) :str)
(def last(x) (x -1)) (ok (last 'str') 'r')
(ok (last [0, 1]) 1)
(ok (last [[1], [0]]) [0])
(ok (last [:str, :-]) :-)
(ok (rest 'str') 'tr')
(ok (rest [1 2]) [2])
(ok (rest [[1] [2]]) [[2]])
(ok (rest [:str, :-]) [:-])
(ok (to-i :1) 1)
(ok (to-i '1') 1)
(ok ('str' 0) 's')
(ok ('01234' 0 3) '0123')
(ok ('01234' 1 -1) '1234')
(ok ([1 2] 0) 1)
(ok ([0 1 2 3] 0 2) [0 1 2])
(ok ([0 1 2 3] 0 -2) [0 1 2])
(ok ([1 [2 3]] [1 0]) 2)
(ok (begin (my one {:a => :b}) (set one :a :f)) {:a => :f})
(my two {:c => {:d => :e}}) (ok (set two :c :d :f) {:c => {:d => :f}})
(my (a b c) [0 0 0]) (ok (== a b c) true)
(ok (+ 1 2 3) 6)
(ok (begin (x = 1) (x += 1) x) 2)
(ok (begin (x = 3) (x = 1 if (x == 3)) x) 1)
(ok (if x y) y)
(ok (if (not x) y else z) z)
(ok (begin (x = 2) (if (x == 1) (x = 2) elsif (x == 2) (x = 1)) x) 1)
(ok (begin (x = str) (case x (when ab (x = 1)) (when str (x = 2))) x) 2)
(x = 'str') (ok "x is {x}" 'x is str')
(ok (begin (my y 0) (for x in [1 2 3] (y = x)) y) 3)
(ok (delete [1 2 3] 2) [1 3])
(ok (delete [1] 1) [])
(ok (delete {:a :b :c :d} :a) {:c :d})
(ok (delete {:a :b} :a) {})
(ok (substr 'str' 1 2) 'tr')
(ok (begin (delete x) x) x)
(ok (exists :perl-spp.pl) true)
(ok (exists :hello) false)
(ok (exists {a b c d} a) true)
(ok (type (def (x) (x 0))) :lambda)
(ok (begin (my x [1 2 3]) (y = (delete x 2)) y) [1 3])
(ok (begin (x = {:a :b :c :d}) (x = (delete x :a)) x) {:c :d})
(ok (begin (delete x) (my x {a b c d}) (exists x a)) true)
(context Test) (def first(x) (x 0)) (ok (first 'str') 's') (end Test) 
(ok (Test.first 'str') 's')
(ok (begin (my ar []) (for f in [1 2 3] (next if (f == 2)) (ar << f)) ar) [1 3])
(ok (begin (x = 1) (while (x < 4) (x += 1)) x) 4)
(def call-it-self(x) (return 1 if (x == 1)) (return (x + (call-it-self (x - 1))))) (ok (call-it-self 10) 55)
