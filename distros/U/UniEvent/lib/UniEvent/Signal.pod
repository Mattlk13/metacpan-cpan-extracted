=head1 NAME

UniEvent::Signal - runs callbacks upon UNIX signals

=head1 SYNOPSIS

    use UniEvent::Signal; # for constants

    my $loop = UniEvent::Loop->new;
    # handy way
    my $h = UniEvent::Signal::watch(SIGINT, sub { say "got SIGINT" }, $loop);

    # more verbose way
    my $h = UniEvent::Signal->new($loop);
    $h->start(SIGINT, sub {
        my ($h, $signal) = @_;
        say "got signal $signal";
    });
    $loop->run;

    # one shot signal watcher
    $h->once(SIGTERM);

=head1 DESCRIPTION

Allow to check UNIX signals and, if a signal appears, execute approprate
handlers during loop iteration. One callback is capable to handle
multiple signals if needed.

It is inherited from L<UniEvent::Handle>.

=head1 FUNCTIONS

=head2 watch($signal, $callback [, $loop = UniEvent::Loop->default_loop])

Handy function which creates handler, sets the C<$callback> and marks
the C<$signal> for permanent watching for the next event loop iterations.

Returns the signal handler.

=head1 METHODS

=head2 new([$loop = UniEvent::Loop->default_loop])

Constructs new Signal handle and binds it to the specified event loop.

=head2 start($signal, [$callback = undef])

Marks C<$signal> to be B<permanently> handled in the next event loop iterations.
Optionally it adds the C<$callback> to the existing event listeners.

=head2 stop()

Stops the singal handle, i.e. makes it inactive for the next event loop
iteration.

=head2 callback($code)

Sets the callback, which will be invoked upon the interested signals. All previously
set event listeners or callbacks are discarded.

=head2 event()

Returns L<XS::Framework::CallbackDispatcher> instance, where callback(s)
can be assigned with. The callbacks will be invoked upon signal in
loop iteration.

The C++ interface is:

    void(const SignalSP& handle, int signum)

On perl side it the callbacks will be called:

    $callback->($handle, $signal);

Multiple callbacks can be added via the L<XS::Framework::CallbackDispatcher>
interface.

=head2 event_listener($delegate [, $weak = false])

Creates and returns wrapper around the C<$delegate> object of arbitrary
class, having the following methods:

  $delegate->on_signal($handle, $signal);

The delegated object can be seen as alternative of setting indivitual callbacks
or as a way of groupping them. The C<$delegate> object can optionally be weakened.

=head2 call_now($signal)

Immediately ivokes assigned callbacks and listeners in the caller context
(i.e. not waiting loop run) with the given signal.

=head2 once($signal [, $callback = undef])

B<Temporally> marks C<$signal> to be watched in the next event loop iteration(s).
Upon C<$signal> receiving, callback will no longer watch for it.

Optionally it adds the C<$callback> to the existing event listeners.


=head1 CONSTANTS

=head2 SIGNAL NAMES

Some signals might be not available for particular platforms.

=head3 SIGINT

=head3 SIGILL

=head3 SIGABRT

=head3 SIGFPE

=head3 SIGSEGV

=head3 SIGTERM

=head3 SIGHUP

=head3 SIGQUIT

=head3 SIGTRAP

=head3 SIGBUS

=head3 SIGKILL

=head3 SIGUSR1

=head3 SIGUSR2

=head3 SIGPIPE

=head3 SIGALRM

=head3 SIGSTKFLT

=head3 SIGCHLD

=head3 SIGCONT

=head3 SIGSTOP

=head3 SIGTSTP

=head3 SIGTTIN

=head3 SIGTTOU

=head3 SIGURG

=head3 SIGXCPU

=head3 SIGXFSZ

=head3 SIGVTALRM

=head3 SIGPROF

=head3 SIGWINCH

=head3 SIGIO

=head3 SIGPOLL

=head3 SIGPWR

=head3 SIGSYS

=head2 TYPE

Signal type constant

=head1 REFERENCES

L<UniEvent::Handle>

L<XS::Framework::CallbackDispatcher>

=cut
