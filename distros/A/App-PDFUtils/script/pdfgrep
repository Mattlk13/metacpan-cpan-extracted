#!perl

# Note: This script is a CLI for Riap function /App/pdfgrep/pdfgrep
# and generated automatically using Perinci::CmdLine::Gen version 0.499

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2021-07-17'; # DATE
our $DIST = 'App-PDFUtils'; # DIST
our $VERSION = '0.007'; # VERSION

use 5.010001;
use strict;
use warnings;
use Log::ger;

use Perinci::CmdLine::Any;

my $cmdline = Perinci::CmdLine::Any->new(
    url => "/App/pdfgrep/pdfgrep",
    program_name => "pdfgrep",
    log => 1,
    read_config => 0,
    read_env => 0,
);

$cmdline->{common_opts}{version}{getopt} = "version|V";

$cmdline->run;

# ABSTRACT: Print lines matching text in PDF files
# PODNAME: pdfgrep

__END__

=pod

=encoding UTF-8

=head1 NAME

pdfgrep - Print lines matching text in PDF files

=head1 VERSION

This document describes version 0.007 of pdfgrep (from Perl distribution App-PDFUtils), released on 2021-07-17.

=head1 SYNOPSIS

Usage:

% B<pdfgrep> [B<--all>] [B<--color>=I<str>] [B<--count>|B<-c>] [B<--dash-prefix-inverts>|B<--no-dash-prefix-inverts>|B<--nodash-prefix-inverts>] [B<--debug>|B<--log-level>=I<level>|B<--quiet>|B<--trace>|B<--verbose>] [(B<--file>=I<filename>)+] [B<--format>=I<name>|B<--json>] [B<--ignore-case>|B<-i>|B<--no-ignore-case>|B<--noignore-case>] [B<--invert-match>|B<-v>|B<--no-invert-match>|B<--noinvert-match>] [B<--line-number>|B<-n>] [B<--(no)naked-res>] [B<--page-result>[=I<program>]|B<--view-result>[=I<program>]] [B<--quiet-arg>] [(B<--regexp>=I<str>)+] [B<--files-json>=I<json>] [B<--regexps-json>=I<json>|(B<-e>=I<str>)+] [B<-q>|B<--silent>] -- [I<pattern>] [I<file>] ...

=head1 DESCRIPTION

This is a wrapper for pdftotext + grep-like utility that is based on
L<AppBase::Grep>. The unique features include multiple patterns and
C<--dash-prefix-inverts>.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--file>=I<s@>

If not specified, will search for all PDF files recursively from the current
directory.


Can also be specified as the 2nd command-line argument and onwards.

Can be specified multiple times.

=item B<--files-json>=I<s>

See C<--file>.

Can also be specified as the 2nd command-line argument and onwards.

=item B<--pattern>=I<s>

Can also be specified as the 1st command-line argument.

=item B<--regexp>=I<s@>

Can be specified multiple times.

=item B<--regexps-json>=I<s>

See C<--regexp>.

=item B<-e>=I<s@>

Alias for --regexp.

See C<--regexp>.

Can be specified multiple times.

=back

=head2 General output control options

=over

=item B<--color>=I<s>

Default value:

 "auto"

Valid values:

 ["never","always","auto"]

=item B<--count>, B<-c>

Supress normal output, return a count of matching lines.

=item B<--quiet-arg>, B<--silent>, B<-q>

=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Matching control options

=over

=item B<--all>

Require all patterns to match, instead of just one.

=item B<--dash-prefix-inverts>

When given pattern that starts with dash "-FOO", make it to mean "^(?!.*FOO)".

This is a convenient way to search for lines that do not match a pattern.
Instead of using `-v` to invert the meaning of all patterns, this option allows
you to invert individual pattern using the dash prefix, which is also used by
Google search and a few other search engines.


=item B<--ignore-case>, B<-i>

=item B<--invert-match>, B<-v>

Invert the sense of matching.

=back

=head2 Output line prefix control options

=over

=item B<--line-number>, B<-n>

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--page-result>

Filter output through a pager.

=item B<--view-result>

View output using a viewer.

=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-V>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C pdfgrep pdfgrep

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete pdfgrep 'p/*/`pdfgrep`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-PDFUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-PDFUtils>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-PDFUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2021, 2020, 2017 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
