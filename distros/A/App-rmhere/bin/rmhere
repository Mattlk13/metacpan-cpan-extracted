#!perl

our $DATE = '2015-09-03'; # DATE
our $VERSION = '0.06'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;
Perinci::CmdLine::Any->new(url => '/App/rmhere/rmhere')->run;

1;
# ABSTRACT: Delete files in current directory
# PODNAME: rmhere

__END__

=pod

=encoding UTF-8

=head1 NAME

rmhere - Delete files in current directory

=head1 VERSION

This document describes version 0.06 of rmhere (from Perl distribution App-rmhere), released on 2015-09-03.

=head1 SYNOPSIS

In a directory with many files which you want to delete:

 % rmhere -f

To show progress:

 % rmhere -fp

To show progress and count the number of files first (so it'll show percentage
up to 100% and estimated completion time):

 % rmhere -fP

Delete recursively, set location:

 % rmhere -Rf --here /tmp/files

Don't actually delete files, only show:

 % rmhere -f --dry-run

Only delete files matching a wildcard:

 % rmhere --nodir -R --match '*.txt'

=head1 DESCRIPTION

NOTE: Early release, some options not yet implemented: --dir, --file, --match,
--recursive.

When deleting many files in a directory (thousands, millions), the venerable
L<rm> Unix command is rather cumbersome to use. If you issue C<rm *> the shell
will usually complain with "Argument list too long" because it expands the
wildcard first. You can also use C<< find ./ -type f -maxdepth 1 -delete >>.
This B<rmhere> command is equivalent to that, with some extra options and
features:

=over

=item * Progress report

=item * Dry-run

Just set DRY_RUN=1 or C<--dry-run> to enter dry-run (simulation) mode.

=item * Recursive option

Using C<-R>.

=back

For safety, the default behavior is C<-i>. That means, if B<rmhere> is executed
without argument, it will ask before deleting each file.

=head1 OPTIONS

C<*> marks required options.

=head2 Configuration options

=over

=item B<--config-path>=I<filename>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--no-config>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--estimate>

Count files first before start deleting.

With this opotion, the program will do an `opendir` and list the directory
first. This can take several minutes if the directory is large, so the program
will not start deleting after several minutes. But with this option, we know how
many files we want to delete, so the progress report will know when to reach
100%.


=item B<--force>

Equivalent to --nointeractive.

See C<--no-interactive>.

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--here>=I<s>

Override current directory.

=item B<--no-interactive>, B<-i>

=item B<--progress>, B<-p>

Show progress report.

=item B<--version>, B<-v>

Display program's version and exit.

=item B<-f>

Equivalent to --nointeractive.

See C<--no-interactive>.

=item B<-P>

Equivalent to --progress --estimate.

See C<--progress>.

=back

=head1 PERFORMANCE NOTES

My system: customer SATA HDD 7200rpm, Debian/Linux, ext3fs, Core i5-2400 3.1GHz.
B<rmhere> performs worse than B<rm> for small to medium number of files (1-200k
files), but as the number of files approaches 1+ million, there are practically
no difference in performance as the bottleneck lies in the filesystem. Some
numbers:

Creating 200k files using C<< touch `seq 1 200000` >>: 5s.

Deleting 200k files using C<< rm >>: 6s.

Deleting 200k files using C<< rmhere -fP >>: 1m10s.

Creating 1 million files using C<< touch `seq 1 200000`;touch `seq 200001
400000`;touch `seq 400001 600000`; touch `seq 600001 800000`; touch `seq 800001
1000000` >>: 32s.

Deleting 1 million files using C<< rm >> fails ("Argument list too long").

Deleting 1 million files using C<< find -type f | xargs -n 50000 rm >>: about
30m.

Deleting 1 million files using C<< rmhere -fP >>: about 30m.

=head1 SEE ALSO

L<rm>, L<find>

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C rmhere rmhere

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install L<shcompgen> which allows you to
activate completion scripts for several kinds of scripts on multiple shells.
Some CPAN distributions (those that are built with
L<Dist::Zilla::Plugin::GenShellCompletion>) will even automatically enable shell
completion for their included scripts (using C<shcompgen>) at installation time,
so you can immadiately have tab completion.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete rmhere 'p/*/`rmhere`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 ENVIRONMENT

=head2 RMHERE_OPT => str

Specify additional command-line options

=head1 CONFIGURATION FILE

This script can read configuration file, which by default is searched at C<~/.config/rmhere.conf>, C<~/rmhere.conf> or C</etc/rmhere.conf> (can be changed by specifying C<--config-path>). All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

Configuration file is in the format of L<IOD>, which is basically INI with some extra features. 

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

List of available configuration parameters:

 estimate (see --estimate)
 format (see --format)
 here (see --here)
 interactive (see --no-interactive)
 naked_res (see --naked-res)
 progress (see --progress)

=head1 FILES

~/.config/rmhere.conf

~/rmhere.conf

/etc/rmhere.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-rmhere>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-rmhere>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-rmhere>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2015 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
