NAME
    App::EANUtils - Utilities related to EAN (International/European Article
    Number)

VERSION
    This document describes version 0.003 of App::EANUtils (from Perl
    distribution App-EANUtils), released on 2023-01-28.

SYNOPSIS
DESCRIPTION
    This distribution includes several utilities related to EAN
    (International/European Article Number):

    *   calc-ean13

    *   calc-ean8

    *   check-ean13

    *   check-ean8

FUNCTIONS
  calc_ean13
    Usage:

     calc_ean13(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Calculate check digit of EAN-13 number(s).

    Examples:

    *   Calculate a single number:

         calc_ean13(numbers => ["5-901234-12345"]); # -> [200, "OK", [5901234123457], {}]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   numbers* => *array[ean13_without_check_digit]*

        EAN-13 numbers without the check digit.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  calc_ean8
    Usage:

     calc_ean8(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Calculate check digit of EAN-8 number(s).

    Examples:

    *   Calculate a single number:

         calc_ean8(numbers => ["9638-507"]); # -> [200, "OK", [96385074], {}]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   numbers* => *array[ean8_without_check_digit]*

        EAN-8 numbers without the check digit.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  check_ean13
    Usage:

     check_ean13(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check EAN-13 number(s).

    Examples:

    *   Check a single EAN-13 number (valid, exit code will be zero, message
        will be printed to STDOUT):

         check_ean13(ean13_numbers => ["5-901234-123457"]);

        Result:

         [
           200,
           "All success",
           undef,
           {
             results => [{ item_id => 5901234123457, message => "OK", status => 200 }],
           },
         ]

    *   Check a single EAN-13 number (valid, exit code will be zero, no
        message):

         check_ean13(ean13_numbers => ["5-901234-123457"], quiet => 1);

        Result:

         [
           200,
           "All success",
           undef,
           {
             results => [{ item_id => 5901234123457, message => "OK", status => 200 }],
           },
         ]

    *   Check a single EAN-13 number (invalid, exit code is non-zero,
        message output to STDOUT):

         check_ean13(ean13_numbers => ["5-901234-123450"]);

        Result:

         [
           400,
           "Invalid checksum digit",
           undef,
           {
             results => [
               {
                 item_id => 5901234123450,
                 message => "Invalid checksum digit",
                 status  => 400,
               },
             ],
           },
         ]

    *   Check a single EAN-13 number (invalid, exit code is non-zero, no
        message):

         check_ean13(ean13_numbers => ["5-901234-123450"], quiet => 1);

        Result:

         [
           400,
           "Invalid checksum digit",
           undef,
           {
             results => [
               {
                 item_id => 5901234123450,
                 message => "Invalid checksum digit",
                 status  => 400,
               },
             ],
           },
         ]

    Exit code will be non-zero all numbers are invalid. To check for
    individual numbers, use the JSON output.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   ean13_numbers* => *array[ean13_unvalidated]*

        (No description)

    *   quiet => *bool*

        If set to true, don't output message to STDOUT.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  check_ean8
    Usage:

     check_ean8(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check EAN-8 number(s).

    Examples:

    *   Check a single EAN-8 number (valid, exit code will be zero, message
        output to STDOUT):

         check_ean8(ean8_numbers => ["9638-5074"]);

        Result:

         [
           200,
           "All success",
           undef,
           {
             results => [{ item_id => 96385074, message => "OK", status => 200 }],
           },
         ]

    *   Check a single EAN-8 number (valid, exit code will be zero, no
        message):

         check_ean8(ean8_numbers => ["9638-5074"], quiet => 1);

        Result:

         [
           200,
           "All success",
           undef,
           {
             results => [{ item_id => 96385074, message => "OK", status => 200 }],
           },
         ]

    *   Check a single EAN-8 number (invalid, exit code is non-zero, message
        output to STDOUT):

         check_ean8(ean8_numbers => ["9638-5070"]);

        Result:

         [
           400,
           "Incorrect check digit",
           undef,
           {
             results => [
               { item_id => 96385070, message => "Incorrect check digit", status => 400 },
             ],
           },
         ]

    *   Check a single EAN-8 number (invalid, exit code is non-zero, no
        message):

         check_ean8(ean8_numbers => ["9638-5070"], quiet => 1);

        Result:

         [
           400,
           "Incorrect check digit",
           undef,
           {
             results => [
               { item_id => 96385070, message => "Incorrect check digit", status => 400 },
             ],
           },
         ]

    Exit code will be non-zero all numbers are invalid. To check for
    individual numbers, use the JSON output.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   ean8_numbers* => *array[ean8_unvalidated]*

        (No description)

    *   quiet => *bool*

        If set to true, don't output message to STDOUT.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-EANUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-EANUtils>.

SEE ALSO
    More general utilities related to check digits: App::CheckDigitsUtils

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2023 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-EANUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

