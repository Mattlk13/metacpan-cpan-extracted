#!perl

our $DATE = '2021-04-04'; # DATE
our $VERSION = '0.015'; # VERSION

use 5.010;
use strict;
use warnings;
use Log::ger; BEGIN { $ENV{LOG_LEVEL} //= 'info' }

use Perinci::CmdLine::Any;
use Perinci::CmdLineX::CommonOptions::SelfUpgrade;

my $prefix = "/App/swcat/";

my $cli = Perinci::CmdLine::Any->new(
    url => $prefix,
    log => 1,
    subcommands => {
        'archive-info' => {url=>"${prefix}archive_info"},
        'available-archs' => {url=>"${prefix}available_archs"},
        'available-versions' => {url=>"${prefix}available_versions"},
        'download-url' => {url=>"${prefix}download_url"},
        'list-cpan' => {url=>"${prefix}list_cpan"},
        'list-installed' => {url=>"${prefix}list_installed"},
        'latest-version' => {url=>"${prefix}latest_version"},
        'release-note' => {url=>"${prefix}release_note"},
    },
);
Perinci::CmdLineX::CommonOptions::SelfUpgrade->apply_to_object($cli);
$cli->run;

# ABSTRACT: Software catalog
# PODNAME: swcat

__END__

=pod

=encoding UTF-8

=head1 NAME

swcat - Software catalog

=head1 VERSION

This document describes version 0.015 of swcat (from Perl distribution App-swcat), released on 2021-04-04.

=head1 SYNOPSIS

 # list software known by local installation (known = has correponding
 # Software::Catalog::SW::* module installed)
 % swcat list-installed
 % swcat list-installed -l  ;# detail

 # list software known by App::swcat (list all available
 # Software::Catalog::SW::* modules on CPAN)
 % swcat list-cpan

 # what is the latest version number of a software?
 % swcat latest-version firefox  ;# by default will be cached for a day
 % swcat latest-version firefox --no-cache

 # what is the latest version number of a few software
 % swcat latest-version firefox seamonkey

 # list the latest version numbers of all known software
 % swcat latest-version

 # list the latest version numbers of known software matching a regex
 % swcat latest-version /fire|sea/

 # get list of available versions of a software
 % swcat available-versions bulwark-qt

 # get release note for the latest version of a software
 % swcat release-note bulwark-qt

 # get release note for a version of a software
 % swcat release-note bulwark-qt 1.3.0

 # get download URL(s) of a software
 % swcat download-url firefox
 % swcat download-url firefox --arch win32

To actually download, install, upgrade software, use L<instopt> (from
App::instopt).

=head1 SUBCOMMANDS

=head2 B<archive-info>

Get info of a software archive.

=head2 B<available-archs>

Get list of available architectures of a software.




=head2 B<available-versions>

Get list of available versions of a software.




=head2 B<download-url>

Get download URL(s) of a software.

Will return the version number in the payload if given a single software name.
Will return an array of {software=>..., version=>...} in the payload if given
multiple software names or one or more patterns.


=head2 B<latest-version>

Get latest version of one or more software.

Will return the version number in the payload if given a single software name.
Will return an array of {software=>..., version=>...} in the payload if given
multiple software names or one or more patterns.


=head2 B<list-cpan>

List available known software in the catalog (from Software::Catalog::SW::* modules on CPAN).

=head2 B<list-installed>

List known software in the catalog (from installed Software::Catalog::SW::* modules).

=head2 B<release-note>

Get release note of (a version of) a software.

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--cache-period>=I<s>

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--db-path>=I<s>

Location of SQLite database (for caching), defaults to ~/.cache/swcat.db.

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--json>

Set output format to json.

=item B<--log-level>=I<s>

Set log level.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--no-cache>

Alias for --cache-period=-1.

See C<--cache-period>.

=item B<--no-config>, B<-C>

Do not use any configuration file.

=item B<--no-env>

Do not read environment for default options.

=item B<--page-result>

Filter output through a pager.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--self-upgrade>, B<-U>

Update program to latest version from CPAN.

=item B<--subcommands>

List available subcommands.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=item B<--version>, B<-v>

Display program's version and exit.

=item B<--view-result>

View output using a viewer.

=back

=head2 Options for subcommand archive-info

=over

=item B<--arch>=I<s>

=item B<--software>=I<s>*

=back

=head2 Options for subcommand available-archs

=over

=item B<--software>=I<s>*

=back

=head2 Options for subcommand available-versions

=over

=item B<--software>=I<s>*

=back

=head2 Options for subcommand download-url

=over

=item B<--arch>=I<s>

=item B<--software-or-pattern>=I<s@>

Can be specified multiple times.

=item B<--softwares-or-patterns-json>=I<s>

See C<--software-or-pattern>.

=back

=head2 Options for subcommand latest-version

=over

=item B<--software-or-pattern>=I<s@>

Can be specified multiple times.

=item B<--softwares-or-patterns-json>=I<s>

See C<--software-or-pattern>.

=back

=head2 Options for subcommand list-cpan

=over

=item B<--detail>, B<-l>

=item B<--lcpan>

=back

=head2 Options for subcommand list-installed

=over

=item B<--detail>, B<-l>

=back

=head2 Options for subcommand release-note

=over

=item B<--arch>=I<s>

=item B<--software>=I<s>*

=item B<--version-arg>=I<s>

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C swcat swcat

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete swcat 'p/*/`swcat`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/swcat.conf>, F<~/swcat.conf>, or F</etc/swcat.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

=head2 Common for all subcommands

 cache_period (see --cache-period)
 db_path (see --db-path)
 format (see --format)
 log_level (see --log-level)
 naked_res (see --naked-res)

=head2 Configuration for subcommand archive-info

 arch (see --arch)
 software (see --software)

=head2 Configuration for subcommand available-archs

 software (see --software)

=head2 Configuration for subcommand available-versions

 software (see --software)

=head2 Configuration for subcommand download-url

 arch (see --arch)
 softwares_or_patterns (see --software-or-pattern)

=head2 Configuration for subcommand latest-version

 softwares_or_patterns (see --software-or-pattern)

=head2 Configuration for subcommand list-cpan

 detail (see --detail)
 lcpan (see --lcpan)

=head2 Configuration for subcommand list-installed

 detail (see --detail)

=head2 Configuration for subcommand release-note

 arch (see --arch)
 software (see --software)
 version (see --version-arg)

=head1 ENVIRONMENT

=head2 SWCAT_OPT => str

Specify additional command-line options.

=head1 FILES

F<~/.config/swcat.conf>

F<~/swcat.conf>

F</etc/swcat.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-swcat>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-swcat>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://github.com/perlancar/perl-App-swcat/issues>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<Software::Catalog>

L<App::SoftwareCatalogUtils>

L<instopt> from L<App::instopt>

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2021, 2019, 2018 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
