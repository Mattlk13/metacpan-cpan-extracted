#!perl

=head1 NAME

file_cleaner_by_du - Removes files based on disk space usage till it drops below the specified amount.

=head1 SYNOPSIS

file_cleaner_by_du B<-p> <path> B<-d> <du> [B<-m> <min_files>] [B<--pretty>] [B<--dry_run>]
[B<-q>] [B<-w> <file>] [B<--pid>] [B<--pid_name> <name>] [B<--pid_dir> <dir>]

file_cleaner_by_du --version

file_cleaner_by_du --help

=head1 DESCRIPTION

This works via doing the following.

1: Check if disk usage is above the specified threshold. If not it ends here.

2: Search for files under the specified path.

3: If the number of found files is less than the number of files to keep regardless
of disk size it ends here. So if min_files is set to 32 and there are only 3 files,
then it would just return.

4: Get the stats for all the found files.

5: If min_files is specified, remove that many of the files from the list, starting
with the newest.

6: Removes the oldest file.

7: Check disk usage again and if it is less it ends here.

8: Go back to 6.

The results are then printed as JSON. To find information on the keys, please
see L<App::FileCleanerByDiskUage>.

If there were no errors, it will exit zero.

=head1 FLAGS

=head2 -d <du>

Target disk usage.

=head2 -p <path>

The path to operate on.

This may be specified more than once. Only the first is used for getting usage, so it shoudld not cross partitions.

Paths that are on different mount points run the risk of removing to much as it is never checking the proper partition.

=head2 --dry_run

Do not actually delete anything. Instead just check if what it would delete
is writable by the current user.

=head2 -i <regex>

Optional ignore regex.

=head2 -i <min files>

Optional minimum number of files to keep regardless of disk usage.

=head2 --pretty

Pretty print the results.

=head2 --version

Print version.

=head2 --help

Print help,

=head2 --pid

Use a PID file.

=head2 --pid_name <pid name>

Append this to the the name of the pid file created. If specified with a
value of 'foo' then the file would be 'file_cleaner_by_du-foo.pid

=head2 --pid_dir <pid dir>

Dir to create the pid file under.

Default: /var/run

=head2 -w <file>

Write the results out to this file.

=head2 -q

Don't print the results out.

=cut

use strict;
use warnings;
use Getopt::Long;
use JSON;
use App::FileCleanerByDiskUage;
use File::Slurp;
use Pod::Usage;

sub version {
	print 'file_cleaner_by_du v. ' . $App::FileCleanerByDiskUage::VERSION . "\n";
}

my $help;
my $version;
my $du;
my @path;
my $ignore;
my $min_files;
my $pretty;
my $dry_run;
my $use_pid;
my $pid_name;
my $pid_dir;
my $write_file;
my $be_quiet;
GetOptions(
	'd=s'        => \$du,
	'p=s'        => \@path,
	'i=s'        => \$ignore,
	'm=s'        => \$min_files,
	'help'       => \$help,
	'version'    => \$version,
	'pretty'     => \$pretty,
	'dry_run'    => \$dry_run,
	'pid'        => \$use_pid,
	'pid_name=s' => \$pid_name,
	'pid_dir=s'  => \$pid_dir,
	'w=s'        => \$write_file,
	'q'          => \$be_quiet,
);

if ($version) {
	&version;

	exit 255;
}

if ($help) {
	&version;

	print "\n\n";

	pod2usage( -exitval => 255, -verbose => 2 );
}

my $results = App::FileCleanerByDiskUage->clean(
	path      => \@path,
	du        => $du,
	min_files => $min_files,
	dry_run   => $dry_run,
	use_pid   => $use_pid,
	pid_name  => $pid_name,
	pid_dir   => $pid_dir,
);

my $rendered_results;
if ( !$be_quiet ) {
	if ( !$pretty ) {
		$rendered_results = encode_json($results) . "\n";
	} else {
		$rendered_results = JSON->new->utf8->canonical(1)->pretty(1)->encode($results);
	}
	print $rendered_results;
}

if ( defined($write_file) ) {
	if ($be_quiet) {
		if ( !$pretty ) {
			$rendered_results = encode_json($results) . "\n";
		} else {
			$rendered_results = JSON->new->utf8->canonical(1)->pretty(1)->encode($results);
		}
	}
	write_file( $write_file, { atomic => 1 }, $rendered_results );
} ## end if ( defined($write_file) )

if ( $results->{unlink_failed_count} > 0 ) {
	exit 1;
}
exit 0;
