NAME
    Acme::CPANModules::JSONVariants - List of JSON variants/extensions

VERSION
    This document describes version 0.001 of Acme::CPANModules::JSONVariants
    (from Perl distribution Acme-CPANModules-JSONVariants), released on
    2024-03-21.

DESCRIPTION
    JSON is hugely popular, yet very simple. This has led to various
    extensions or variants of JSON.

    An overwhelmingly popular extension is comments, because JSON is used a
    lot in configuration. Another popular extension is dangling (trailing)
    comma.

    This list catalogs the various JSON variants which have a Perl
    implementation on CPAN.

    JSON5. <https://json5.org/>, "JSON for Humans". Allowing more
    whitespaces, single-line comment (C++-style), multiline comment
    (C-style), single quote for strings, hexadecimal number literal (e.g.
    0x123abc), leading decimal point, trailing decimal point, positive sign
    in number, trailing commas.

    Perl modules: JSON5, File::Serialize::Serializer::JSON5.

    1) HJSON. <https://hjson.org>, Human JSON. A JSON variant that aims to
    be more user-friendly by allowing comments, unquoted keys, and optional
    commas. It's designed to be easier to read and write by humans.

    Perl modules: (none so far).

    2) JSONC. JSON with Comments.

    Perl modules: (none so far).

    3) CSON. CofeeScript Object Notation. JSON-like data serialization
    format inspired by CoffeeScript syntax. It allows for a more concise
    representation of data by leveraging CoffeeScript's features such as
    significant whitespace and optional commas.

    Perl modules: (none so far).

    4) RJSON. Relaxed JSON. Trailing commas, comments (C-style and
    C++-style), single-quoted strings as well as bare/unquoted, hash key
    without value (value will default to "undef").

    Perl modules: JSON::Relaxed.

    5) JSON::Diffable. Basically just allowing for trailing commas.

    6) JSONLines. <https://jsonlines.org>. A more restrictive JSON format,
    all JSON records must fit in one line as newline is the record
    delimiter. Encoding must be UTF-8. Convention for line-oriented
    processing which support JSON. E.g. for CSV replacement.

    Perl moduless: JSON::Lines.

    7) YAML. YAML is a superset of JSON. It allows for indentation-based
    syntax and various features like references, heredocs, etc.

    Perl modules: YAML, YAML::PP, among others.

ACME::CPANMODULES ENTRIES
    JSON5
        Author: KARUPA <https://metacpan.org/author/KARUPA>

    File::Serialize::Serializer::JSON5
        Author: YANICK <https://metacpan.org/author/YANICK>

    JSON::Relaxed
        Author: MIKO <https://metacpan.org/author/MIKO>

    JSON::Diffable
        Author: PHAYLON <https://metacpan.org/author/PHAYLON>

    JSON::Lines
        Author: LNATION <https://metacpan.org/author/LNATION>

    YAML
        Author: INGY <https://metacpan.org/author/INGY>

    YAML::PP
        Author: TINITA <https://metacpan.org/author/TINITA>

FAQ
  What is an Acme::CPANModules::* module?
    An Acme::CPANModules::* module, like this module, contains just a list
    of module names that share a common characteristics. It is a way to
    categorize modules and document CPAN. See Acme::CPANModules for more
    details.

  What are ways to use this Acme::CPANModules module?
    Aside from reading this Acme::CPANModules module's POD documentation,
    you can install all the listed modules (entries) using cpanm-cpanmodules
    script (from App::cpanm::cpanmodules distribution):

     % cpanm-cpanmodules -n JSONVariants

    Alternatively you can use the cpanmodules CLI (from App::cpanmodules
    distribution):

        % cpanmodules ls-entries JSONVariants | cpanm -n

    or Acme::CM::Get:

        % perl -MAcme::CM::Get=JSONVariants -E'say $_->{module} for @{ $LIST->{entries} }' | cpanm -n

    or directly:

        % perl -MAcme::CPANModules::JSONVariants -E'say $_->{module} for @{ $Acme::CPANModules::JSONVariants::LIST->{entries} }' | cpanm -n

    This Acme::CPANModules module also helps lcpan produce a more meaningful
    result for "lcpan related-mods" command when it comes to finding related
    modules for the modules listed in this Acme::CPANModules module. See
    App::lcpan::Cmd::related_mods for more details on how "related modules"
    are found.

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/Acme-CPANModules-JSONVariants>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-Acme-CPANModules-JSONVariants>.

SEE ALSO
    Acme::CPANModules - about the Acme::CPANModules namespace

    cpanmodules - CLI tool to let you browse/view the lists

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2024 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=Acme-CPANModules-JSON
    Variants>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

