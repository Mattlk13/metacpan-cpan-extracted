#!perl

use 5.010001;
use strict;
use warnings;

use App::GitUtils;
use Perinci::CmdLine::Any;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2025-04-16'; # DATE
our $DIST = 'App-GitUtils'; # DIST
our $VERSION = '0.087'; # VERSION

my $p = '/App/GitUtils/'; # prefix
Perinci::CmdLine::Any->new(
    url => $p,
    subcommands => {
        'info'           => {url => "${p}info"},
        'run-hook'       => {url => "${p}run_hook"},
        'rh'             => {url => "${p}run_hook",
                             summary => 'Alias for run-hook'},
        'post-commit'    => {url => "${p}post_commit"},
        'pre-commit'     => {url => "${p}pre_commit"},
        'clone-to-bare'  => {url => "${p}clone_to_bare"},
    },
    default_subcommand => 'info',
    get_subcommand_from_arg => 2,
)->run;

# ABSTRACT: Day-to-day command-line utilities for git
# PODNAME: gu

__END__

=pod

=encoding UTF-8

=head1 NAME

gu - Day-to-day command-line utilities for git

=head1 VERSION

This document describes version 0.087 of gu (from Perl distribution App-GitUtils), released on 2025-04-16.

=head1 SYNOPSIS

B<gu> B<L<--help|/"--help, -h, -?">> (or B<L<-h|/"--help, -h, -?">>, B<L<-?|/"--help, -h, -?">>)

B<gu> B<L<--subcommands|/"--subcommands">>

B<gu> B<L<--version|/"--version, -v">> (or B<L<-v|/"--version, -v">>)

B<gu clone-to-bare> [B<L<--cmd|/"--cmd=s">>=I<subcommand_name>] [B<L<--config-path|/"--config-path=s, -c">>=I<path>|B<L<-c|/"--config-path=s, -c">>|B<L<--no-config|/"--no-config, -C">>|B<L<-C|/"--no-config, -C">>] [B<L<--config-profile|/"--config-profile=s, -P">>=I<profile>|B<L<-P|/"--config-profile=s, -P">>] [B<L<--dir|/"--dir=s">>=I<L<dirname|Sah::Schema::dirname>>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--no-env|/"--no-env">>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]] [B<L<--target-dir|/"--target-dir=s">>=I<L<dirname|Sah::Schema::dirname>>]

B<gu info> [B<L<--cmd|/"--cmd=s">>=I<subcommand_name>] [B<L<--config-path|/"--config-path=s, -c">>=I<path>|B<L<-c|/"--config-path=s, -c">>|B<L<--no-config|/"--no-config, -C">>|B<L<-C|/"--no-config, -C">>] [B<L<--config-profile|/"--config-profile=s, -P">>=I<profile>|B<L<-P|/"--config-profile=s, -P">>] [B<L<--dir|/"--dir=s">>=I<L<dirname|Sah::Schema::dirname>>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--no-env|/"--no-env">>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]]

B<gu post-commit> [B<L<--cmd|/"--cmd=s">>=I<subcommand_name>] [B<L<--config-path|/"--config-path=s, -c">>=I<path>|B<L<-c|/"--config-path=s, -c">>|B<L<--no-config|/"--no-config, -C">>|B<L<-C|/"--no-config, -C">>] [B<L<--config-profile|/"--config-profile=s, -P">>=I<profile>|B<L<-P|/"--config-profile=s, -P">>] [B<L<--dir|/"--dir=s">>=I<L<dirname|Sah::Schema::dirname>>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--no-env|/"--no-env">>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]]

B<gu pre-commit> [B<L<--cmd|/"--cmd=s">>=I<subcommand_name>] [B<L<--config-path|/"--config-path=s, -c">>=I<path>|B<L<-c|/"--config-path=s, -c">>|B<L<--no-config|/"--no-config, -C">>|B<L<-C|/"--no-config, -C">>] [B<L<--config-profile|/"--config-profile=s, -P">>=I<profile>|B<L<-P|/"--config-profile=s, -P">>] [B<L<--dir|/"--dir=s">>=I<L<dirname|Sah::Schema::dirname>>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--no-env|/"--no-env">>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]]

B<gu rh> [B<L<--cmd|/"--cmd=s">>=I<subcommand_name>] [B<L<--config-path|/"--config-path=s, -c">>=I<path>|B<L<-c|/"--config-path=s, -c">>|B<L<--no-config|/"--no-config, -C">>|B<L<-C|/"--no-config, -C">>] [B<L<--config-profile|/"--config-profile=s, -P">>=I<profile>|B<L<-P|/"--config-profile=s, -P">>] [B<L<--dir|/"--dir=s">>=I<L<dirname|Sah::Schema::dirname>>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--no-env|/"--no-env">>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]] -- E<lt>I<L<name|/"--name=s*">>E<gt>

B<gu run-hook> [B<L<--cmd|/"--cmd=s">>=I<subcommand_name>] [B<L<--config-path|/"--config-path=s, -c">>=I<path>|B<L<-c|/"--config-path=s, -c">>|B<L<--no-config|/"--no-config, -C">>|B<L<-C|/"--no-config, -C">>] [B<L<--config-profile|/"--config-profile=s, -P">>=I<profile>|B<L<-P|/"--config-profile=s, -P">>] [B<L<--dir|/"--dir=s">>=I<L<dirname|Sah::Schema::dirname>>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--no-env|/"--no-env">>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]] -- E<lt>I<L<name|/"--name=s*">>E<gt>

=head1 SUBCOMMANDS

=head2 B<clone-to-bare>

Clone repository to a bare repository.

=head2 B<info>

Return information about git repository.

Information include:
- Path of the git directory
- Repository name
- Current/active branch

Will return status 412 if working directory is not inside a git repository. Will
return status 500 on errors, e.g. if C<git> command cannot recognize the
repository.


=head2 B<post-commit>

Run post-commit hook.

Basically the same as:

 % .git/hooks/post-commit

except can be done anywhere inside git repo.


=head2 B<pre-commit>

Run pre-commit hook.

Basically the same as:

 % .git/hooks/pre-commit

except can be done anywhere inside git repo.


=head2 B<rh>

Alias for run-hook.

Basically the same as:

 % .git/hooks/<hook-name>

except can be done anywhere inside git repo and provides tab completion.


=head2 B<run-hook>

Run a hook.

Basically the same as:

 % .git/hooks/<hook-name>

except can be done anywhere inside git repo and provides tab completion.

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--cmd>=I<s>

Select subcommand.

This is useful if a default subcommand exists, where that subcommand will be
chosen if user does not specify another explicitly.


=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

Can actually be specified multiple times to instruct application to read from
multiple configuration files (and merge them).


=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

A single configuration file can contain profiles, i.e. alternative sets of
values that can be selected. For example:

 [profile=dev]
 username=foo
 pass=beaver
 
 [profile=production]
 username=bar
 pass=honey

When you specify C<--config-profile=dev>, C<username> will be set to C<foo> and
C<password> to C<beaver>. When you specify C<--config-profile=production>,
C<username> will be set to C<bar> and C<password> to C<honey>.


=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

Output can be displayed in multiple formats, and a suitable default format is
chosen depending on the application and/or whether output destination is
interactive terminal (i.e. whether output is piped). This option specifically
chooses an output format.


=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

 [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
C<--naked-res> so you just get:

 [1,2,3]


=item B<--no-config>, B<-C>

Do not use any configuration file.

If you specify C<--no-config>, the application will not read any configuration
file.


=item B<--no-env>

Do not read environment for default options.

If you specify C<--no-env>, the application wil not read any environment
variable.


=item B<--page-result>

Filter output through a pager.

This option will pipe the output to a specified pager program. If pager program
is not specified, a suitable default e.g. C<less> is chosen.


=item B<--subcommands>

List available subcommands.

=item B<--version>, B<-v>

Display program's version and exit.

=item B<--view-result>

View output using a viewer.

This option will first save the output to a temporary file, then open a viewer
program to view the temporary file. If a viewer program is not chosen, a
suitable default, e.g. the browser, is chosen.


=back

=head2 Options for subcommand clone-to-bare

=over

=item B<--dir>=I<s>

A directory inside git repo.

If not specified, will assume current directory is inside git repository and
will search C<.git> upwards.


=item B<--target-dir>=I<s>

Target repo directory.

If not specified, defaults to C<$repodir.bare/>.


=back

=head2 Options for subcommand info

=over

=item B<--dir>=I<s>

A directory inside git repo.

If not specified, will assume current directory is inside git repository and
will search C<.git> upwards.


=back

=head2 Options for subcommand post-commit

=over

=item B<--dir>=I<s>

A directory inside git repo.

If not specified, will assume current directory is inside git repository and
will search C<.git> upwards.


=back

=head2 Options for subcommand pre-commit

=over

=item B<--dir>=I<s>

A directory inside git repo.

If not specified, will assume current directory is inside git repository and
will search C<.git> upwards.


=back

=head2 Options for subcommand rh

=over

=item B<--dir>=I<s>

A directory inside git repo.

If not specified, will assume current directory is inside git repository and
will search C<.git> upwards.


=item B<--name>=I<s>*

Hook name, e.g. post-commit.

Can also be specified as the 1st command-line argument.

=back

=head2 Options for subcommand run-hook

=over

=item B<--dir>=I<s>

A directory inside git repo.

If not specified, will assume current directory is inside git repository and
will search C<.git> upwards.


=item B<--name>=I<s>*

Hook name, e.g. post-commit.

Can also be specified as the 1st command-line argument.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C gu gu

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete gu 'p/*/`gu`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/u1/.config/gu.conf>, F</home/u1/gu.conf>, or F</etc/gu.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable equals some string: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal some string: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when the value of an environment variable includes some string: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. If you only want a section to be read when the value of an environment variable does not include some string: C<[env=HOSTNAME!*=server ...]> or C<[SOMESECTION env=HOSTNAME!*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

=head2 Common for all subcommands


=head2 Configuration for subcommand clone-to-bare

 dir (see --dir)
 target_dir (see --target-dir)

=head2 Configuration for subcommand info

 dir (see --dir)

=head2 Configuration for subcommand post-commit

 dir (see --dir)

=head2 Configuration for subcommand pre-commit

 dir (see --dir)

=head2 Configuration for subcommand rh

 dir (see --dir)
 name (see --name)

=head2 Configuration for subcommand run-hook

 dir (see --dir)
 name (see --name)

=head1 ENVIRONMENT

=head2 GU_OPT

String. Specify additional command-line options.

=head1 FILES

=head2 /home/u1/.config/gu.conf

=head2 /home/u1/gu.conf

=head2 /etc/gu.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-GitUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-GitUtils>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2025 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-GitUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
