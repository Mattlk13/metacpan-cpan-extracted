NAME
    App::GitUtils - Day-to-day command-line utilities for git

VERSION
    This document describes version 0.080 of App::GitUtils (from Perl
    distribution App-GitUtils), released on 2020-05-19.

SYNOPSIS
    This distribution provides the following command-line utilities:

    *   gu

    These utilities provide some shortcuts and tab completion to make it
    more convenient when working with git con the command-line.

FUNCTIONS
  clone_to_bare
    Usage:

     clone_to_bare(%args) -> [status, msg, payload, meta]

    Clone repository to a bare repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    *   target_dir => *dirname*

        Target repo directory.

        If not specified, defaults to "$repodir.bare/".

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  info
    Usage:

     info(%args) -> [status, msg, payload, meta]

    Return information about git repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  list_hooks
    Usage:

     list_hooks(%args) -> [status, msg, payload, meta]

    List available hooks for the repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  post_commit
    Usage:

     post_commit(%args) -> [status, msg, payload, meta]

    Run post-commit hook.

    Basically the same as:

     % .git/hooks/post-commit

    except can be done anywhere inside git repo.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  pre_commit
    Usage:

     pre_commit(%args) -> [status, msg, payload, meta]

    Run pre-commit hook.

    Basically the same as:

     % .git/hooks/pre-commit

    except can be done anywhere inside git repo.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  run_hook
    Usage:

     run_hook(%args) -> [status, msg, payload, meta]

    Run a hook.

    Basically the same as:

     % .git/hooks/<hook-name>

    except can be done anywhere inside git repo and provides tab completion.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    *   name* => *str*

        Hook name, e.g. post-commit.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-GitUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-GitUtils>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-GitUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2020, 2018, 2015, 2014 by
    perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

