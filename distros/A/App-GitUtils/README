NAME
    App::GitUtils - Day-to-day command-line utilities for git

VERSION
    This document describes version 0.081 of App::GitUtils (from Perl
    distribution App-GitUtils), released on 2021-07-14.

SYNOPSIS
    This distribution provides the following command-line utilities:

    *   gu

    These utilities provide some shortcuts and tab completion to make it
    more convenient when working with git con the command-line.

CONTRIBUTOR
    Steven Haryanto <sharyanto@cpan.org>

FUNCTIONS
  clone_to_bare
    Usage:

     clone_to_bare(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Clone repository to a bare repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    *   target_dir => *dirname*

        Target repo directory.

        If not specified, defaults to "$repodir.bare/".

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  info
    Usage:

     info(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Return information about git repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list_hooks
    Usage:

     list_hooks(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List available hooks for the repository.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  post_commit
    Usage:

     post_commit(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Run post-commit hook.

    Basically the same as:

     % .git/hooks/post-commit

    except can be done anywhere inside git repo.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  pre_commit
    Usage:

     pre_commit(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Run pre-commit hook.

    Basically the same as:

     % .git/hooks/pre-commit

    except can be done anywhere inside git repo.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  run_hook
    Usage:

     run_hook(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Run a hook.

    Basically the same as:

     % .git/hooks/<hook-name>

    except can be done anywhere inside git repo and provides tab completion.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   dir => *dirname*

        A directory inside git repo.

        If not specified, will assume current directory is inside git
        repository and will search ".git" upwards.

    *   name* => *str*

        Hook name, e.g. post-commit.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

ENVIRONMENT
  GITUTILS_TRACE
    Boolean. If set to true, will produce additional log statements using
    Log::ger at the trace level.

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-GitUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-GitUtils>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-GitUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2021, 2020, 2018, 2015, 2014 by
    perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

