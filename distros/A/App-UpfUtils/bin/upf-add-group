#!perl

# Note: This script is a CLI  for Riap function /Unix/Passwd/File/add_group
# and generated automatically using Perinci::CmdLine::Gen version 0.28

our $DATE = '2016-01-18'; # DATE
our $DIST = 'App-UpfUtils'; # DIST
our $VERSION = '0.05'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

Perinci::CmdLine::Any->new(
    url => "/Unix/Passwd/File/add_group",
    program_name => "upf-add-group",
)->run;

# ABSTRACT: Add a new group
# PODNAME: upf-add-group

__END__

=pod

=encoding UTF-8

=head1 NAME

upf-add-group - Add a new group

=head1 VERSION

This document describes version 0.05 of upf-add-group (from Perl distribution App-UpfUtils), released on 2016-01-18.

=head1 SYNOPSIS

Usage:

 % upf-add-group [options] <group>

=head1 OPTIONS

C<*> marks required options.

=head2 Configuration options

=over

=item B<--config-path>=I<filename>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--no-config>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--backup>

Whether to backup when modifying files.

Backup is written with `.bak` extension in the same directory. Unmodified file
will not be backed up. Previous backup will be overwritten.


=item B<--etc-dir>=I<s>

Specify location of passwd files.

Default value:

 "/etc"

=item B<--gid>=I<i>

Pick a specific new GID.

Adding a new group with duplicate GID is allowed.


=item B<--group>=I<s>*

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--max-gid>=I<i>

Pick a range for new GID.

Default value:

 65535

If a free GID between `min_gid` and `max_gid` is not found, error 412 is
returned.


=item B<--members-json>=I<s>

Fill initial members (JSON-encoded).

See C<--members>.

=item B<--members>=I<s>

Fill initial members.

=item B<--min-gid>=I<i>

Pick a range for new GID.

Default value:

 1000

If a free GID between `min_gid` and `max_gid` is not found, error 412 is
returned.


=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C upf-add-group upf-add-group

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install L<shcompgen> which allows you to
activate completion scripts for several kinds of scripts on multiple shells.
Some CPAN distributions (those that are built with
L<Dist::Zilla::Plugin::GenShellCompletion>) will even automatically enable shell
completion for their included scripts (using C<shcompgen>) at installation time,
so you can immadiately have tab completion.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete upf-add-group 'p/*/`upf-add-group`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration file, which by default is searched at C<~/.config/upf-add-group.conf>, C<~/upf-add-group.conf> or C</etc/upf-add-group.conf> (can be changed by specifying C<--config-path>). All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

Configuration file is in the format of L<IOD>, which is basically INI with some extra features. 

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

List of available configuration parameters:

 backup (see --backup)
 etc_dir (see --etc-dir)
 format (see --format)
 gid (see --gid)
 group (see --group)
 max_gid (see --max-gid)
 members (see --members)
 min_gid (see --min-gid)
 naked_res (see --naked-res)

=head1 ENVIRONMENT

=head2 UPF_ADD_GROUP_OPT => str

Specify additional command-line options

=head1 FILES

~/.config/upf-add-group.conf

~/upf-add-group.conf

/etc/upf-add-group.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-UpfUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-UpfUtils>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-UpfUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2016 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
