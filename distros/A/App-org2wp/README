NAME
    App::org2wp - Publish Org document (or heading) to WordPress as blog
    post

VERSION
    This document describes version 0.009 of App::org2wp (from Perl
    distribution App-org2wp), released on 2020-09-17.

FUNCTIONS
  org2wp
    Usage:

     org2wp(%args) -> [status, msg, payload, meta]

    Publish Org document (or heading) to WordPress as blog post.

    This is originally a quick hack because I couldn't make
    L<https://github.com/punchagan/org2blog> on my Emacs installation to
    work after some update. "org2wp" uses the same format as "org2blog", but
    instead of being an Emacs package, it is a CLI script written in Perl.

    First, create "~/org2wp.conf" containing the API credentials, e.g.:

     proxy=https://YOURBLOGNAME.wordpress.com/xmlrpc.php
     username=YOURUSERNAME
     password=YOURPASSWORD

    You can also put multiple credentials in the configuration file using
    profile sections, e.g.:

     [profile=blog1]
     proxy=https://YOURBLOG1NAME.wordpress.com/xmlrpc.php
     username=YOURUSERNAME
     password=YOURPASSWORD
 
     [profile=blog2]
     proxy=https://YOURBLOG2NAME.wordpress.com/xmlrpc.php
     username=YOURUSERNAME
     password=YOURPASSWORD

    and specify which profile you want using command-line option e.g.
    "--config-profile blog1".

   Document mode
    You can use the whole Org document file as a blog post (document mode)
    or a single heading as a blog post (heading mode). The default is
    document mode. To create a blog post, write your Org document (e.g. in
    "post1.org") using this format:

     #+TITLE: Blog post title
     #+CATEGORY: cat1, cat2
     #+TAGS: tag1,tag2,tag3
 
     Text of your post ...
     ...

    then:

     % org2wp post1.org

    this will create a draft post. To publish directly:

     % org2wp --publish post1.org

    Note that this will also modify your Org file and insert this setting
    line at the top:

     #+POSTID: 1234
     #+POSTTIME: [2020-09-16 Wed 11:51]

    where 1234 is the post ID retrieved from the server when creating the
    post, and post time will be set to the current local time.

    After the post is created, you can update using the same command:

     % org2wp post1.org

    You can use "--publish" to publish the post, or "--no-publish" to revert
    it to draft.

    To set more attributes:

     % org2wp post1.org --comment-status open \
         --extra-attr ping_status=closed --extra-attr sticky=1

    Another example, to schedule a post in the future:

     % org2wp post1.org --schedule 20301225T00:00:00

   Heading mode
    In heading mode, each heading will become a separate blog post. To
    enable this mode, specify "--post-heading-level" ("-l") to 1 (or 2, or
    3, ...). This will cause a level-1 (or 2, or 3, ...) heading to be
    assumed as an individual blog post. For example, suppose you have
    "blog.org" with this content:

     * Post A                  :tag1:tag2:tag3:
     :PROPERTIES:
     :CATEGORY: cat1, cat2, cat3
     :END:
 
     Some text...
 
     ** a heading of post A
     more text ...
     ** another heading of post A
     even more text ...
 
     * Post B                  :tag2:tag4:
     Some text ...

    with this command:

     % org2wp blog.org -l 1

    there will be two blog posts to be posted because there are two level-1
    headings: "Post A" and "Post B". Post A contains level-2 headings which
    will become headings of the blog post. Headline tags will become blog
    post tags, and to specify categories you use the property "CATEGORY" in
    the "PROPERTIES" drawer.

    If, for example, you specify "-l 2" instead of "-l 1" then the level-2
    headings will become blog posts.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   comment_status => *str* (default: "closed")

        Whether to allow comments (open) or not (closed).

    *   extra_attrs => *hash*

        Set extra post attributes, e.g. ping_status, post_format, etc.

    *   filename* => *filename*

        Path to Org document to publish.

    *   password* => *str*

    *   post_heading_level => *posint*

        Specify which heading level to be regarded as an individula blog
        post.

        If specified, this will enable *heading mode* instead of the default
        *document mode*. In the document mode, the whole Org document file
        is regarded as a single blog post. In the *heading mode*, a heading
        of certain level will be regarded as a single blog post.

    *   proxy* => *str*

        Example: C<https://YOURBLOGNAME.wordpress.com/xmlrpc.php>.

    *   publish => *bool*

        Whether to publish post or make it a draft.

        Equivalent to "--extra-attr post_status=published", while
        "--no-publish" is equivalent to "--extra-attr post_status=draft".

    *   schedule => *date*

        Schedule post to be published sometime in the future.

        Equivalent to "--publish --extra-attr post_date=DATE". Note that
        WordPress accepts date in the "YYYYMMDD"T"HH:MM:SS" format, but you
        specify this option in regular ISO8601 format. Also note that time
        is in your chosen local timezone setting.

    *   username* => *str*

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-org2wp>.

SOURCE
    Source repository is at <https://github.com/perlancar/perl-App-org2wp>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-org2wp>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2020, 2019, 2017, 2016 by
    perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

