#!perl

# Note: This script is a CLI for Riap function /App/org2wp/org2wp
# and generated automatically using Perinci::CmdLine::Gen version 0.501

use 5.010001;
use strict;
use warnings;
use Log::ger;

use Perinci::CmdLine::Any;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2022-05-01'; # DATE
our $DIST = 'App-org2wp'; # DIST
our $VERSION = '0.012'; # VERSION

my $cmdline = Perinci::CmdLine::Any->new(
    url => "/App/org2wp/org2wp",
    program_name => "org2wp",
    log => 1,
);

$cmdline->run;

# ABSTRACT: Publish Org document (or heading) to WordPress as blog post
# PODNAME: org2wp

__END__

=pod

=encoding UTF-8

=head1 NAME

org2wp - Publish Org document (or heading) to WordPress as blog post

=head1 VERSION

This document describes version 0.012 of org2wp (from Perl distribution App-org2wp), released on 2022-05-01.

=head1 SYNOPSIS

Usage:

% B<org2wp> [B<--comment-status>=I<str>] [B<--config-path>=I<path>|B<-c>|B<--no-config>|B<-C>] [B<--config-profile>=I<profile>|B<-P>] [B<--debug>|B<--log-level>=I<level>|B<--quiet>|B<--trace>|B<--verbose>] [B<--dry-run>|B<-n>] [(B<--exclude-heading-tag>=I<str>)+] [(B<--extra-attr> I<key>=I<s>)+] [B<--format>=I<name>|B<--json>] [(B<--include-heading-tag>=I<str>)+] [B<--(no)naked-res>] [B<--no-env>] [B<--page-result>[=I<program>]|B<--view-result>[=I<program>]] [B<--password>=I<str>] [B<--post-heading-level>=I<posint>] [B<--post-password>=I<str>] [B<--proxy>=I<str>] [B<--publish>|B<--no-publish>|B<--nopublish>] [B<--schedule>=I<date>] [B<--username>=I<str>] [B<--exclude-heading-tags-json>=I<json>] [B<--extra-attrs-json>=I<json>] [B<--include-heading-tags-json>=I<json>] [B<-l>=I<posint>] -- E<lt>I<filename>E<gt>

=head1 DESCRIPTION

This is originally a quick hack because I couldn't make
LL<https://github.com/punchagan/org2blog> on my Emacs installation to
work after some update. C<org2wp> uses the same format as C<org2blog>, but instead
of being an Emacs package, it is a CLI script written in Perl.

First, create C<~/org2wp.conf> containing the API credentials, e.g.:

 proxy=https://YOURBLOGNAME.wordpress.com/xmlrpc.php
 username=YOURUSERNAME
 password=YOURPASSWORD

Note that C<proxy> is the endpoint URL of your WordPress instance's XML-RPC
server, which can be hosted on C<wordpress.com> or on other server, including
your own. It has nothing to do with HTTP/HTTPS proxy; the term "proxy" is used
by the L<XMLRPC::Lite> and L<SOAP::Lite> Perl libraries and C<org2wp> simply
uses the same terminology.

You can also put multiple credentials in the configuration file using profile
sections, e.g.:

 [profile=blog1]
 proxy=https://YOURBLOG1NAME.wordpress.com/xmlrpc.php
 username=YOURUSERNAME
 password=YOURPASSWORD
 
 [profile=blog2]
 proxy=https://YOURBLOG2NAME.wordpress.com/xmlrpc.php
 username=YOURUSERNAME
 password=YOURPASSWORD

and specify which profile you want using command-line option e.g.
C<--config-profile blog1>.

=head3 Document mode

You can use the whole Org document file as a blog post (document mode) or a
single heading as a blog post (heading mode). The default is document mode. To
create a blog post, write your Org document (e.g. in C<post1.org>) using this
format:

 #+TITLE: Blog post title
 #+CATEGORY: cat1, cat2
 #+TAGS: tag1,tag2,tag3
 
 Text of your post ...
 ...

then:

 % org2wp post1.org

this will create a draft post. To publish directly:

 % org2wp --publish post1.org

Note that this will also modify your Org file and insert this setting line at
the top:

 #+POSTID: 1234
 #+POSTTIME: [2020-09-16 Wed 11:51]

where 1234 is the post ID retrieved from the server when creating the post, and
post time will be set to the current local time.

After the post is created, you can update using the same command:

 % org2wp post1.org

You can use C<--publish> to publish the post, or C<--no-publish> to revert it to
draft.

To set more attributes:

 % org2wp post1.org --comment-status open \
     --extra-attr ping_status=closed --extra-attr sticky=1

Another example, to schedule a post in the future:

 % org2wp post1.org --schedule 20301225T00:00:00

=head3 Heading mode

In heading mode, each heading will become a separate blog post. To enable this
mode, specify C<--post-heading-level> (C<-l>) to 1 (or 2, or 3, ...). This will
cause a level-1 (or 2, or 3, ...) heading to be assumed as an individual blog
post. For example, suppose you have C<blog.org> with this content:

 * Post A                  :tag1:tag2:tag3:
 :PROPERTIES:
 :CATEGORY: cat1, cat2, cat3
 :END:
 
 Some text...
 
 ** a heading of post A
 more text ...
 ** another heading of post A
 even more text ...
 
 * Post B                  :tag2:tag4:
 Some text ...

with this command:

 % org2wp blog.org -l 1

there will be two blog posts to be posted because there are two level-1
headings: C<Post A> and C<Post B>. Post A contains level-2 headings which will
become headings of the blog post. Headline tags will become blog post tags, and
to specify categories you use the property C<CATEGORY> in the C<PROPERTIES>
drawer.

If, for example, you specify C<-l 2> instead of C<-l 1> then the level-2 headings
will become blog posts.

In heading mode, you can use several options to select only certain headlines
which contain (or don't contain) specified tags.

=head3 FAQ

=head4 What if I want to set HTTP/HTTPS proxy?

You can set the environment variable C<HTTP_proxy> (and C<HTTP_proxy_user> and
C<HTTP_proxy_pass> additionally). See the L<SOAP::Lite> documentation for more
details, which uses L<LWP::UserAgent> underneath.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--comment-status>=I<s>

Whether to allow comments (open) or not (closed).

Default value:

 "closed"

Valid values:

 ["open","closed"]

=item B<--extra-attr>=I<s>%

Set extra post attributes, e.g. ping_status, post_format, etc.

Each value is a name-value pair, use I<key=value> syntax. Can be specified multiple times.

=item B<--extra-attrs-json>=I<s>

Set extra post attributes, e.g. ping_status, post_format, etc (JSON-encoded).

See C<--extra-attr>.

=item B<--filename>=I<s>*, B<-f>

Path to Org document to publish.

Can also be specified as the 1st command-line argument.

=item B<--post-password>=I<s>

Set password for posts.

=item B<--publish>

Whether to publish post or make it a draft.

Equivalent to `--extra-attr post_status=published`, while `--no-publish` is
equivalent to `--extra-attr post_status=draft`.


=item B<--schedule>=I<s>

Schedule post to be published sometime in the future.

Equivalent to `--publish --extra-attr post_date=DATE`. Note that WordPress
accepts date in the `YYYYMMDD"T"HH:MM:SS` format, but you specify this option in
regular ISO8601 format. Also note that time is in your chosen local timezone
setting.


=back

=head2 Configuration options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--no-config>, B<-C>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Heading mode options

=over

=item B<--exclude-heading-tag>=I<s@>

Exclude heading that has any of the specified tag(s).

Can be specified multiple times.

=item B<--exclude-heading-tags-json>=I<s>

Exclude heading that has any of the specified tag(s) (JSON-encoded).

See C<--exclude-heading-tag>.

=item B<--include-heading-tag>=I<s@>

Only include heading that has all specified tag(s).

Can be specified multiple times.

=item B<--include-heading-tags-json>=I<s>

Only include heading that has all specified tag(s) (JSON-encoded).

See C<--include-heading-tag>.

=item B<--post-heading-level>=I<s>, B<-l>

Specify which heading level to be regarded as an individula blog post.

If specified, this will enable *heading mode* instead of the default *document
mode*. In the document mode, the whole Org document file is regarded as a single
blog post. In the *heading mode*, a heading of certain level will be regarded as
a single blog post.


=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--page-result>

Filter output through a pager.

=item B<--view-result>

View output using a viewer.

=back

=head2 Other options

=over

=item B<--dry-run>, B<-n>

Run in simulation mode (also via DRY_RUN=1).

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--password>=I<s>*

=item B<--proxy>=I<s>*

Example: `https://YOURBLOGNAME.wordpress.com/xmlrpc.php`.

Note that `proxy` is the endpoint URL of your WordPress instance's XML-RPC
server, which can be hosted on `wordpress.com` or on other server, including
your own. It has nothing to do with HTTP/HTTPS proxy; the term "proxy" is used
by the <pm:XMLRPC::Lite> and <pm:SOAP::Lite> Perl libraries and `org2wp` simply
uses the same terminology.


=item B<--username>=I<s>*

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C org2wp org2wp

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete org2wp 'p/*/`org2wp`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/u1/.config/org2wp.conf>, F</home/u1/org2wp.conf>, or F</etc/org2wp.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable equals some string: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal some string: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when the value of an environment variable includes some string: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. If you only want a section to be read when the value of an environment variable does not include some string: C<[env=HOSTNAME!*=server ...]> or C<[SOMESECTION env=HOSTNAME!*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

 comment_status (see --comment-status)
 exclude_heading_tags (see --exclude-heading-tag)
 extra_attrs (see --extra-attr)
 filename (see --filename)
 format (see --format)
 include_heading_tags (see --include-heading-tag)
 log_level (see --log-level)
 naked_res (see --naked-res)
 password (see --password)
 post_heading_level (see --post-heading-level)
 post_password (see --post-password)
 proxy (see --proxy)
 publish (see --publish)
 schedule (see --schedule)
 username (see --username)

=head1 ENVIRONMENT

=head2 ORG2WP_OPT => str

Specify additional command-line options.

=head1 FILES

F</home/u1/.config/org2wp.conf>

F</home/u1/org2wp.conf>

F</etc/org2wp.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-org2wp>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-org2wp>.

=head1 SEE ALSO

L<pod2wp>.

L<html2wp>.

L<wp-xmlrpc>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla plugin and/or Pod::Weaver::Plugin. Any additional steps required
beyond that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2022, 2020, 2019, 2017, 2016 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-org2wp>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
