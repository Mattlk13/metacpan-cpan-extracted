#!perl

our $DATE = '2021-05-25'; # DATE
our $VERSION = '0.122'; # VERSION

BEGIN { $ENV{VERBOSE} //= 1 }

use 5.010;
use strict;
use warnings;
use Log::ger;

use App::PDRUtils;
use Perinci::CmdLine::Any;
use PERLANCAR::Module::List;

my $mods = do {
    # if we are called during building by dzil, don't include subcommands
    # installed outside our dist. otherwise we'll be documenting and depending
    # on extraneous subcommands.
    local @INC = ("lib") if $ENV{DZIL};

    PERLANCAR::Module::List::list_modules(
        "App::PDRUtils::MultiCmd::", {list_modules=>1});
};

my $subcommands = {};
for my $mod (keys %$mods) {
    (my $sc_name = $mod) =~ s/App::PDRUtils::MultiCmd:://;
    next if $sc_name =~ /^_/;
    $sc_name =~ s/_/-/g;

    # ignore old subcommands
    #next if $sc_name =~ /\A(...|...)\z/;

    (my $url = $mod) =~ s!::!/!g;
    $subcommands->{$sc_name} = {
        url => "/$url/handle_cmd",
    };
}

Perinci::CmdLine::Any->new(
    %App::PDRUtils::Common_CLI_Attrs,
    url => '/App/PDRUtils/',
    subcommands => $subcommands,
    log => 1,
    log_level => 'info',
)->run;

1;
# ABSTRACT: Collection of utilities for perl dist repos
# PODNAME: pdrutil-multi

__END__

=pod

=encoding UTF-8

=head1 NAME

pdrutil-multi - Collection of utilities for perl dist repos

=head1 VERSION

This document describes version 0.122 of pdrutil-multi (from Perl distribution App-PDRUtils), released on 2021-05-25.

=head1 SYNOPSIS

Usage:

 % pdrutil-multi add-prereq [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--phase=s]
     [--quiet] [--rel=s] [--repo=s+] [--repos-json=s] [--trace] [--verbose]
     [--view-result[=program]] <module> [module_version]
 % pdrutil-multi dec-prereq-version-by [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--repo=s+] [--repos-json=s] [--trace] [--verbose]
     [--view-result[=program]] <module> <by>
 % pdrutil-multi dec-prereq-version-to [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--repo=s+] [--repos-json=s] [--trace] [--verbose]
     [--view-result[=program]] <module> <module_version>
 % pdrutil-multi inc-prereq-version-by [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--repo=s+] [--repos-json=s] [--trace] [--verbose]
     [--view-result[=program]] <module> <by>
 % pdrutil-multi inc-prereq-version-to [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--repo=s+] [--repos-json=s] [--trace] [--verbose]
     [--view-result[=program]] <module> <module_version>
 % pdrutil-multi ls [--config-path=path | -c] [--config-profile=profile |
     -P] [-d] [--debug] [--depends-json=s] [--depends=s+] [--detail]
     [--dist] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [-l] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-detail] [--no-dist] [--no-env] [--nodetail]
     [--nodist] [--page-result[=program]] [--quiet] [--repo=s+]
     [--repos-json=s] [--trace] [--verbose] [--view-result[=program]]
 % pdrutil-multi remove-prereq [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--repo=s+] [--repos-json=s] [--trace] [--verbose]
     [--view-result[=program]] <module>
 % pdrutil-multi set-prereq-version-to [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--repo=s+] [--repos-json=s] [--trace] [--verbose]
     [--view-result[=program]] <module> <module_version>
 % pdrutil-multi sort-prereqs [--config-path=path | -c]
     [--config-profile=profile | -P] [--debug] [--depends-json=s]
     [--depends=s+] [--doesnt-depend-json=s] [--doesnt-depend=s+]
     [--exclude-dist-pattern=s+] [--exclude-dist-patterns-json=s]
     [--exclude-dist=s+] [--exclude-dists-json=s] [--format=name]
     [--has-tag=s+] [--has-tags-json=s] [--include-dist-pattern=s+]
     [--include-dist-patterns-json=s] [--include-dist=s+]
     [--include-dists-json=s] [--json] [--lacks-tag=s+]
     [--lacks-tags-json=s] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--repo=s+] [--repos-json=s] [--spacing=s] [--trace] [--verbose]
     [--view-result[=program]]

=head1 DESCRIPTION

B<EARLY RELEASE. SOME THINGS ARE NOT YET IMPLEMENTED.>

This utility operates multiple Perl distribution repositories. To use this
utility, first create a configuration C<~/pdrutil-multi.conf> containing at the
very least something like:

 repos = !paths ~/repos/perl-*

You can change the C<~/repos/perl-*> part to a wildcard of where you put your
perl dist repos. Another example where you specify multiple wildcard patterns:

 repos = !paths ~/repos/perl-* ~/repos-[12]*/perl-* ~/repos-private/perl-*

Or, if you prefer to specify the repos individually:

 repos = /home/budi/Foo-Bar
 repos = /home/budi/Foo-Baz
 repos = /home/budi/Qux
 repos = !path ~/perl-Module-Zap

(Note that if you want C<~> to be expanded into your home directory, like in a
Unix shell, you need to put C<!path> encoding as the prefix for the value. See
L<IOD> for more details on the configuration format.)

A few things that you can do:

=over

=item * List repositories based on various criteria

List the repositories (directory names):

 % pdrutil-multi ls

List the directory names as well as other details of the repositories:

 % pdrutil-multi ls -l

List repositories that have unclean git status (needs to be committed, etc):

 % pdrutil-multi ls --no-git-clean

List repositories that specify prereq to a certain module:

 % pdrutil-multi ls --depends Foo::Bar
 % pdrutil-multi ls --depends 'Foo::Bar >= 0.12'
 % pdrutil-multi ls --depends 'Foo::Bar = 0.12'
 % pdrutil-multi ls --depends 'Foo::Bar < 0.12'

List repositories that depend on certain prereq in a certain phase/relationship
only:

 % pdrutil-multi ls --depends 'Test::More < 0.98' --phase test

List distributions that does I<not> depend on a certain module:

 % pdrutil-multi ls --doesnt-depend Baz

=item * Add prereq

Add a prereq to C<Foo::Bar> (by default version is C<0> and if there is already
an existing prereq to C<Foo::Bar>, will do nothing).

 % pdrutil-multi add-prereq Foo::Bar

Set version, and replace existing prereq line:

 % pdrutil-multi add-prereq --replace Foo::Bar 1.23

=item * Remove prereq

 % pdrutil-multi remove-prereq Foo::Bar

=item * Modify prereq: set/increase/decrease version

For example, you want to increase the minimum prereq version for all your
distributions, e.g. L<Bencher> to 0.30:

 % pdrutil-multi inc-prereq-version-to Bencher 0.30

All distributions which do not list L<Bencher> as a prereq in their F<dist.ini>,
or distributions which already list L<Bencher> version 0.30 or later, won't be
modified.

Some other examples:

 % pdrutil-multi dec-prereq-version-to Some::Module 1.2
 % pdrutil-multi inc-prereq-version-by Some::Module 0.01
 % pdrutil-multi dec-prereq-version-by Some::Module 0.01
 % pdrutil-multi set-prereq-version-to Some::Module 1.2

=back

=head1 SUBCOMMANDS

=head2 B<add-prereq>

Add a prereq.

=head2 B<dec-prereq-version-by>

Decrease prereq version by a certain decrement.

=head2 B<dec-prereq-version-to>

Decrease prereq version to a specified version.

=head2 B<inc-prereq-version-by>

Increase prereq version by a certain increment.

=head2 B<inc-prereq-version-to>

Increase prereq version to a specified version.

=head2 B<ls>

List repos.

=head2 B<remove-prereq>

Add a prereq.

=head2 B<set-prereq-version-to>

Set prereq version to a specified version.

=head2 B<sort-prereqs>

Sort lines in `[Prereqs/*]` sections.

This command can sort C<[Prereqs/*]> sections in your C<dist.ini> according to
this rule (TODO: allow customized rule): C<perl> comes first, then pragmas sorted
ascibetically and case-insensitively (e.g. C<strict>, C<utf8>, C<warnings>), then
other modules sorted ascibetically and case-insensitively.

Can detect one-spacing or two-spacing. Detects directives and comments.

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--depends-json>=I<s>

Only include repos that has prereq to specified module(s) (JSON-encoded).

See C<--depends>.

=item B<--depends>=I<s@>

Only include repos that has prereq to specified module(s).

Can be specified multiple times.

=item B<--doesnt-depend-json>=I<s>

Exclude repos that has prereq to specified module(s) (JSON-encoded).

See C<--doesnt-depend>.

=item B<--doesnt-depend>=I<s@>

Exclude repos that has prereq to specified module(s).

Can be specified multiple times.

=item B<--exclude-dist-pattern>=I<s@>

Exclude repos which match specified pattern(s).

Can be specified multiple times.

=item B<--exclude-dist-patterns-json>=I<s>

Exclude repos which match specified pattern(s) (JSON-encoded).

See C<--exclude-dist-pattern>.

=item B<--exclude-dist>=I<s@>

Exclude repos which have specified name(s).

Can be specified multiple times.

=item B<--exclude-dists-json>=I<s>

Exclude repos which have specified name(s) (JSON-encoded).

See C<--exclude-dist>.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--has-tag>=I<s@>

Only include repos which have specified tag(s).

A repo can be tagged by tag `X` if it has a top-level file named `.tag-X`.


Can be specified multiple times.

=item B<--has-tags-json>=I<s>

Only include repos which have specified tag(s) (JSON-encoded).

See C<--has-tag>.

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--include-dist-pattern>=I<s@>

Only include repos which match specified pattern(s).

Can be specified multiple times.

=item B<--include-dist-patterns-json>=I<s>

Only include repos which match specified pattern(s) (JSON-encoded).

See C<--include-dist-pattern>.

=item B<--include-dist>=I<s@>

Only include repos which have specified name(s).

Can be specified multiple times.

=item B<--include-dists-json>=I<s>

Only include repos which have specified name(s) (JSON-encoded).

See C<--include-dist>.

=item B<--json>

Set output format to json.

=item B<--lacks-tag>=I<s@>

Exclude repos which have specified tag(s).

A repo can be tagged by tag `X` if it has a top-level file named `.tag-X`.


Can be specified multiple times.

=item B<--lacks-tags-json>=I<s>

Exclude repos which have specified tag(s) (JSON-encoded).

See C<--lacks-tag>.

=item B<--log-level>=I<s>

Set log level.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--no-config>, B<-C>

Do not use any configuration file.

=item B<--no-env>

Do not read environment for default options.

=item B<--page-result>

Filter output through a pager.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--repo>=I<s@>

Can be specified multiple times.

=item B<--repos-json>=I<s>

See C<--repo>.

=item B<--subcommands>

List available subcommands.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=item B<--version>, B<-v>

Display program's version and exit.

=item B<--view-result>

View output using a viewer.

=back

=head2 Options for subcommand add-prereq

=over

=item B<--module-version>=I<s>

Default value:

 0

Can also be specified as the 2nd command-line argument.

=item B<--module>=I<s>*

Can also be specified as the 1st command-line argument.

=item B<--phase>=I<s>

Select prereq phase.

Default value:

 "runtime"

=item B<--rel>=I<s>

Select prereq relationship.

Default value:

 "requires"

=back

=head2 Options for subcommand dec-prereq-version-by

=over

=item B<--by>=I<s>*

Can also be specified as the 2nd command-line argument.

=item B<--module>=I<s>*

Can also be specified as the 1st command-line argument.

=back

=head2 Options for subcommand dec-prereq-version-to

=over

=item B<--module-version>=I<s>*

Can also be specified as the 2nd command-line argument.

=item B<--module>=I<s>*

Can also be specified as the 1st command-line argument.

=back

=head2 Options for subcommand inc-prereq-version-by

=over

=item B<--by>=I<s>*

Can also be specified as the 2nd command-line argument.

=item B<--module>=I<s>*

Can also be specified as the 1st command-line argument.

=back

=head2 Options for subcommand inc-prereq-version-to

=over

=item B<--module-version>=I<s>*

Can also be specified as the 2nd command-line argument.

=item B<--module>=I<s>*

Can also be specified as the 1st command-line argument.

=back

=head2 Options for subcommand ls

=over

=item B<--detail>, B<-l>

=item B<--dist>, B<-d>

Show dist names instead of repo dirs.

=back

=head2 Options for subcommand remove-prereq

=over

=item B<--module>=I<s>*

Can also be specified as the 1st command-line argument.

=back

=head2 Options for subcommand set-prereq-version-to

=over

=item B<--module-version>=I<s>*

Can also be specified as the 2nd command-line argument.

=item B<--module>=I<s>*

Can also be specified as the 1st command-line argument.

=back

=head2 Options for subcommand sort-prereqs

=over

=item B<--spacing>=I<s>

Set spacing explicitly.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C pdrutil-multi pdrutil-multi

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete pdrutil-multi 'p/*/`pdrutil-multi`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/pdrutil-multi.conf>, F<~/pdrutil-multi.conf>, or F</etc/pdrutil-multi.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable equals some string: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal some string: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when the value of an environment variable includes some string: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. If you only want a section to be read when the value of an environment variable does not include some string: C<[env=HOSTNAME!*=server ...]> or C<[SOMESECTION env=HOSTNAME!*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

=head2 Common for all subcommands

 depends (see --depends)
 doesnt_depend (see --doesnt-depend)
 exclude_dist_patterns (see --exclude-dist-pattern)
 exclude_dists (see --exclude-dist)
 format (see --format)
 has_tags (see --has-tag)
 include_dist_patterns (see --include-dist-pattern)
 include_dists (see --include-dist)
 lacks_tags (see --lacks-tag)
 log_level (see --log-level)
 naked_res (see --naked-res)
 repos (see --repo)

=head2 Configuration for subcommand add-prereq

 module (see --module)
 module_version (see --module-version)
 phase (see --phase)
 rel (see --rel)

=head2 Configuration for subcommand dec-prereq-version-by

 by (see --by)
 module (see --module)

=head2 Configuration for subcommand dec-prereq-version-to

 module (see --module)
 module_version (see --module-version)

=head2 Configuration for subcommand inc-prereq-version-by

 by (see --by)
 module (see --module)

=head2 Configuration for subcommand inc-prereq-version-to

 module (see --module)
 module_version (see --module-version)

=head2 Configuration for subcommand ls

 detail (see --detail)
 dist (see --dist)

=head2 Configuration for subcommand remove-prereq

 module (see --module)

=head2 Configuration for subcommand set-prereq-version-to

 module (see --module)
 module_version (see --module-version)

=head2 Configuration for subcommand sort-prereqs

 spacing (see --spacing)

=head1 ENVIRONMENT

=head2 PDRUTIL_MULTI_OPT => str

Specify additional command-line options.

=head1 FILES

F<~/.config/pdrutil-multi.conf>

F<~/pdrutil-multi.conf>

F</etc/pdrutil-multi.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-PDRUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-PDRUtils>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-PDRUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<pdrutil> which operates on a single Perl distribution repository at a time.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2021, 2019, 2018, 2017, 2016 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
