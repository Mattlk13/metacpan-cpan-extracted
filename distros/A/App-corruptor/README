NAME
    App::corruptor - Corrupt files by writing some random bytes/blocks to
    them

VERSION
    This document describes version 0.003 of App::corruptor (from Perl
    distribution App-corruptor), released on 2022-03-13.

FUNCTIONS
  corruptor
    Usage:

     corruptor(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Corrupt files by writing some random bytes/blocks to them.

    Examples:

    *   Corrupt two files by writing 1% random bytes:

         corruptor(files => ["disk.img", "disk2.img"], proportion => "1%");

    This utility can be used in disk/filesystem testing. It corrupts files
    by writing random bytes/blocks to them.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   files* => *array[filename]*

    *   proportion* => *percent*

        How much random data is written as proportion of file size (in
        percent).

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  corruptor_total
    Usage:

     corruptor_total(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Destroy files by replacing their contents with random data.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   files* => *array[filename]*

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  corruptor_zero
    Usage:

     corruptor_zero(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Destroy files by replacing their contents with zero bytes (nulls).

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   files* => *array[filename]*

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-corruptor>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-corruptor>.

SEE ALSO
    <http://jrs-s.net/2016/05/09/testing-copies-equals-n-resiliency/>.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla plugin and/or Pod::Weaver::Plugin. Any additional
    steps required beyond that are considered a bug and can be reported to
    me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022, 2021 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-corruptor>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

