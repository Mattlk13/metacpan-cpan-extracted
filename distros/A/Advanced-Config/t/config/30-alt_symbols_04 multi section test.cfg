CMT:
CMT: This is just a sample config file that I'm using as a basis.
CMT: It's validated by t/30-alt_symbols_cfg.t
CMT:
CMT: Any changes made to this config file should also be refleced
CMT: in:  t/config/10-simple.cfg
CMT: That config file is used to validate this one!
CMT:
CMT: --------------------------------------------------------------
CMT:   The required substitutions ...
CMT:     Assignment (=)     ==>  ~
CMT:     Comments   (#)     ==>  CMT:
CMT:     Variables (${..})  ==>  $<..>
CMT:     Quotes    (' or ") ==>  '..'
CMT:     Section   ([..])   ==>  {..}
CMT: --------------------------------------------------------------

CMT: The sections to compare against ...

section_01 ~ Messy Name

section_02 ~ All Variables

CMT: --------------------------------------------------------------

{ $<section_01> }

a ~ 'A is for Apple!'

           b       ~       B is for Bat!    CMT: A comment

c~'C is for Cat!'    CMT: Another comment

CMT: Another comment ...
d ~D is for Dog!     CMT: Comment (CMT:CMT:CMT:CMT:) ...

e ~ 'E is for Elephant!'

f ~ 'F is for Frog!"   CMT: Unbalanced Quotes are not removed. (can't implement)

g ~ G is for Gold Fish!

g ~ $fooled you        CMT: Not a variable substitution!

h_pwd ~ 'Hello World!'    CMT: Should't appear in fish.

CMT: --------------------------------------------------------------

one ~ ONE
two ~ TWO
three ~ THREE

CMT: All 3 evaluate to the same value ...
number 1 ~ '$<one> $<two> $<three>'
number 2 ~ '$<one> $<two> $<three>'
number 3 ~  $<one> $<two> $<three>

CMT: All 3 evaluate to the same value again ...
number 6 ~ '$<one> $<two> $<three>'    CMT: A comment ...
number 5 ~ '$<one> $<two> $<three>'    CMT: A comment ...
number 4 ~  $<one> $<two> $<three>     CMT: A comment ...

number 8 ~ $<number 1>

rule8 missing ~ $<undefined>    CMT: Returns '' as it's value.

CMT: Testing the special variables ... (Rule 0)
shft3 ~ 'zzzzzzzzz'         CMT: Line should be ignored!

cmt  ~ $<shft3>
cmt2 ~ $<shft33>
cmt3 ~ $<shft333>

CMT: Look up these 3 special perl variables ... (Rule 5)
rule5_pid  ~ $<$>          CMT: Different per test ...
rule5_prog ~ $<0>
rule5_os   ~ $<^O>

CMT: Look up these special variables ... (Rule 6)
rule6_host ~ $<hostname>
rule6_user ~ $<user>
rule6_pid  ~ $<PID>       CMT: Should match $<rule5_pid>
rule6_ppid ~ $<PPID>      CMT: Different per test ...
rule6_p    ~ $<program>
rule6_sep  ~ $<sep>       CMT: Varies by OS

CMT: Here are some dates we are interested in!

CMT: The date keywords use rule 7 ... So mixes rule 6 & 7.
log1 ~ t$<sep>logs$<sep>$<program>.$<today>.txt
log2 ~ t$<sep>logs$<sep>$<program>.$<yesterday>.txt
log3 ~ t$<sep>logs$<sep>$<program>.$<tomorrow>.txt

CMT: Here are some strange variables to see what happens!
empty_1 ~ $<>
empty_2 ~ $<   >

empty_3 ~ abc $<> xyz
empty_4 ~ abc $<   > xyz

CMT: -------------------------------------------------------------

{ $<section_02> }

a ~ $<$<section_01>.a>
b ~ $<$<section_01>.b>
c ~ $<$<section_01>.c>
d ~ $<$<section_01>.d>
e ~ $<$<section_01>.e>
f ~ $<$<section_01>.f>
g ~ $<$<section_01>.g>
h_pwd ~ $<$<section_01>.h_pwd>

one ~ $<$<section_01>.one>
two ~ $<$<section_01>.two>
three ~ $<$<section_01>.three>

number 8 ~ $<$<section_01>.number 8>

number 6 ~ $<$<section_01>.number 6>
number 5 ~ $<$<section_01>.number 5>
number 4 ~ $<$<section_01>.number 4>
number 3 ~ $<$<section_01>.number 3>
number 2 ~ $<$<section_01>.number 2>
number 1 ~ $<$<section_01>.number 1>

rule8 missing ~ $<$<section_01>.rule8 missing>

shft3 ~ $<$<section_01>.shft3>

cmt  ~ $<$<section_01>.cmt>
cmt2 ~ $<$<section_01>.cmt2>
cmt3 ~ $<$<section_01>.cmt3>

rule5_pid  ~ $<$<section_01>.rule5_pid>
rule5_prog ~ $<$<section_01>.rule5_prog>
rule5_os   ~ $<$<section_01>.rule5_os>

rule6_host ~ $<$<section_01>.rule6_host>
rule6_user ~ $<$<section_01>.rule6_user>
rule6_pid  ~ $<$<section_01>.rule6_pid>
rule6_ppid ~ $<$<section_01>.rule6_ppid>
rule6_p    ~ $<$<section_01>.rule6_p>
rule6_sep  ~ $<$<section_01>.rule6_sep>

log1 ~ $<$<section_01>.log1>
log2 ~ $<$<section_01>.log2>
log3 ~ $<$<section_01>.log3>

empty_1 ~ $<$<section_01>.empty_1>
empty_2 ~ $<$<section_01>.empty_2>
empty_3 ~ $<$<section_01>.empty_3>
empty_4 ~ $<$<section_01>.empty_4>

