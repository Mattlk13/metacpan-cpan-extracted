#!perl

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2020-10-14'; # DATE
our $DIST = 'App-OrgUtils'; # DIST
our $VERSION = '0.481'; # VERSION

use 5.010001;
use strict;
use warnings;
use Log::ger;

use Scalar::Util qw(refaddr);
use Perinci::CmdLine::Any;

our %SPEC;

sub _move_item {
    my ($item, $done_doc, $args, $ref_num_moved) = @_;

    my @parents;
    my $parent = $item;
    while ($parent = $parent->parent) {
        unshift @parents, $parent;
    }
    shift @parents; # skip root document

  FILTER:
    {
        last unless defined($args->{include_pat}) ||
            defined($args->{exclude_pat});
        my $include = 0;
        for my $parent (@parents) {
            my $title = $parent->title->as_string;
            if (defined($args->{include_pat}) &&
                    $title =~ /$args->{include_pat}/) {
                $include = 1;
            }
            if (defined($args->{exclude_pat}) &&
                    $title =~ /$args->{exclude_pat}/) {
                log_info "Todo item '%s' is under headline '%s' (matches exclude_pat %s), skipped",
                    $item->title->as_string,
                    $title,
                    $args->{exclude_pat};
                return;
            }
        }

        unless ($include) {
            log_info "Todo item '%s' is not under any headlines which match include_pat %s",
                $item->title->as_string,
                $args->{include_pat};
            return;
        }
    }

    # recreate the structure in $done_doc
    my $done_parent = $done_doc;
    for my $parent (@parents) {
        my $title = $parent->title->as_string;
        $title =~ s/\s+\z//;
        my $found;
        for my $el (@{ $done_parent->children }) {
            next unless $el->isa("Org::Element::Headline");
            my $el_title = $el->title->as_string;
            $el_title =~ s/\s+\z//;
            if ($el->isa("Org::Element::Headline") &&
                    $el_title eq $title) {
                $found = $el;
                last;
            }
        }
        if ($found) {
            $done_parent = $found;
        } else {
            my $new_p = Org::Element::Headline->new(
                document => $done_doc,
                parent => $done_parent,
                level => $parent->level,
                children => [],
            );
            $new_p->title(Org::Element::Text->new(
                document => $done_doc,
                parent => $new_p,
                text => $title,
                children => [],
            ));
            log_trace("Creating new headline in done doc: %s", $title);
            push @{ $done_parent->children }, $new_p;
            $done_parent = $new_p;
        }
    }
    $done_parent->{children} //= [];
    push @{ $done_parent->children }, $item;

    # remove from undone
    my $i = -1;
    for my $el (@{ $item->parent->children }) {
        $i++;
        if (refaddr($el) eq refaddr($item)) {
            log_info "Moving todo item '%s' from undone to done doc", $item->title->as_string;
            splice(@{ $item->parent->children }, $i, 1);
            ${ $ref_num_moved }++;
            last;
        }
    }
}

$SPEC{move_done_todos} = {
    v => 1.1,
    summary => 'Move done todos from one Org file to another',
    description => <<'_',

**WARNING: PLEASE BACKUP OR COMMIT YOUR UNSAVED WORK TO YOUR TODO FILE BEFORE USING THIS UTILITY. THIS UTILITY MODIFIES YOUR TODO FILE.**.

This utility can move done todos from one file to another. One typical use-case
is to archive done todo items from your todo file. The structure in the original
file will be maintained. For example, suppose you have this file:

    * category 1 [0/0]
    ** TODO one
    ** DONE two
    ** DONE three
    * category 2 [0/0]
    ** TODO four
    * category 3 [0/0]
    ** DONE five

then when the done todos are moved, the target file will be something like this
(existing items in the target file are maintained):

    * category 1 [2/2]
    ** DONE two
    ** DONE three
    * category 3 [0/0]
    ** DONE five

and the original file will become:

    * category 1 [0/0]
    ** TODO one
    * category 2 [0/0]
    ** TODO four
    * category 3 [0/0]

_
    args => {
        undone_file => {
            schema => 'str*', # XXX filename
            req => 1,
            pos => 0,
        },
        done_file => {
            summary => 'Will print to stdout if unspecified',
            schema => 'str*', # XXX filename
            pos => 1,
        },
        include_pat => {
            summary => 'Only include todo items under this headline pattern',
            schema => 're*',
        },
        exclude_pat => {
            summary => 'Exclude todo items under this headline pattern',
            schema => 're*',
        },
    },
    features => {
        dry_run => {default=>1},
    },
    examples => [
        {
            summary => 'Strip done items from todo.org into done.org (simulation mode, the default mode)',
            src => '[[prog]] todo.org done.org',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
        {
            summary => 'Strip done items from todo.org into done.org',
            src => '[[prog]] todo.org done.org --no-dry-run',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
        {
            summary => 'Strip done items from todo.org and put it into a new file done1.org',
            src => '[[prog]] todo.org --no-dry-run >done1.org',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
        {
            summary => 'Strip done items from todo.org and print it to stdout (NOTE: you might want to save the stdout output because they are stripped from todo.org)',
            src => '[[prog]] todo.org --no-dry-run',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
    ],
};
sub move_done_todos {
    require Org::Document;
    require Org::Parser;
    require Path::Tiny;

    my %args = @_;

    my $orgp = Org::Parser->new;

    my $undone_doc = $orgp->parse_file($args{undone_file});
    my $done_doc   = defined $args{done_file} && (-f $args{done_file}) ?
        $orgp->parse_file($args{done_file}) :
        Org::Document->new(from_string => '');

    my $num_moved = 0;
    $undone_doc->walk(
        sub {
            my $el = shift;
            return unless $el->isa("Org::Element::Headline") &&
                $el->is_todo && $el->is_done;
            log_info("Found done todo: %s", $el->title->as_string);
            _move_item($el, $done_doc,  \%args, \$num_moved);
        });

    log_info "Number of items moved: %d", $num_moved;

    if ($args{-dry_run}) {
        log_info "[DRY] Saving %s", $args{undone_file};
    } else {
        Path::Tiny->new($args{undone_file})->spew_utf8($undone_doc->as_string);
    }

    if (defined $args{done_file}) {
        if ($args{-dry_run}) {
            log_info "[DRY] Saving %s", $args{done_file};
            return [304, "OK"];
        } else {
            Path::Tiny->new($args{done_file})->spew_utf8($done_doc->as_string);
            return [200, "OK"];
        }
    } else {
        return [200, "OK", $done_doc->as_string, {"cmdline.skip_format"=>1}];
    }
}

Perinci::CmdLine::Any->new(
    url => '/main/move_done_todos',
    log => 1,
)->run;

# ABSTRACT: Move done todos from one Org file to another
# PODNAME: move-done-todos

__END__

=pod

=encoding UTF-8

=head1 NAME

move-done-todos - Move done todos from one Org file to another

=head1 VERSION

This document describes version 0.481 of move-done-todos (from Perl distribution App-OrgUtils), released on 2020-10-14.

=head1 SYNOPSIS

Usage:

 % move-done-todos [--config-path=path | -c] [--config-profile=profile |
     -P] [--debug] [--(no)dry-run] [--exclude-pat=s] [--format=name]
     [--include-pat=s] [--json] [--log-level=level] [--(no)naked-res]
     [--no-config | -C] [--no-env] [--page-result[=program]] [--quiet]
     [--trace] [--verbose] <undone_file> [done_file]

Examples:

Strip done items from todo.org into done.org (simulation mode, the default mode):

 % move-done-todos todo.org done.org

Strip done items from todo.org into done.org:

 % move-done-todos todo.org done.org --no-dry-run

Strip done items from todo.org and put it into a new file done1.org:

 % move-done-todos todo.org --no-dry-run >done1.org

Strip done items from todo.org and print it to stdout (NOTE: you might want to save the stdout output because they are stripped from todo.org):

 % move-done-todos todo.org --no-dry-run

=head1 DESCRIPTION

B<WARNING: PLEASE BACKUP OR COMMIT YOUR UNSAVED WORK TO YOUR TODO FILE BEFORE USING THIS UTILITY. THIS UTILITY MODIFIES YOUR TODO FILE.>.

This utility can move done todos from one file to another. One typical use-case
is to archive done todo items from your todo file. The structure in the original
file will be maintained. For example, suppose you have this file:

 * category 1 [0/0]
 ** TODO one
 ** DONE two
 ** DONE three
 * category 2 [0/0]
 ** TODO four
 * category 3 [0/0]
 ** DONE five

then when the done todos are moved, the target file will be something like this
(existing items in the target file are maintained):

 * category 1 [2/2]
 ** DONE two
 ** DONE three
 * category 3 [0/0]
 ** DONE five

and the original file will become:

 * category 1 [0/0]
 ** TODO one
 * category 2 [0/0]
 ** TODO four
 * category 3 [0/0]

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--done-file>=I<s>

Will print to stdout if unspecified.

=item B<--exclude-pat>=I<s>

Exclude todo items under this headline pattern.

=item B<--include-pat>=I<s>

Only include todo items under this headline pattern.

=item B<--undone-file>=I<s>*

=back

=head2 Configuration options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--no-config>, B<-C>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--page-result>

Filter output through a pager.

=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--no-dry-run>

Disable simulation mode (also via DRY_RUN=0).

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C move-done-todos move-done-todos

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete move-done-todos 'p/*/`move-done-todos`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/move-done-todos.conf>, F<~/move-done-todos.conf>, or F</etc/move-done-todos.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

 done_file (see --done-file)
 exclude_pat (see --exclude-pat)
 format (see --format)
 include_pat (see --include-pat)
 log_level (see --log-level)
 naked_res (see --naked-res)
 undone_file (see --undone-file)

=head1 ENVIRONMENT

=head2 MOVE_DONE_TODOS_OPT => str

Specify additional command-line options.

=head1 FILES

F<~/.config/move-done-todos.conf>

F<~/move-done-todos.conf>

F</etc/move-done-todos.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-OrgUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-OrgUtils>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-OrgUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
