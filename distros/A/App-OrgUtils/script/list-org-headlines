#!perl

use 5.010;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2024-01-09'; # DATE
our $DIST = 'App-OrgUtils'; # DIST
our $VERSION = '0.487'; # VERSION

binmode STDOUT, ":encoding(utf8)";
Perinci::CmdLine::Any->new(url=>'/App/ListOrgHeadlines/list_org_headlines')->run;

1;
# ABSTRACT: List all headlines in all Org files
# PODNAME: list-org-headlines

__END__

=pod

=encoding UTF-8

=head1 NAME

list-org-headlines - List all headlines in all Org files

=head1 VERSION

This document describes version 0.487 of list-org-headlines (from Perl distribution App-OrgUtils), released on 2024-01-09.

=head1 SYNOPSIS

 # list all headlines in all Org files
 $ list-org-headlines ~/*.org

 # instead of only listing its title, list details about each headline
 $ list-org-headlines --detail FILES ...

 # list all todo items in all Org files
 $ list-org-headlines --todo FILES ...

 # list headlines that are not todo items in all Org files
 $ list-org-headlines --notodo FILES ...

 # list up to level 2 only
 $ list-org-headlines --tolevel 2 FILES ...

 # list *only* level 3
 $ list-org-headlines --from-level 3 --to-level 3 FILES ...

=head1 DESCRIPTION

This is a simple application to list headlines in Org files, first created as a
demo for L<Org::Parser>.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--file>=I<s@>*

(No description)


Can also be specified as the 1st command-line argument and onwards.

Can be specified multiple times.

=item B<--files-json>=I<s>

See C<--file>.

Can also be specified as the 1st command-line argument and onwards.

=item B<--time-zone>=I<s>

Will be passed to parser's options.

If not set, TZ environment variable will be picked as default.


=item B<--today-json>=I<s>

Assume today's date (JSON-encoded).

See C<--today>.

=item B<--today>=I<s>

Assume today's date.

You can provide Unix timestamp or DateTime object. If you provide a DateTime
object, remember to set the correct time zone.


=back

=head2 Configuration options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

Can actually be specified multiple times to instruct application to read from
multiple configuration files (and merge them).


=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

A single configuration file can contain profiles, i.e. alternative sets of
values that can be selected. For example:

 [profile=dev]
 username=foo
 pass=beaver
 
 [profile=production]
 username=bar
 pass=honey

When you specify C<--config-profile=dev>, C<username> will be set to C<foo> and
C<password> to C<beaver>. When you specify C<--config-profile=production>,
C<username> will be set to C<bar> and C<password> to C<honey>.


=item B<--no-config>, B<-C>

Do not use any configuration file.

If you specify C<--no-config>, the application will not read any configuration
file.


=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

If you specify C<--no-env>, the application wil not read any environment
variable.


=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

Output can be displayed in multiple formats, and a suitable default format is
chosen depending on the application and/or whether output destination is
interactive terminal (i.e. whether output is piped). This option specifically
chooses an output format.


=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

 [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
C<--naked-res> so you just get:

 [1,2,3]


=item B<--page-result>

Filter output through a pager.

This option will pipe the output to a specified pager program. If pager program
is not specified, a suitable default e.g. C<less> is chosen.


=item B<--view-result>

View output using a viewer.

This option will first save the output to a temporary file, then open a viewer
program to view the temporary file. If a viewer program is not chosen, a
suitable default, e.g. the browser, is chosen.


=back

=head2 Other options

=over

=item B<--allow-duplicates>

Whether to allow headline to be listed more than once.

This is only relevant when C<group_by_tags> is on. Normally when a headline has
several tags, it will only be listed under its first tag. But when this option
is turned on, the headline will be listed under each of its tag (which mean a
single headline will be listed several times).


=item B<--detail>, B<-l>

Show details instead of just titles.

=item B<--done>

Only show todo items that are done.

=item B<--due-in>=I<s>

Only show todo items that are (nearing|passed) due.

If value is not set, then will use todo item's warning period (or, if todo item
does not have due date or warning period in its due date, will use the default
14 days).

If value is set to something smaller than the warning period, the todo item will
still be considered nearing due when the warning period is passed. For example,
if today is 2011-06-30 and due_in is set to 7, then todo item with due date
<2011-07-10 > won't pass the filter (it's still 10 days in the future, larger
than 7) but <2011-07-10 Sun +1y -14d> will (warning period 14 days is already
passed by that time).


=item B<--from-level>=I<s>

Only show headlines having this level as the minimum.

Default value:

 1

=item B<--group-by-tags>

Whether to group result by tags.

If set to true, instead of returning a list, this function will return a hash of
lists, keyed by tag: {tag1: [hl1, hl2, ...], tag2: [...]}. Note that a headline
that has several tags will only be listed under its first tag, unless when
C<allow_duplicates> is set to true, in which case the headline will be listed
under each of its tag.


=item B<--has-tag>=I<s@>

Only show headlines that have the specified tags.

Can be specified multiple times.

=item B<--has-tags-json>=I<s>

Only show headlines that have the specified tags (JSON-encoded).

See C<--has-tag>.

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--lacks-tag>=I<s@>

Only show headlines that don't have the specified tags.

Can be specified multiple times.

=item B<--lacks-tags-json>=I<s>

Only show headlines that don't have the specified tags (JSON-encoded).

See C<--lacks-tag>.

=item B<--maximum-priority>=I<s>

Only show todo items that have at most this priority.

Note that the default priority list is [A, B, C] (A being the highest) and it
can be customized using the C<#+PRIORITIES> setting.


=item B<--minimum-priority>=I<s>

Only show todo items that have at least this priority.

Note that the default priority list is [A, B, C] (A being the highest) and it
can be customized using the C<#+PRIORITIES> setting.


=item B<--priority>=I<s>

Only show todo items that have this priority.

=item B<--sort-json>=I<s>

Specify sorting (JSON-encoded).

See C<--sort>.

=item B<--sort>=I<s>

Specify sorting.

Default value:

 "due_date"

If string, must be one of 'due_date', '-due_date' (descending).

If code, sorting code will get [REC, DUE_DATE, HL] as the items to compare,
where REC is the final record that will be returned as final result (can be a
string or a hash, if 'detail' is enabled), DUE_DATE is the DateTime object (if
any), and HL is the Org::Headline object.


=item B<--state>=I<s>

Only show todo items that have this state.

=item B<--to-level>=I<s>

Only show headlines having this level as the maximum.

=item B<--todo>

Only show headlines that are todos.

=item B<--version>, B<-v>

Display program's version and exit.

=item B<--with-unknown-priority>

Also show items with no/unknown priority.

Relevant only when used with C<minimum_priority> and/or C<maximum_priority>.

If this option is turned on, todo items that does not have any priority or have
unknown priorities will I<still> be included. Otherwise they will not be
included.


=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C list-org-headlines list-org-headlines

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete list-org-headlines 'p/*/`list-org-headlines`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/u1/.config/list-org-headlines.conf>, F</home/u1/list-org-headlines.conf>, or F</etc/list-org-headlines.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable equals some string: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal some string: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when the value of an environment variable includes some string: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. If you only want a section to be read when the value of an environment variable does not include some string: C<[env=HOSTNAME!*=server ...]> or C<[SOMESECTION env=HOSTNAME!*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

 allow_duplicates (see --allow-duplicates)
 detail (see --detail)
 done (see --done)
 due_in (see --due-in)
 files (see --file)
 format (see --format)
 from_level (see --from-level)
 group_by_tags (see --group-by-tags)
 has_tags (see --has-tag)
 lacks_tags (see --lacks-tag)
 maximum_priority (see --maximum-priority)
 minimum_priority (see --minimum-priority)
 naked_res (see --naked-res)
 priority (see --priority)
 sort (see --sort)
 state (see --state)
 time_zone (see --time-zone)
 to_level (see --to-level)
 today (see --today)
 todo (see --todo)
 with_unknown_priority (see --with-unknown-priority)

=head1 ENVIRONMENT

=head2 LIST_ORG_HEADLINES_OPT

String. Specify additional command-line options.

=head1 FILES

=head2 /home/u1/.config/list-org-headlines.conf

=head2 /home/u1/list-org-headlines.conf

=head2 /etc/list-org-headlines.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-OrgUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-OrgUtils>.

=head1 SEE ALSO

B<list-org-todos>

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-OrgUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
