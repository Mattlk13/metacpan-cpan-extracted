#!perl

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2024-07-11'; # DATE
our $DIST = 'App-yamlsel'; # DIST
our $VERSION = '0.009'; # VERSION

Perinci::CmdLine::Any->new(
    url => '/App/yamlsel/yamlsel',
    read_config => 0,
    read_env => 0,
)->run;

# ABSTRACT: Select YAML elements using CSel (CSS-selector-like) syntax
# PODNAME: yamlsel

__END__

=pod

=encoding UTF-8

=head1 NAME

yamlsel - Select YAML elements using CSel (CSS-selector-like) syntax

=head1 VERSION

This document describes version 0.009 of yamlsel (from Perl distribution App-yamlsel), released on 2024-07-11.

=head1 SYNOPSIS

 % yamlsel file.yaml "Scalar[value > 3]"

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--count>

Shortcut for --node-action count.

See C<--node-action>.

=item B<--dump>

Shortcut for --node-action dump.

See C<--node-action>.

=item B<--eval>=I<s@>

--eval E is shortcut for --action eval:E.

See C<--node-action>.

Can be specified multiple times.

=item B<--expr>=I<s>

(No description)


Can also be specified as the 2nd command-line argument.

=item B<--file>=I<s>

Default value:

 "-"

Can also be specified as the 1st command-line argument.

=item B<--node-action>=I<s@>

Specify action(s) to perform on matching nodes.

Default value:

 ["print_as_string"]

Each action can be one of the following:

=over

=item * C<count> will print the number of matching nodes.

=item * C<print_method> will call on or more of the node object's methods and print the
result. Example:

print_method:as_string

=item * C<dump> will show a indented text representation of the node and its
descendants. Each line will print information about a single node: its class,
followed by the value of one or more attributes. You can specify which
attributes to use in a dot-separated syntax, e.g.:

dump:tag.id.class

which will result in a node printed like this:

HTML::Element tag=p id=undef class=undef

=back

By default, if no attributes are specified, C<id> is used. If the node class does
not support the attribute, or if the value of the attribute is undef, then
C<undef> is shown.

=over

=item * C<eval> will execute Perl code for each matching node. The Perl code will be
called with arguments: C<($node)>. For convenience, C<$_> is also locally set to
the matching node. Example in L<htmlsel> you can add this action:

eval:'print $_->tag'

which will print the tag name for each matching L<HTML::Element> node.

=back


Can be specified multiple times.

=item B<--node-actions-json>=I<s>

Specify action(s) to perform on matching nodes (JSON-encoded).

See C<--node-action>.

=item B<--node-actions-on-descendants>=I<s>

Specify how descendants should be actioned upon.

Default value:

 ""

Valid values:

 ["","descendants_depth_first"]

This option sets how node action is performed (See C<node_actions> option).

When set to '' (the default), then only matching nodes are actioned upon.

When set to 'descendants_depth_first', then after each matching node is actioned
upon by an action, the descendants of the matching node are also actioned, in
depth-first order. This option is sometimes necessary e.g. when your node's
C<as_string()> method shows a node's string representation that does not include
its descendants.


=item B<--print>

Shortcut for --node-action print_as_string.

See C<--node-action>.

=item B<--print-method>=I<s@>

--print-method M is shortcut for --node-action print_method:M.

See C<--node-action>.

Can be specified multiple times.

=item B<--root>

Shortcut for --select-action=root.

See C<--select-action>.

=item B<--select-action>=I<s>

Specify how we should select nodes.

Default value:

 "csel"

Valid values:

 ["csel","root"]

The default is C<csel>, which will select nodes from the tree using the CSel
expression. Note that the root node itself is not included. For more details on
CSel expression, refer to L<Data::CSel>.

C<root> will return a single node which is the root node.


=item B<-e>=I<s@>

-e E is shortcut for --action eval:E.

See C<--node-action>.

Can be specified multiple times.

=item B<-R>

Shortcut for --node-action-on-descendants=descendants_depth_first.

See C<--node-actions-on-descendants>.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

Output can be displayed in multiple formats, and a suitable default format is
chosen depending on the application and/or whether output destination is
interactive terminal (i.e. whether output is piped). This option specifically
chooses an output format.


=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

 [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
C<--naked-res> so you just get:

 [1,2,3]


=item B<--page-result>

Filter output through a pager.

This option will pipe the output to a specified pager program. If pager program
is not specified, a suitable default e.g. C<less> is chosen.


=item B<--view-result>

View output using a viewer.

This option will first save the output to a temporary file, then open a viewer
program to view the temporary file. If a viewer program is not chosen, a
suitable default, e.g. the browser, is chosen.


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C yamlsel yamlsel

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete yamlsel 'p/*/`yamlsel`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-yamlsel>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-yamlsel>.

=head1 SEE ALSO

L<Data::CSel>, L<Data::CSel::WrapStruct>, L<CSel::Examples>

L<jsonsel>, a similar application but for selecting JSON elements.

L<orgsel>, a similar application but for selecting Org elements.

L<htmlsel>, a similar application but for selecting HTML elements using CSS
selector syntax.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2020, 2019, 2016 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-yamlsel>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
