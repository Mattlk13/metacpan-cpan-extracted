NAME
    App::GraphicsColorNamesUtils - Utilities related to Graphics::ColorNames

VERSION
    This document describes version 0.008 of App::GraphicsColorNamesUtils
    (from Perl distribution App-GraphicsColorNamesUtils), released on
    2023-12-05.

DESCRIPTION
    This distributions provides the following command-line utilities:

    *   colorcode2name

    *   colorname2code

    *   list-color-names

    *   list-color-schemes

    *   show-color-swatch

FUNCTIONS
  colorcode2name
    Usage:

     colorcode2name(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Convert RGB color code to name.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   approx => *bool*

        When a name with exact code is not found, find the several closest
        ones.

    *   code* => *color::rgb24*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  colorname2code
    Usage:

     colorname2code(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Convert color name to code.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   name* => *str*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list_color_names
    Usage:

     list_color_names(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List all color names from a Graphics::ColorNames scheme.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   detail => *true*

        (No description)

    *   scheme* => *perl::colorscheme::modname*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list_color_schemes
    Usage:

     list_color_schemes() -> [$status_code, $reason, $payload, \%result_meta]

    List all installed Graphics::ColorNames schemes.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  show_color_swatch
    Usage:

     show_color_swatch(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List all color names from a Graphics::ColorNames scheme as a color
    swatch.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   columns => *posint* (default: 1)

        (No description)

    *   row_height => *posint* (default: 3)

        (No description)

    *   scheme* => *perl::colorscheme::modname*

        (No description)

    *   table_width => *posint* (default: 80)

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-GraphicsColorNamesUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-GraphicsColorNamesUtils>.

SEE ALSO
AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTOR
    Steven Haryanto <stevenharyanto@gmail.com>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2023, 2020, 2018 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-GraphicsColorName
    sUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

