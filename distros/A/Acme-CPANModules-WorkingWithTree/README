NAME
    Acme::CPANModules::WorkingWithTree - List of modules to work with tree
    data structure

VERSION
    This document describes version 0.007 of
    Acme::CPANModules::WorkingWithTree (from Perl distribution
    Acme-CPANModules-WorkingWithTree), released on 2022-03-18.

DESCRIPTION
    Basics

    Perl classes to represent tree (node) structure: Tree::Object and
    Tree::ObjectXS (comes with several varieties). They provide methods like
    walking a tree, checking whether a node is the first child, getting
    sibling nodes, and so on.

    Perl modules to manipulate tree: Data::Tree, Tree::Simple.

    Memory-efficient tree nodes in Perl: Tree::Node.

    Creating

    Tree::From::Struct, Tree::From::ObjArray, Tree::From::Text,
    Tree::From::TextLines, Tree::Create::Callback,
    Tree::Create::Callback::ChildrenPerLevel, Tree::Create::Size,
    Tree::From::FS.

    Data::Random::Tree.

    Visualizing as text

    Tree::To::Text, Tree::To::TextLines.

    Text::Tree::Indented. This module accepts nested array of strings
    instead of tree object.

    Visualizing as graphics

    TODO

    Other modules

    Tree::To::FS.

    Tree::Shell.

    Special kinds of trees: TODO.

    Roles

    Role::TinyCommons::Tree::Node, Role::TinyCommons::Tree::NodeMethods.

    Modules that produce or work with
    Role::TinyCommons::Tree::Node-compliant tree objects

    Org::Parser, Org::Parser::Tiny.

    Tree::Dump.

    Data::CSel and its related modules: App::htmlsel, App::jsonsel,
    App::orgsel, App::podsel, App::ppisel, App::yamlsel, App::CSelUtils.

ACME::CPANMODULES ENTRIES
    *   Tree::Object - Generic tree objects

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::ObjectXS - Generic tree objects (with XS accessors, etc)

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Data::Tree - a hash-based tree-like data structure

        Author: TEX <https://metacpan.org/author/TEX>

    *   Tree::Simple - A simple tree object

        Author: RSAVAGE <https://metacpan.org/author/RSAVAGE>

    *   Tree::Node - Memory-efficient tree nodes in Perl

        Author: RRWO <https://metacpan.org/author/RRWO>

    *   Tree::From::Struct - Build a tree object from hash structure

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::From::ObjArray - Build a tree of objects from a nested array
        of objects

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::From::Text - Build a tree object from text

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::From::TextLines - Build a tree object from lines of text, each
        line indented to express structure

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::Create::Callback - Create tree object by using a callback

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::Create::Callback::ChildrenPerLevel - Create tree object by
        using a callback (and number of children per level)

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::Create::Size - Create a tree object of certain size

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::From::FS

    *   Data::Random::Tree - Create a random tree

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::To::Text - Show a tree object structure as text

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::To::TextLines - Render a tree object as indented text lines

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Text::Tree::Indented - render a tree data structure in the classic
        indented view

        Author: NEILB <https://metacpan.org/author/NEILB>

    *   Tree::To::FS - Create a directory structure using tree object

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::Shell - Navigate and manipulate in-memory tree objects using a
        CLI shell

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Role::TinyCommons::Tree::Node - Role for a tree node object

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Role::TinyCommons::Tree::NodeMethods - Role that provides tree node
        methods

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Org::Parser - Parse Org documents

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Org::Parser::Tiny - Parse Org documents with as little code (and no
        non-core deps) as possible

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Tree::Dump - Dump a tree object

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Data::CSel - Select tree node objects using CSS Selector-like syntax

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   App::htmlsel - Select HTML::Element nodes using CSel syntax

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   App::jsonsel - Select JSON elements using CSel (CSS-selector-like)
        syntax

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   App::orgsel - Select Org document elements using CSel
        (CSS-selector-like) syntax

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   App::podsel - Select Pod::Elemental nodes using CSel syntax

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   App::ppisel - Select PPI::Element nodes using CSel syntax

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   App::yamlsel - Select YAML elements using CSel (CSS-selector-like)
        syntax

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   App::CSelUtils - Utilities related to Data::CSel

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

FAQ
  What is an Acme::CPANModules::* module?
    An Acme::CPANModules::* module, like this module, contains just a list
    of module names that share a common characteristics. It is a way to
    categorize modules and document CPAN. See Acme::CPANModules for more
    details.

  What are ways to use this Acme::CPANModules module?
    Aside from reading this Acme::CPANModules module's POD documentation,
    you can install all the listed modules (entries) using cpanm-cpanmodules
    script (from App::cpanm::cpanmodules distribution):

     % cpanm-cpanmodules -n WorkingWithTree

    Alternatively you can use the cpanmodules CLI (from App::cpanmodules
    distribution):

        % cpanmodules ls-entries WorkingWithTree | cpanm -n

    or Acme::CM::Get:

        % perl -MAcme::CM::Get=WorkingWithTree -E'say $_->{module} for @{ $LIST->{entries} }' | cpanm -n

    or directly:

        % perl -MAcme::CPANModules::WorkingWithTree -E'say $_->{module} for @{ $Acme::CPANModules::WorkingWithTree::LIST->{entries} }' | cpanm -n

    This Acme::CPANModules module also helps lcpan produce a more meaningful
    result for "lcpan related-mods" command when it comes to finding related
    modules for the modules listed in this Acme::CPANModules module. See
    App::lcpan::Cmd::related_mods for more details on how "related modules"
    are found.

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/Acme-CPANModules-WorkingWithTree>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-Acme-CPANModules-WorkingWithTree>.

SEE ALSO
    Acme::CPANModules - about the Acme::CPANModules namespace

    cpanmodules - CLI tool to let you browse/view the lists

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla plugin and/or Pod::Weaver::Plugin. Any additional
    steps required beyond that are considered a bug and can be reported to
    me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022, 2021, 2020, 2019 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=Acme-CPANModules-Work
    ingWithTree>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

