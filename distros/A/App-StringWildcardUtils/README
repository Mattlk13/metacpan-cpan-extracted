NAME
    App::StringWildcardUtils - Utilities related to wildcard strings

VERSION
    This document describes version 0.001 of App::StringWildcardUtils (from
    Perl distribution App-StringWildcardUtils), released on 2020-02-09.

DESCRIPTION
    This distributions provides the following command-line utilities:

    *   contains-bash-wildcard

    *   contains-sql-wildcard

    *   convert-bash-wildcard-to-re

    *   convert-bash-wildcard-to-sql-wildcard

    *   parse-bash-wildcard

    *   parse-sql-wildcard

FUNCTIONS
  contains_bash_wildcard
    Usage:

     contains_bash_wildcard(%args) -> [status, msg, payload, meta]

    Check whether string contains Unix-style wildcard.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   quiet => *true*

    *   string* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  contains_sql_wildcard
    Usage:

     contains_sql_wildcard(%args) -> [status, msg, payload, meta]

    Check whether string contains SQL wildcard.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   quiet => *true*

    *   string* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  convert_bash_wildcard_to_re
    Usage:

     convert_bash_wildcard_to_re(%args) -> [status, msg, payload, meta]

    Convert Unix-style wildcard to regex.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   string* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  convert_bash_wildcard_to_sql_wildcard
    Usage:

     convert_bash_wildcard_to_sql_wildcard(%args) -> [status, msg, payload, meta]

    Convert Unix-style wildcard to SQL wildcard.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   string* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  parse_bash_wildcard
    Usage:

     parse_bash_wildcard(%args) -> [status, msg, payload, meta]

    Parse Unix-style wildcard using String::Wildcard::Bash and return the
    captures.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   string* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  parse_sql_wildcard
    Usage:

     parse_sql_wildcard(%args) -> [status, msg, payload, meta]

    Parse SQL-style wildcard using String::Wildcard::SQL and return the
    captures.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   string* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-StringWildcardUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-StringWildcardUtils>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-StringWildcardUti
    ls>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

SEE ALSO
    String::Wilcard::Bash

    String::Wilcard::SQL

AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2020 by perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

