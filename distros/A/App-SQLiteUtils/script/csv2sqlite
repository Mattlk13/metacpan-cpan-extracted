#!perl

# Note: This script is a CLI for Riap function /App/SQLiteUtils/import_csv_to_sqlite
# and generated automatically using Perinci::CmdLine::Gen version 0.502

use 5.010001;
use strict;
use warnings;
use Log::ger;

use Perinci::CmdLine::Any;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2023-02-24'; # DATE
our $DIST = 'App-SQLiteUtils'; # DIST
our $VERSION = '0.006'; # VERSION

my $cmdline = Perinci::CmdLine::Any->new(
    url => "/App/SQLiteUtils/import_csv_to_sqlite",
    program_name => "csv2sqlite",
    log => 1,
    read_config => 0,
    read_env => 0,
);

$cmdline->run;

# ABSTRACT: Shorter alias for import-csv-to-sqlite
# PODNAME: csv2sqlite

__END__

=pod

=encoding UTF-8

=head1 NAME

csv2sqlite - Shorter alias for import-csv-to-sqlite

=head1 VERSION

This document describes version 0.006 of csv2sqlite (from Perl distribution App-SQLiteUtils), released on 2023-02-24.

=head1 SYNOPSIS

B<csv2sqlite> B<L<--help|/"--help, -h, -?">> (or B<L<-h|/"--help, -h, -?">>, B<L<-?|/"--help, -h, -?">>)

B<csv2sqlite> B<L<--version|/"--version, -v">> (or B<L<-v|/"--version, -v">>)

B<csv2sqlite> [B<L<--debug|/"--debug">>|B<L<--log-level|/"--log-level=s">>=I<level>|B<L<--quiet|/"--quiet">>|B<L<--trace|/"--trace">>|B<L<--verbose|/"--verbose">>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]] [B<L<--table|/"--table=s">>=I<str>] -- [I<L<csv_file|/"--csv-file=s">>] E<lt>I<L<db_file|/"--db-file=s*">>E<gt>

=head1 DESCRIPTION

This tool utilizes the C<sqlite3> command-line client to import a CSV file into
SQLite database. It pipes the following commands to the C<sqlite3> CLI:

 .mode csv
 .import CSVNAME TABLENAME

where CSVNAME is the CSV filename and TABLENAME is the table name.

If CSV filename is not specified, will be assumed to be C<-> (stdin).

If table name is not specified, it will be derived from the CSV filename
(basename) with extension removed. C<-> will become C<stdin>. All non-alphanumeric
characters will be replaced with C<_> (underscore). If filename starts with
number, C<t> prefix will be added. If table already exists, a suffix of C<_2>,
C<_3>, and so on will be added. Some examples:

 CSV filename          Table name         Note
 ------------          ----------         ----
 -                     stdin
 -                     stdin_2            If 'stdin' already exists
 /path/to/t1.csv       t1
 /path/to/t1.csv       t1_2               If 't1' already exists
 /path/to/t1.csv       t1_3               If 't1' and 't1_2' already exist
 ./2.csv               t2
 report 2021.csv       report_2021
 report 2021.rev1.csv  report_2021

Note that the B<sqlite3> CLI client can be used non-interactively as well. You
can pipe the commands to its stdin, e.g.:

 % echo -e ".mode csv\n.import /PATH/TO/FILE.CSV TABLENAME" | sqlite3 DB_FILE

But this utility gives you convenience of picking a table name automatically.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--csv-file>=I<s>

Default value:

 "-"

Can also be specified as the 1st command-line argument.

=item B<--db-file>=I<s>*

(No description)


Can also be specified as the 2nd command-line argument.

=item B<--table>=I<s>

(No description)


=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

By default, these log levels are available (in order of increasing level of
importance, from least important to most): C<trace>, C<debug>, C<info>,
C<warn>/C<warning>, C<error>, C<fatal>. By default, the level is usually set to
C<warn>, which means that log statements with level C<info> and less important
levels will not be shown. To increase verbosity, choose C<info>, C<debug>, or
C<trace>.

For more details on log level and logging, as well as how new logging levels can
be defined or existing ones modified, see L<Log::ger>.


=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

Output can be displayed in multiple formats, and a suitable default format is
chosen depending on the application and/or whether output destination is
interactive terminal (i.e. whether output is piped). This option specifically
chooses an output format.


=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

 [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
C<--naked-res> so you just get:

 [1,2,3]


=item B<--page-result>

Filter output through a pager.

This option will pipe the output to a specified pager program. If pager program
is not specified, a suitable default e.g. C<less> is chosen.


=item B<--view-result>

View output using a viewer.

This option will first save the output to a temporary file, then open a viewer
program to view the temporary file. If a viewer program is not chosen, a
suitable default, e.g. the browser, is chosen.


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C csv2sqlite csv2sqlite

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete csv2sqlite 'p/*/`csv2sqlite`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-SQLiteUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-SQLiteUtils>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2023, 2021 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-SQLiteUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
