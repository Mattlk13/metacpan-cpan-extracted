NAME
    App::VivaldiUtils - Utilities related to the Vivaldi browser

VERSION
    This document describes version 0.008 of App::VivaldiUtils (from Perl
    distribution App-VivaldiUtils), released on 2020-08-18.

SYNOPSIS
DESCRIPTION
    This distribution includes several utilities related to the Vivaldi
    browser:

    *   kill-vivaldi

    *   list-vivaldi-profiles

    *   pause-vivaldi

    *   ps-vivaldi

    *   restart-vivaldi

    *   start-vivaldi

    *   terminate-vivaldi

    *   unpause-vivaldi

    *   vivaldi-has-processes

    *   vivaldi-is-paused

    *   vivaldi-is-running

FUNCTIONS
  pause_vivaldi
    Usage:

     pause_vivaldi(%args) -> [status, msg, payload, meta]

    Pause (kill -STOP) Vivaldi.

    A modern browser now runs complex web pages and applications. Despite
    browser's power management feature, these pages/tabs on the browser
    often still eat considerable CPU cycles even though they only run in the
    background. Stopping (kill -STOP) the browser processes is a simple and
    effective way to stop CPU eating on Unix. It can be performed whenever
    you are not using your browser for a little while, e.g. when you are
    typing on an editor or watching a movie. When you want to use your
    browser again, simply unpause it.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   users => *array[unix::local_uid]*

        Kill browser processes that belong to certain user(s) only.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  ps_vivaldi
    Usage:

     ps_vivaldi(%args) -> [status, msg, payload, meta]

    List Vivaldi processes.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   users => *array[unix::local_uid]*

        Kill browser processes that belong to certain user(s) only.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  restart_vivaldi
    Usage:

     restart_vivaldi(%args) -> [status, msg, payload, meta]

    Restart Vivaldi.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   quiet => *true*

    *   vivaldi_cmd => *array[str]|str* (default: "vivaldi")

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  start_vivaldi
    Usage:

     start_vivaldi(%args) -> [status, msg, payload, meta]

    Start Vivaldi if not already started.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   quiet => *true*

    *   vivaldi_cmd => *array[str]|str* (default: "vivaldi")

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  terminate_vivaldi
    Usage:

     terminate_vivaldi(%args) -> [status, msg, payload, meta]

    Terminate (kill -KILL) Vivaldi.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   users => *array[unix::local_uid]*

        Kill browser processes that belong to certain user(s) only.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  unpause_vivaldi
    Usage:

     unpause_vivaldi(%args) -> [status, msg, payload, meta]

    Unpause (resume, continue, kill -CONT) Vivaldi.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   users => *array[unix::local_uid]*

        Kill browser processes that belong to certain user(s) only.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  vivaldi_has_processes
    Usage:

     vivaldi_has_processes(%args) -> [status, msg, payload, meta]

    Check whether Vivaldi has processes.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   quiet => *true*

    *   users => *array[unix::local_uid]*

        Kill browser processes that belong to certain user(s) only.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  vivaldi_is_paused
    Usage:

     vivaldi_is_paused(%args) -> [status, msg, payload, meta]

    Check whether Vivaldi is paused.

    Vivaldi is defined as paused if *all* of its processes are in 'stop'
    state.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   quiet => *true*

    *   users => *array[unix::local_uid]*

        Kill browser processes that belong to certain user(s) only.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  vivaldi_is_running
    Usage:

     vivaldi_is_running(%args) -> [status, msg, payload, meta]

    Check whether Vivaldi is running.

    Vivaldi is defined as running if there are some Vivaldi processes that
    are *not* in 'stop' state. In other words, if Vivaldi has been started
    but is currently paused, we do not say that it's running. If you want to
    check if Vivaldi process exists, you can use "ps_vivaldi".

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   quiet => *true*

    *   users => *array[unix::local_uid]*

        Kill browser processes that belong to certain user(s) only.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-VivaldiUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-VivaldiUtils>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-VivaldiUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

SEE ALSO
    Some other CLI utilities related to Vivaldi: dump-vivaldi-history (from
    App::DumpVivaldiHistory).

    App::OperaUtils

    App::FirefoxUtils

    App::OperaUtils

    App::BrowserUtils

AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2020, 2019 by perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

