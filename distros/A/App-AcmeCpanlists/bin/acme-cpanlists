#!perl

our $DATE = '2016-11-19'; # DATE
our $VERSION = '0.09'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

my $prefix = '/App/AcmeCpanlists/';

Perinci::CmdLine::Any->new(
    url => $prefix,
    subcommands => {
        'ls-mods'    => {url=>"${prefix}list_mods"},
        'ls'         => {url=>"${prefix}list_lists"},
        'get'        => {url=>"${prefix}get_list"},
        'view'       => {url=>"${prefix}view_list"},
        'ls-entries'     => {url=>"${prefix}list_entries"},
        'ls-entries-all' => {url=>"${prefix}list_entries_all"},
        'ls-entry-lists' => {url=>"${prefix}list_entry_lists"},
    },
)->run;

# ABSTRACT: The Acme::CPANLists CLI
# PODNAME: acme-cpanlists

__END__

=pod

=encoding UTF-8

=head1 NAME

acme-cpanlists - The Acme::CPANLists CLI

=head1 VERSION

This document describes version 0.09 of acme-cpanlists (from Perl distribution App-AcmeCpanlists), released on 2016-11-19.

=head1 SYNOPSIS

Install some C<Acme::CPANLists::> modules and then ...

List all installed Acme::CPANLists modules:

 % acme-cpanlists ls-mods

List all lists from all installed modules:

 % acme-cpanlists ls
 % acme-cpanlists ls -l

List all lists from a module (in this case, L<Acme::CPANLists::PERLANCAR>):

 % acme-cpanlists ls -m PERLANCAR

Only list all author lists:

 % acme-cpanlists ls -m PERLANCAR -t author
 % acme-cpanlists ls -m PERLANCAR -t a

Only list all module lists:

 % acme-cpanlists ls -m PERLANCAR -t module
 % acme-cpanlists ls -m PERLANCAR -t m

View the list as rendered POD:

 % acme-cpanlists view -m PERLANCAR "Modules I'm avoiding"

Get the list (raw):

 % acme-cpanlists get -m PERLANCAR "Modules I'm avoiding"

Find lists that mention a module:

 % acme-cpanlists ls --mentions-module Foo::Bar

Find lists that mention an author:

 % acme-cpanlists ls --mentions-author PERLANCAR

List entries of a list:

 % acme-cpanlists ls-entries "PERLANCAR's favorite apps"
 App::lcpan
 App::pause
 App::SetScreensaverTimeout

Install all entries of a module list:

 % acme-cpanlists ls-entries "PERLANCAR's favorite apps" | cpanm -n

List entries from all lists:

 % acme-cpanlists ls-entries-all -l

Find out in which lists a module or author is mentioned:

 % acme-cpanlists ls-entry-lists File::Slurper

=head1 SUBCOMMANDS

=head2 B<get>

Get a CPAN list as raw data.

=head2 B<ls>

List CPAN lists.

=head2 B<ls-entries>

List entries of a CPAN list.

=head2 B<ls-entries-all>

List entries from all installed CPAN lists.

=head2 B<ls-entry-lists>

Find out in which lists a module or author is mentioned.

=head2 B<ls-mods>

List all installed Acme::CPANLists modules.

=head2 B<view>

View a CPAN list as rendered POD.

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--config-path>=I<filename>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--no-config>

Do not use any configuration file.

=item B<--no-env>

Do not read environment for default options.

=item B<--subcommands>

List available subcommands.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head2 Options for subcommand get

=over

=item B<--mentions-author>=I<s>

=item B<--mentions-module>=I<s>

=item B<--module>=I<s>, B<-m>

=item B<--query>=I<s>*

=item B<--type>=I<s>, B<-t>

Valid values:

 ["author","a","module","m"]

=back

=head2 Options for subcommand ls

=over

=item B<--detail>, B<-l>

=item B<--mentions-author>=I<s>

=item B<--mentions-module>=I<s>

=item B<--module>=I<s>, B<-m>

=item B<--query>=I<s>

=item B<--type>=I<s>, B<-t>

Valid values:

 ["author","a","module","m"]

=back

=head2 Options for subcommand ls-entries

=over

=item B<--alternate>

Only list alternate entries.

=item B<--detail>, B<-l>

=item B<--mentions-author>=I<s>

=item B<--mentions-module>=I<s>

=item B<--module>=I<s>, B<-m>

=item B<--query>=I<s>*

=item B<--related>

Only list related entries.

=item B<--type>=I<s>, B<-t>

Valid values:

 ["author","a","module","m"]

=back

=head2 Options for subcommand ls-entries-all

=over

=item B<--alternate>

Only list alternate entries.

=item B<--detail>, B<-l>

=item B<--mentions-author>=I<s>

=item B<--mentions-module>=I<s>

=item B<--module>=I<s>, B<-m>

=item B<--query>=I<s>

=item B<--related>

Only list related entries.

=item B<--type>=I<s>, B<-t>

Valid values:

 ["author","a","module","m"]

=back

=head2 Options for subcommand ls-entry-lists

=over

=item B<--alternate>

Only list alternate entries.

=item B<--mentions-author>=I<s>

=item B<--mentions-module>=I<s>

=item B<--module>=I<s>, B<-m>

=item B<--query>=I<s>*

=item B<--related>

Only list related entries.

=item B<--type>=I<s>, B<-t>

Valid values:

 ["author","a","module","m"]

=back

=head2 Options for subcommand view

=over

=item B<--mentions-author>=I<s>

=item B<--mentions-module>=I<s>

=item B<--module>=I<s>, B<-m>

=item B<--query>=I<s>*

=item B<--type>=I<s>, B<-t>

Valid values:

 ["author","a","module","m"]

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C acme-cpanlists acme-cpanlists

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install L<shcompgen> which allows you to
activate completion scripts for several kinds of scripts on multiple shells.
Some CPAN distributions (those that are built with
L<Dist::Zilla::Plugin::GenShellCompletion>) will even automatically enable shell
completion for their included scripts (using C<shcompgen>) at installation time,
so you can immadiately have tab completion.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete acme-cpanlists 'p/*/`acme-cpanlists`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/acme-cpanlists.conf>, F<~/acme-cpanlists.conf>, or F</etc/acme-cpanlists.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

=head2 Common for all subcommands

 format (see --format)
 naked_res (see --naked-res)

=head2 Configuration for subcommand 'get'

 mentions_author (see --mentions-author)
 mentions_module (see --mentions-module)
 module (see --module)
 query (see --query)
 type (see --type)

=head2 Configuration for subcommand 'ls'

 detail (see --detail)
 mentions_author (see --mentions-author)
 mentions_module (see --mentions-module)
 module (see --module)
 query (see --query)
 type (see --type)

=head2 Configuration for subcommand 'ls-entries'

 alternate (see --alternate)
 detail (see --detail)
 mentions_author (see --mentions-author)
 mentions_module (see --mentions-module)
 module (see --module)
 query (see --query)
 related (see --related)
 type (see --type)

=head2 Configuration for subcommand 'ls-entries-all'

 alternate (see --alternate)
 detail (see --detail)
 mentions_author (see --mentions-author)
 mentions_module (see --mentions-module)
 module (see --module)
 query (see --query)
 related (see --related)
 type (see --type)

=head2 Configuration for subcommand 'ls-entry-lists'

 alternate (see --alternate)
 mentions_author (see --mentions-author)
 mentions_module (see --mentions-module)
 module (see --module)
 query (see --query)
 related (see --related)
 type (see --type)

=head2 Configuration for subcommand 'ls-mods'


=head2 Configuration for subcommand 'view'

 mentions_author (see --mentions-author)
 mentions_module (see --mentions-module)
 module (see --module)
 query (see --query)
 type (see --type)

=head1 ENVIRONMENT

=head2 ACME_CPANLISTS_OPT => str

Specify additional command-line options

=head1 FILES

~/.config/acme-cpanlists.conf

~/acme-cpanlists.conf

/etc/acme-cpanlists.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-AcmeCpanlists>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-AcmeCpanlists>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-AcmeCpanlists>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<Acme::CPANLists>

C<Acme::CPANLists::*> modules

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2016 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
