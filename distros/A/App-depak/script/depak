#!perl

# FRAGMENT id=shcompgen-hint command=depak

our $DATE = '2020-04-08'; # DATE
our $VERSION = '0.582'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::depak;

Perinci::CmdLine::depak->new(
    log => 1,
    url => '/App/depak/depak',
)->run;

# ABSTRACT: Pack your dependencies onto your script file
# PODNAME: depak

__END__

=pod

=encoding UTF-8

=head1 NAME

depak - Pack your dependencies onto your script file

=head1 VERSION

This document describes version 0.582 of depak (from Perl distribution App-depak), released on 2020-04-08.

=head1 SYNOPSIS

Basic usage:

 # outputs to stdout
 % depak yourscript.pl

 # specify output filename
 % depak yourscript.pl /tmp/yourscript.pl.packed

 # use datapack instead of the default fatpack
 % depak --pack-method datapack script script.packed

 # See debug messages:
 % depak --debug script >script.packed

Including and excluding modules:

 # add some more modules not detected by the tracer
 % depak -I Foo::Bar -I Foo::Baz script script.packed

 # change trace method, usually 'require' will give pretty complete result
 % depak -t require <script >script.packed

See more options:

 % depak --help

=head1 DESCRIPTION

B<depak>*) is a CLI application to pack your dependencies (required pure-Perl
modules) along with your Perl script into a single file. It will trace what
modules your script requires using one of several available methods, and include
them inside the script either using the fatpack or datapack technique. The
result is a free-standing script which can run on vanilla/core Perl
installation.

*) the name is a spelling variation of "dep-pack" (for "dependency pack"), and
is also an Indonesian word.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--put-hook-at-the-end>

Prefer modules from other sources (filesystem) first.

Normally, the `fatpack` or `datapack` require hook will be put at the front of
`@INC`. If this option is set to true, the require hook will be put at the end.
This means Perl will search modules from the regular sources (filesystem) first.
This is useful for example if you want your application to use the possibly
newer version of modules on the filesystem before using the packed version as
the fallback when some modules are not installed.


=back

=head2 Configuration options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--no-config>, B<-C>

Do not use any configuration file.

=back

=head2 Debugging options

=over

=item B<--debug-keep-tempdir>

Keep temporary directory for debugging.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Input options

=over

=item B<--input-file>=I<filename>, B<-i>

Path to input file (script to be packed).

Default value:

 "-"

`-` (or if unspecified) means to take from standard input (internally, a
temporary file will be created to handle this).


=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Module selection options

=over

=item B<--allow-xs-json>=I<s>

See C<--allow-xs>.

=item B<--allow-xs>=I<s@>

Allow adding a specified XS module.

Can be specified multiple times.

=item B<--exclude-dist-json>=I<distname>

Exclude all modules of dist (JSON-encoded).

See C<--exclude-dist>.

=item B<--exclude-dist>=I<distname>

Exclude all modules of dist.

Just like the `exclude` option, but will exclude module as well as other modules
from the same distribution. Module name must be the main module of the
distribution. Will determine other modules from the `.packlist` file.


Can be specified multiple times.

=item B<--exclude-list>=I<filename>

Exclude modules from a list in a file.

=item B<--exclude-module-json>=I<modulename>, B<--exclude>, B<-E>

Modules to exclude (JSON-encoded).

See C<--exclude-module>.

=item B<--exclude-module>=I<modulename>

Exclude a module.

When you don't want to include a module, specify it here.


Can be specified multiple times.

=item B<--exclude-pattern-json>=I<s>, B<-p>

Regex patterns of modules to exclude (JSON-encoded).

See C<--exclude-pattern>.

=item B<--exclude-pattern>=I<s@>

Regex pattern of modules to exclude.

When you don't want to include a pattern of modules, specify it here.


Can be specified multiple times.

=item B<--exclude-prereq-json>=I<s>

See C<--exclude-prereq>.

=item B<--exclude-prereq>=I<s@>

Allow script to depend on a module instead of packing it.

This option can be used to express that script will depend on a specified
module, instead of including it packed. The prereq-ed module, as well as other
modules in the same distribution, as well as its prereqs and so on recursively,
will be excluded from packing as well.

This option can be used to express dependency to an XS module, since XS modules
cannot be packed.

To query dependencies, a local CPAN index is used for querying speed. Thus, this
option requires that `lcpan` is installed and a fairly recent lcpan index is
available.


Can be specified multiple times.

=item B<--include-core>

Do not exclude core modules.

=item B<--include-dir-json>=I<dirname>

Include extra modules under directories (JSON-encoded).

See C<--include-dir>.

=item B<--include-dir>=I<dirname>

Include extra modules under a directory.

Can be specified multiple times.

=item B<--include-dist-json>=I<distname>

Include all modules of dist (JSON-encoded).

See C<--include-dist>.

=item B<--include-dist>=I<distname>

Include all modules of dist.

Just like the `include` option, but will include module as well as other modules
from the same distribution. Module name must be the main module of the
distribution. Will determine other modules from the `.packlist` file.


Can be specified multiple times.

=item B<--include-list>=I<filename>

Include extra modules from a list in a file.

=item B<--include-module-json>=I<modulename>, B<--include>, B<-I>

Include extra modules (JSON-encoded).

See C<--include-module>.

=item B<--include-module>=I<modulename>

Include an extra module.

When the tracing process fails to include a required module, you can add it
here.


Can be specified multiple times.

=item B<--include-prereq-json>=I<s>

See C<--include-prereq>.

=item B<--include-prereq>=I<s@>

Include module and its recursive dependencies for packing.

This option can be used to include a module, as well as other modules in the
same distribution as that module, as well as the distribution's recursive
dependencies, for packing. Dependencies will be searched using a local CPAN
index. This is a convenient alternative to tracing a module. So you might want
to use this option together with setting `trace_method` to `none`.

This option requires that `lcpan` is installed and a fairly recent lcpan index
is available.


Can be specified multiple times.

=item B<--perl-version>=I<s>, B<-V>

Perl version to target, defaults to current running version.

This is for determining which modules are considered core and should be skipped
by default (when `exclude_core` option is enabled). Different perl versions have
different sets of core modules as well as different versions of the modules.


=item B<--skip-not-found>

Instead of dying, skip when module to add is not found.

This option is useful when you use `include_prereq`, because modules without its
own .pm files will also be included (CPAN indexes packages, including those that
do not have their own .pm files).

By default, this option is turned off unless when you use `include_prereq` where
this option is by default turned on. You can of course override the default by
explicitly specify this option.


=item B<--trace-extra-opts-json>=I<s>

Pass more options to `App::tracepm` (JSON-encoded).

See C<--trace-extra-opts>.

=item B<--trace-extra-opts>=I<s>

Pass more options to `App::tracepm`.

=item B<--trace-method>=I<s>, B<-t>

Which method to use to trace dependencies.

Default value:

 "fatpacker"

Valid values:

 ["fatpacker","require","prereqscanner","prereqscanner_lite","prereqscanner_recurse","prereqscanner_lite_recurse","none"]

The default is `fatpacker`, which is the same as what `fatpack trace` does.
Different tracing methods have different pro's and con's, one method might
detect required modules that another method does not, and vice versa. There are
several methods available, please see `App::tracepm` for more details.

A special value of `none` is also provided. If this is selected, then depak will
not perform any tracing. Usually used in conjunction with `--include-from`.


=item B<--use-json>=I<modulename>

Additional modules to "use" (JSON-encoded).

See C<--use>.

=item B<--use>=I<modulename>

Additional module to "use".

Will be passed to the tracer. Will currently only affect the `fatpacker` and
`require` methods (because those methods actually run your script).


Can be specified multiple times.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--output-file>=I<filename>, B<-o>

Path to output file.

Default value:

 "-"

`-` (or if unspecified) means to output to stdout.


=item B<--overwrite>

Overwrite output if previously exists.

=item B<--page-result>

Filter output through a pager.

=item B<--shebang>=I<s>

Set shebang line/path.

Default value:

 "/usr/bin/perl"

=back

=head2 Packing options

=over

=item B<--pack-method>=I<s>

Packing method to use.

Default value:

 "fatpack"

Valid values:

 ["fatpack","datapack"]

Either `fatpack` (the default) or `datapack`. Fatpack puts packed modules inside
Perl variables and load them via require hook. Datapack puts packed modules in
__DATA__ section. For more details about each method, please consult
`Module::FatPack` and `Module::DataPack`.

One thing to remember is, with datapack, your script cannot load modules during
compile-time (`use`): all modules must be loaded during run-time (`require`)
when data section is already available. Also, your script currently cannot
contain data section of its own.


=back

=head2 Stripping options

=over

=item B<--no-stripper-comment>

Set strip_comment=0 (don't strip comments) in Perl::Stripper.

=item B<--no-stripper-pod>

Set strip_pod=0 (don't strip POD) in Perl::Stripper.

=item B<--no-stripper-ws>

Set strip_ws=0 (don't strip whitespace) in Perl::Stripper.

=item B<--squish>

Squish included modules using Perl::Squish.

=item B<--strip>

Strip included modules using Perl::Strip.

=item B<--stripper>

Strip included modules using Perl::Stripper.

=item B<--stripper-log>

Set strip_log=1 (strip log statements) in Perl::Stripper.

=item B<--stripper-maintain-linum>

Set maintain_linum=1 in Perl::Stripper.

=back

=head2 Testing options

=over

=item B<--test>, B<-T>

Test the resulting output.

Testing is done by running the resulting packed script with perl. To test, at
least one test case is required (see `--test-case-json`). Test cases specify
what arguments to give to program, what exit code we expect, and what the output
should contain.


=item B<--test-cases-json>=I<s>

See C<--test-cases>.

=item B<--test-cases>=I<s>

Example case:

    {"args":["--help"], "exit_code":0, "perl_args":["-Mlib::core::only"], "output_like":"Usage:"}


=back

=head2 Tracing options

=over

=item B<--arg>=I<s@>

Script argument.

Will be used when running your script, e.g. when `trace_method` is `fatpacker`
or `require`. For example, if your script requires three arguments: `--foo`,
`2`, `"bar baz"` then you can either use:

    % depak script output --args --foo --args 2 --args "bar baz"

or:

    % depak script output --args-json '["--foo",2,"bar baz"]'


Can be specified multiple times.

=item B<--args-json>=I<s>

Script arguments (JSON-encoded).

See C<--arg>.

=item B<--multiple-runs-json>=I<s>

Pass to tracepm (JSON-encoded).

See C<--multiple-runs>.

=item B<--multiple-runs>=I<s>

Pass to tracepm.

=item B<--trace-method>=I<s>, B<-t>

Which method to use to trace dependencies.

Default value:

 "fatpacker"

Valid values:

 ["fatpacker","require","prereqscanner","prereqscanner_lite","prereqscanner_recurse","prereqscanner_lite_recurse","none"]

The default is `fatpacker`, which is the same as what `fatpack trace` does.
Different tracing methods have different pro's and con's, one method might
detect required modules that another method does not, and vice versa. There are
several methods available, please see `App::tracepm` for more details.

A special value of `none` is also provided. If this is selected, then depak will
not perform any tracing. Usually used in conjunction with `--include-from`.


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C depak depak

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete depak 'p/*/`depak`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/depak.conf>, F<~/depak.conf>, or F</etc/depak.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

 allow_xs (see --allow-xs)
 args (see --arg)
 debug_keep_tempdir (see --debug-keep-tempdir)
 exclude_core (see --include-core)
 exclude_dist (see --exclude-dist)
 exclude_list (see --exclude-list)
 exclude_module (see --exclude-module)
 exclude_pattern (see --exclude-pattern)
 exclude_prereq (see --exclude-prereq)
 format (see --format)
 include_dir (see --include-dir)
 include_dist (see --include-dist)
 include_list (see --include-list)
 include_module (see --include-module)
 include_prereq (see --include-prereq)
 input_file (see --input-file)
 log_level (see --log-level)
 multiple_runs (see --multiple-runs)
 naked_res (see --naked-res)
 output_file (see --output-file)
 overwrite (see --overwrite)
 pack_method (see --pack-method)
 perl_version (see --perl-version)
 put_hook_at_the_end (see --put-hook-at-the-end)
 shebang (see --shebang)
 skip_not_found (see --skip-not-found)
 squish (see --squish)
 strip (see --strip)
 stripper (see --stripper)
 stripper_comment (see --no-stripper-comment)
 stripper_log (see --stripper-log)
 stripper_maintain_linum (see --stripper-maintain-linum)
 stripper_pod (see --no-stripper-pod)
 stripper_ws (see --no-stripper-ws)
 test (see --test)
 test_cases (see --test-cases)
 trace_extra_opts (see --trace-extra-opts)
 trace_method (see --trace-method)
 use (see --use)

Profiles are also automatically matched to the name of the script being
processed, if not specified. For example:

 [profile=parse-id-phone]
 trace_method=require
 #overwrite=1
 include=Parse::PhoneNumber::ID
 include=Perinci::CmdLine::Lite
 include=Data::Check::Structure
 include=Text::Table::Tiny

which will automatically be used when you depak a script named
C<parse-id-phone>.

=head1 ENVIRONMENT

=head2 DEPAK_OPT => str

Specify additional command-line options.

=head2 DEBUG_KEEP_TEMPDIR => bool

Set default for C<debug_keep_tempdir> option.

=head1 FILES

F<~/.config/depak.conf>

F<~/depak.conf>

F</etc/depak.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-depak>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-depak>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-depak>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<App::FatPacker>, L<Module::FatPack>, L<App::FatPackUtils>

L<Module::DataPack>, L<App::DataPackUtils>

For producing free-standing Perl scripts/applications, there are other
alternatives like L<PAR::Packer> (can also pack XS modules and compress the
included files in a special archive, but with higher startup time and temporary
directory to extract stuffs), L<App::staticperl> (packs perl, core modules, and
your modules/scripts in a single static binary).

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2020, 2019, 2018, 2017, 2016, 2015, 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
