NAME
    App::CSelUtils - Utilities related to Data::CSel

VERSION
    This document describes version 0.089 of App::CSelUtils (from Perl
    distribution App-CSelUtils), released on 2022-10-17.

DESCRIPTION
    This distribution contains the following utilities:

    *   ddsel

    *   parse-csel

FUNCTIONS
  ddsel
    Usage:

     ddsel(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Select Perl data structure elements using CSel (CSS-selector-like)
    syntax.

    Note that this operates against Perl data structure, not Perl source
    code elements (see ppisel for that). File is Perl source code that
    defines data structure, e.g.:

     {
         summary => 'This is a hash',
         # this is an array inside a hash
         array => [
             1, 2, 3,
         ],
     };

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   expr => *str*

        (No description)

    *   file => *filename* (default: "-")

        (No description)

    *   node_actions => *array[str]* (default: ["print_as_string"])

        Specify action(s) to perform on matching nodes.

        Each action can be one of the following:

        *   "count" will print the number of matching nodes.

        *   "print_method" will call on or more of the node object's methods
            and print the result. Example:

            print_method:as_string

        *   "dump" will show a indented text representation of the node and
            its descendants. Each line will print information about a single
            node: its class, followed by the value of one or more
            attributes. You can specify which attributes to use in a
            dot-separated syntax, e.g.:

            dump:tag.id.class

            which will result in a node printed like this:

            HTML::Element tag=p id=undef class=undef

        By default, if no attributes are specified, "id" is used. If the
        node class does not support the attribute, or if the value of the
        attribute is undef, then "undef" is shown.

        *   "eval" will execute Perl code for each matching node. The Perl
            code will be called with arguments: "($node)". For convenience,
            $_ is also locally set to the matching node. Example in htmlsel
            you can add this action:

            eval:'print $_->tag'

            which will print the tag name for each matching HTML::Element
            node.

    *   node_actions_on_descendants => *str* (default: "")

        Specify how descendants should be actioned upon.

        This option sets how node action is performed (See "node_actions"
        option).

        When set to '' (the default), then only matching nodes are actioned
        upon.

        When set to 'descendants_depth_first', then after each matching node
        is actioned upon by an action, the descendants of the matching node
        are also actioned, in depth-first order. This option is sometimes
        necessary e.g. when your node's "as_string()" method shows a node's
        string representation that does not include its descendants.

    *   select_action => *str* (default: "csel")

        Specify how we should select nodes.

        The default is "csel", which will select nodes from the tree using
        the CSel expression. Note that the root node itself is not included.
        For more details on CSel expression, refer to Data::CSel.

        "root" will return a single node which is the root node.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  parse_csel
    Usage:

     parse_csel(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Parse CSel expression.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   expr* => *str*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-CSelUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-CSelUtils>.

SEE ALSO
    htmlsel, orgsel, jsonsel, yamlsel, podsel, ppisel

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022, 2021, 2020, 2019, 2016 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-CSelUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

