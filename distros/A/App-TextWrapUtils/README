NAME
    App::TextWrapUtils - Utilities related to text wrapping

VERSION
    This document describes version 0.005 of App::TextWrapUtils (from Perl
    distribution App-TextWrapUtils), released on 2022-12-14.

DESCRIPTION
    This distributions provides the following command-line utilities:

    *   nowrap

    *   nowrap-clipboard

    *   textunwrap

    *   textunwrap-clipboard

    *   textwrap

    *   textwrap-clipboard

    Keywords: fold.

FUNCTIONS
  textunwrap
    Usage:

     textunwrap(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Unwrap (unfold) multiline paragraphs to single-line ones.

    This is a shortcut for:

     % textwrap -w 999999

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   backend => *perl::modname* (default: "Text::ANSI::Util")

        (No description)

    *   filename => *filename* (default: "-")

        Use dash ("-") to read from stdin.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  textunwrap_clipboard
    Usage:

     textunwrap_clipboard(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Unwrap (unfold) multiline paragraphs in clipboard to single-line ones.

    This is shortcut for something like:

     % clipget | textunwrap ... | clipadd

    where clipget and clipadd are utilities to get text from clipboard and
    set text of clipboard, respectively.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   backend => *perl::modname* (default: "Text::ANSI::Util")

        (No description)

    *   clipboard_manager => *str*

        Explicitly set clipboard manager to use.

        The default, when left undef, is to detect what clipboard manager is
        running.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  textwrap
    Usage:

     textwrap(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Wrap (fold) paragraphs in text using one of several Perl modules.

    Paragraphs are separated with two or more blank lines.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   backend => *perl::modname* (default: "Text::ANSI::Util")

        (No description)

    *   filename => *filename* (default: "-")

        Use dash ("-") to read from stdin.

    *   width => *posint* (default: 80)

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  textwrap_clipboard
    Usage:

     textwrap_clipboard(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Wrap (fold) paragraphs in text in clipboard using one of several Perl
    modules.

    This is shortcut for something like:

     % clipget | textwrap ... | clipadd

    where clipget and clipadd are utilities to get text from clipboard and
    set text of clipboard, respectively.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   backend => *perl::modname* (default: "Text::ANSI::Util")

        (No description)

    *   clipboard_manager => *str*

        Explicitly set clipboard manager to use.

        The default, when left undef, is to detect what clipboard manager is
        running.

    *   width => *posint* (default: 80)

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-TextWrapUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-TextWrapUtils>.

SEE ALSO
    Text::Wrap, Text::ANSI::Util and other backends.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-TextWrapUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

