#!perl

# Note: This script is a CLI for Riap function /App/CalendarDatesUtils/list_calendar_dates
# and generated automatically using Perinci::CmdLine::Gen version 0.491

our $DATE = '2019-12-11'; # DATE
our $DIST = 'App-CalendarDatesUtils'; # DIST
our $VERSION = '0.011'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Classic;

my $cmdline = Perinci::CmdLine::Classic->new(
    url => "/App/CalendarDatesUtils/list_calendar_dates",
    program_name => "list-calendar-dates",
    read_config => 0,
    read_env => 0,
    use_utf8 => 1,
);

$cmdline->run;

# ABSTRACT: List dates from one or more Calendar::Dates::* modules
# PODNAME: list-calendar-dates

__END__

=pod

=encoding UTF-8

=head1 NAME

list-calendar-dates - List dates from one or more Calendar::Dates::* modules

=head1 VERSION

This document describes version 0.011 of list-calendar-dates (from Perl distribution App-CalendarDatesUtils), released on 2019-12-11.

=head1 SYNOPSIS

Usage:

 % list-calendar-dates [options] [year] [month] [day]

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--action>=I<s>

Default value:

 "list-dates"

Valid values:

 ["list-dates","list-modules"]

=item B<--detail>, B<-l>

Whether to show detailed record for each date.

=item B<--param>=I<s>%

Specify parameters.

Each value is a name-value pair, use I<key=value> syntax. Can be specified multiple times.

=item B<--params-json>=I<s>

Specify parameters (JSON-encoded).

See C<--param>.

=item B<-L>

List all Calendar::Dates modules (eqv to --action=list-modules).

See C<--action>.

=back

=head2 Entry filtering options

=over

=item B<--all-entries>, B<-A>

Return all entries (include low-priority ones).

By default, low-priority entries (entries tagged `low-priority`) are not
included. This option will include those entries.

When combined with --all-years, this option will also cause all very early years
and all years far into the future to be included also.


=item B<--all-years>

List dates from all available years instead of a single year.

Note that by default, following common usage pattern, dates with years that are
too old (< 10 years ago) or that are too far into the future (> 10 years from
now) are not included, unless you combine this option with --all-entries (-A).


=item B<--day>=I<s>, B<-D>

=item B<--exclude-tag>=I<s@>, B<-T>

Can be specified multiple times.

=item B<--exclude-tags-json>=I<s>

See C<--exclude-tag>.

=item B<--include-tag>=I<s@>, B<-t>

Can be specified multiple times.

=item B<--include-tags-json>=I<s>

See C<--include-tag>.

=item B<--max-year>=I<s>

=item B<--min-year>=I<s>

=item B<--month>=I<s>, B<-M>

=item B<--past>

Only show entries that are less than (at least) today's date.

=item B<--year>=I<s>, B<-Y>

Specify year of dates to list.

The default is to list dates in the current year. You can specify all_years
instead to list dates from all available years.


=back

=head2 Module selection options

=over

=item B<--all-modules>, B<-a>

Use all installed Calendar::Dates::* modules.

=item B<--modules-json>=I<s>, B<-m>

Name(s) of Calendar::Dates::* module (without the prefix) (JSON-encoded).

See C<--modules>.

=item B<--modules>=I<s@>

Name(s) of Calendar::Dates::* module (without the prefix).

Can be specified multiple times.

=back

=head2 Output options

=over

=item B<--format-options>=I<s>

Pass options to formatter.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Equivalent to --format=json-pretty.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C list-calendar-dates list-calendar-dates

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete list-calendar-dates 'p/*/`list-calendar-dates`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-CalendarDatesUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-CalendarDatesUtils>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-CalendarDatesUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2019 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
