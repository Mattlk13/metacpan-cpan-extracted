#!perl

our $DATE = '2020-04-08'; # DATE
our $VERSION = '0.008'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::github::cmd;

my $prefix = '/App/github/cmd/';

Perinci::CmdLine::github::cmd->new(
    url => $prefix,
    log => 1,
    pass_cmdline_object => 1,
    config_filename => ["github-cmd.conf"],
    subcommands => {
        'get-user'    => {url => "${prefix}get_user"},

        'get-repo'    => {url => "${prefix}get_repo"},
        'repo-exists' => {url => "${prefix}repo_exists"},
        'list-repos'  => {url => "${prefix}list_repos"},
        'create-repo' => {url => "${prefix}create_repo"},
        'delete-repo' => {url => "${prefix}delete_repo"},
        'rename-repo' => {url => "${prefix}rename_repo"},
    },
)->run;

# ABSTRACT: Yet another github CLI
# PODNAME: github-cmd

__END__

=pod

=encoding UTF-8

=head1 NAME

github-cmd - Yet another github CLI

=head1 VERSION

This document describes version 0.008 of github-cmd (from Perl distribution App-github-cmd), released on 2020-04-08.

=head1 SYNOPSIS

=head2 Setup

In F<~/.config/github-cmd.conf>:

 login = YOUR_GITHUB_LOGIN
 pass  = YOUR_GITHUB_PASSWORD

 # or
 access_token = YOUR_API_TOKEN

or just run C<github-cmd>, which will prompt you login+pass and write them to
configuration.

=head2 User commands

 % github-cmd get-user
 % github-cmd get-user perlancar

=head2 Repo commands

 % github-cmd list-repos
 % github-cmd list-repos -l
 % github-cmd list-repos --start 100

 % github-cmd get-repo perl-App-github-cmd
 % github-cmd get-repo --user perlancar perl-App-github-cmd

 % github-cmd repo-exists perl-App-github-cmd
 1

 % github-cmd repo-exists --user perlancar perl-App-github-cmd-FOO
 0

 % github-cmd create-repo foo

 % github-cmd delete-repo foo

 % github-cmd rename-repo foo bar

=head1 DESCRIPTION

B<EARLY RELEASE. More subcommands coming soon.>

This is yet another Github CLI, written in Perl using the L<Perinci::CmdLine>
framework and L<Net::GitHub::V3> API client.

=head1 SUBCOMMANDS

=head2 B<create-repo>

Create a repository.

=head2 B<delete-repo>

=head2 B<get-repo>

Get information about a repository.

=head2 B<get-user>

Get information about a user.

=head2 B<list-repos>

List user's repositories.

=head2 B<rename-repo>

Rename a repository.

=head2 B<repo-exists>

Check whether a repository exists.

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--access-token>=I<s>

=item B<--config-path>=I<s>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--json>

Set output format to json.

=item B<--log-level>=I<s>

Set log level.

=item B<--login>=I<s>

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--no-config>

Do not use any configuration file.

=item B<--no-env>

Do not read environment for default options.

=item B<--page-result>

Filter output through a pager.

=item B<--pass>=I<s>

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--subcommands>

List available subcommands.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head2 Options for subcommand create-repo

=over

=item B<--description>=I<s>

=item B<--homepage-json>=I<s>

See C<--homepage>.

=item B<--homepage>=I<s>

=item B<--repo>=I<s>*

=back

=head2 Options for subcommand delete-repo

=over

=item B<--repo>=I<s>*

=item B<--user>=I<s>

=back

=head2 Options for subcommand get-repo

=over

=item B<--repo>=I<s>*

=item B<--user>=I<s>

=back

=head2 Options for subcommand get-user

=over

=item B<--user>=I<s>

=back

=head2 Options for subcommand list-repos

=over

=item B<--detail>, B<-l>

=item B<--start>=I<s>

Default value:

 0

=back

=head2 Options for subcommand rename-repo

=over

=item B<--new-name>=I<s>*

=item B<--repo>=I<s>*

=item B<--user>=I<s>

=back

=head2 Options for subcommand repo-exists

=over

=item B<--repo>=I<s>*

=item B<--user>=I<s>

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C github-cmd github-cmd

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete github-cmd 'p/*/`github-cmd`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/s1/.config/github-cmd.conf>, F</home/s1/github-cmd.conf>, or F</etc/github-cmd.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

=head2 Common for all subcommands

 access_token (see --access-token)
 format (see --format)
 log_level (see --log-level)
 login (see --login)
 naked_res (see --naked-res)
 pass (see --pass)

=head2 Configuration for subcommand create-repo

 description (see --description)
 homepage (see --homepage)
 repo (see --repo)

=head2 Configuration for subcommand delete-repo

 repo (see --repo)
 user (see --user)

=head2 Configuration for subcommand get-repo

 repo (see --repo)
 user (see --user)

=head2 Configuration for subcommand get-user

 user (see --user)

=head2 Configuration for subcommand list-repos

 detail (see --detail)
 start (see --start)

=head2 Configuration for subcommand rename-repo

 new_name (see --new-name)
 repo (see --repo)
 user (see --user)

=head2 Configuration for subcommand repo-exists

 repo (see --repo)
 user (see --user)

=head1 ENVIRONMENT

=head2 HP_SGGQBDS_OPT => str

Specify additional command-line options.

=head1 FILES

F</home/s1/.config/github-cmd.conf>

F</home/s1/github-cmd.conf>

F</etc/github-cmd.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-github-cmd>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-github-cmd>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-github-cmd>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<App::ph> - another GitHub CLI written by TOKUHIROM. It is last released in
2013 and only contains a few subcommands.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2020, 2019, 2018 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
