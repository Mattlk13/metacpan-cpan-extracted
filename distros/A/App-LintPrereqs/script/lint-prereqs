#!perl

our $DATE = '2019-12-17'; # DATE
our $VERSION = '0.541'; # VERSION

use Perinci::CmdLine::Any;

my $cmd = Perinci::CmdLine::Any->new(
    url => '/App/LintPrereqs/lint_prereqs',
    log => 1,
    pass_cmdline_object => 1,
);
push @{ $cmd->config_dirs }, ".";
$cmd->run;

# ABSTRACT: Check extraneous/missing/incorrect prerequisites in dist.ini
# PODNAME: lint-prereqs

__END__

=pod

=encoding UTF-8

=head1 NAME

lint-prereqs - Check extraneous/missing/incorrect prerequisites in dist.ini

=head1 VERSION

This document describes version 0.541 of lint-prereqs (from Perl distribution App-LintPrereqs), released on 2019-12-17.

=head1 SYNOPSIS

Usage:

 % lint-prereqs [options]

=head1 DESCRIPTION

lint-prereqs can improve your prereqs specification in C<dist.ini> by reporting
prereqs that are extraneous (specified but unused), missing (used/required but
not specified), or incorrect (mismatching version between what's specified in
C<dist.ini> vs in source code, incorrect phase like test prereqs specified in
runtime, etc).

Checking actual usage of prereqs is done using L<Perl::PrereqScanner> (or
L<Perl::PrereqScanner::Lite>).

Sections that will be checked for prereqs include C<[Prereqs / *]>, as well as
C<OSPrereqs>, C<Extras/lint-prereqs/Assume-*>. Designed to work with prerequisites
that are manually written. Does not work if you use AutoPrereqs (using
AutoPrereqs basically means that you do not specify prereqs and just use
whatever modules are detected by the scanner.)

Sometimes there are prerequisites that you know are used but can't be detected
by the scanner, or you want to include anyway. If this is the case, you can
instruct lint_prereqs to assume that the prerequisite is used.

 ;!lint_prereqs assume-used "even though we know it is not currently used"
 Foo::Bar=0
 
 ;!lint_prereqs assume-used "we are forcing a certain version"
 Baz=0.12

Sometimes there are also prerequisites that are detected by scan_prereqs, but
are false positives (L<Perl::PrereqScanner::Lite> sometimes does this because
its parser is simpler) or you know are already provided by some other modules.
So to make lint-prereqs ignore them:

 [Extras / lint-prereqs / assume-provided]
 Qux::Quux=0

You can also add a C<[versions]> section in your C<lint-prereqs.conf>
configuration containing minimum versions that you want for certain modules,
e.g.:

 [versions]
 Bencher=0.30
 Log::ger=0.19
 ...

then if there is a prereq specified less than the minimum versions,
C<lint-prereqs> will also complain.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--extra-runtime-dir>=I<s@>

Add extra directories to scan for runtime requirements.

Can be specified multiple times.

=item B<--extra-runtime-dirs-json>=I<s>

Add extra directories to scan for runtime requirements (JSON-encoded).

See C<--extra-runtime-dir>.

=item B<--extra-test-dir>=I<s@>

Add extra directories to scan for test requirements.

Can be specified multiple times.

=item B<--extra-test-dirs-json>=I<s>

Add extra directories to scan for test requirements (JSON-encoded).

See C<--extra-test-dir>.

=item B<--fix>, B<-F>

Attempt to automatically fix the errors.

`lint-prereqs` can attempt to automatically fix the errors by
adding/removing/moving prereqs in `dist.ini`. Not all errors can be
automatically fixed. When modifying `dist.ini`, a backup in `dist.ini~` will be
created.


=item B<--no-core-prereqs>

If set to 0 (the default), will complain if there are prerequisites to core
modules. If set to 1, prerequisites to core modules are required just like other
modules.


=item B<--perl-version>=I<s>

Perl version to use (overrides scan_prereqs/dist.ini).

=item B<--scanner>=I<s>

Which scanner to use.

Default value:

 "regular"

Valid values:

 ["regular","lite","nqlite"]

`regular` means <pm:Perl::PrereqScanner> which is PPI-based and is the slowest
but has the most complete support for Perl syntax.

`lite` means <pm:Perl::PrereqScanner::Lite> has uses an XS-based lexer and is
the fastest but might miss some Perl syntax (i.e. miss some prereqs) or crash if
given some weird code.

`nqlite` means <pm:Perl::PrereqScanner::NotQuiteLite> which is faster than
`regular` but not as fast as `lite`.


=back

=head2 Configuration options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--no-config>, B<-C>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C lint-prereqs lint-prereqs

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete lint-prereqs 'p/*/`lint-prereqs`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/u1/.config/lint-prereqs.conf>, F</home/u1/lint-prereqs.conf>, F</etc/lint-prereqs.conf>, or F<./lint-prereqs.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

 core_prereqs (see --no-core-prereqs)
 extra_runtime_dirs (see --extra-runtime-dir)
 extra_test_dirs (see --extra-test-dir)
 fix (see --fix)
 format (see --format)
 log_level (see --log-level)
 naked_res (see --naked-res)
 perl_version (see --perl-version)
 scanner (see --scanner)

=head1 ENVIRONMENT

=head2 LINT_PREREQS_OPT => str

Specify additional command-line options.

=head1 FILES

F</home/u1/.config/lint-prereqs.conf>

F</home/u1/lint-prereqs.conf>

F</etc/lint-prereqs.conf>

F<./lint-prereqs.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-LintPrereqs>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-LintPrereqs>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-LintPrereqs>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2019, 2017, 2016, 2015, 2014, 2013, 2012 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
