NAME
    App::RGBColorUtils - CLI utilities related to RGB color

VERSION
    This document describes version 0.005 of App::RGBColorUtils (from Perl
    distribution App-RGBColorUtils), released on 2025-03-19.

DESCRIPTION
    This distributions provides the following command-line utilities:

    *   mix-2-rgb-colors

    *   mix-rgb-colors

    *   rand-rgb-color

    *   rand-rgb-colors

    *   rgb-is-dark

    *   rgb-is-light

FUNCTIONS
  mix_2_rgb_colors
    Usage:

     mix_2_rgb_colors(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Mix two RGB colors.

    Examples:

    *   Example #1:

         mix_2_rgb_colors(color1 => "000000", color2 => "ffffff"); # -> [200, "OK", "7f7f7f", {}]

    *   Example #2:

         mix_2_rgb_colors(color1 => "ff0000", color2 => "00ff99"); # -> [200, "OK", "7f7f4c", {}]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   color1* => *color::rgb24*

        (No description)

    *   color2* => *color::rgb24*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  mix_rgb_colors
    Usage:

     mix_rgb_colors(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Mix several RGB colors together.

    Examples:

    *   Example #1:

         mix_rgb_colors(colors => ["000000", "ffffff", "99cc00"]); # -> [200, "OK", 889955, {}]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   colors* => *array[color::rgb24]*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  rand_rgb_colors
    Usage:

     rand_rgb_colors(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Generate some random RGB color values.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   avoid_colors => *array[color::rgb24]*

        (No description)

    *   from_color => *color::rgb24*

        (No description)

    *   hash_prefix => *bool*

        (No description)

    *   light_color => *bool*

        (No description)

    *   n => *posint* (default: 1)

        (No description)

    *   to_color => *color::rgb24*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  rgb_is_dark
    Usage:

     rgb_is_dark(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check if RGB color is dark.

    Examples:

    *   Example #1:

         rgb_is_dark(color => 112211);

        Result:

         [
           200,
           "OK",
           1,
           {
             "cmdline.exit_code" => 0,
             "cmdline.result"    => "RGB color '112211' is dark",
           },
         ]

    *   Example #2:

         rgb_is_dark(color => "ffccff");

        Result:

         [
           200,
           "OK",
           0,
           {
             "cmdline.exit_code" => 1,
             "cmdline.result"    => "RGB color 'ffccff' is NOT dark",
           },
         ]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   color* => *color::rgb24*

        (No description)

    *   quiet => *true*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  rgb_is_light
    Usage:

     rgb_is_light(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check if RGB color is light.

    Examples:

    *   Example #1:

         rgb_is_light(color => 112211);

        Result:

         [
           200,
           "OK",
           0,
           {
             "cmdline.exit_code" => 1,
             "cmdline.result"    => "RGB color '112211' is NOT light",
           },
         ]

    *   Example #2:

         rgb_is_light(color => "ffccff");

        Result:

         [
           200,
           "OK",
           1,
           {
             "cmdline.exit_code" => 0,
             "cmdline.result"    => "RGB color 'ffccff' is light",
           },
         ]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   color* => *color::rgb24*

        (No description)

    *   quiet => *true*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-RGBColorUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-RGBColorUtils>.

SEE ALSO
    Color::RGB::Util

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2025 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-RGBColorUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

