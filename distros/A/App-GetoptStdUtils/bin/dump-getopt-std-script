#!perl

# Note: This script is a CLI  for Riap function /Getopt/Std/Dump/dump_getopt_std_script
# and generated automatically using Perinci::CmdLine::Gen version 0.35

our $DATE = '2016-10-30'; # DATE
our $DIST = 'App-GetoptStdUtils'; # DIST
our $VERSION = '0.001'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

Perinci::CmdLine::Any->new(
    url => "/Getopt/Std/Dump/dump_getopt_std_script",
    program_name => "dump-getopt-std-script",
    default_format => "json",
)->run;

# ABSTRACT: Run a Getopt::Std-based script but only to dump the spec
# PODNAME: dump-getopt-std-script

__END__

=pod

=encoding UTF-8

=head1 NAME

dump-getopt-std-script - Run a Getopt::Std-based script but only to dump the spec

=head1 VERSION

This document describes version 0.001 of dump-getopt-std-script (from Perl distribution App-GetoptStdUtils), released on 2016-10-30.

=head1 SYNOPSIS

Usage:

 % dump-getopt-std-script [options] <filename>

=head1 DESCRIPTION

This function runs a CLI script that uses C<Getopt::Std> but monkey-patches
beforehand so that C<getopts()> or C<getopt()> will dump the spec and then exit.
The goal is to get the spec without actually running the script.

This can be used to gather information about the script and then generate
documentation about it or do other things (e.g. C<App::shcompgen> to generate a
completion script for the original script).

CLI script needs to use C<Getopt::Std>. This is detected currently by a simple
regex. If script is not detected as using C<Getopt::Std>, status 412 is
returned.

Will return an array: C<[$which, $spec]> where C<$which> is either C<getopt> or
C<getopts>.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--filename>=I<s>*, B<-f>

Path to the script.

=item B<--lib>=I<s@>, B<-I>

Libraries to unshift to @INC when running script.

Can be specified multiple times.

=item B<--libs-json>=I<s>

Libraries to unshift to @INC when running script (JSON-encoded).

See C<--lib>.

=item B<--skip-detect>, B<-D>

=back

=head2 Configuration options

=over

=item B<--config-path>=I<filename>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--no-config>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C dump-getopt-std-script dump-getopt-std-script

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install L<shcompgen> which allows you to
activate completion scripts for several kinds of scripts on multiple shells.
Some CPAN distributions (those that are built with
L<Dist::Zilla::Plugin::GenShellCompletion>) will even automatically enable shell
completion for their included scripts (using C<shcompgen>) at installation time,
so you can immadiately have tab completion.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete dump-getopt-std-script 'p/*/`dump-getopt-std-script`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/dump-getopt-std-script.conf>, F<~/dump-getopt-std-script.conf>, or F</etc/dump-getopt-std-script.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

 filename (see --filename)
 format (see --format)
 libs (see --lib)
 naked_res (see --naked-res)
 skip_detect (see --skip-detect)

=head1 ENVIRONMENT

=head2 DUMP_GETOPT_STD_SCRIPT_OPT => str

Specify additional command-line options

=head1 FILES

~/.config/dump-getopt-std-script.conf

~/dump-getopt-std-script.conf

/etc/dump-getopt-std-script.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-GetoptStdUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-GetoptStdUtils>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-GetoptStdUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2016 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
