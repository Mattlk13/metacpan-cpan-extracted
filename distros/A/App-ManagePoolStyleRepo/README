NAME
    App::ManagePoolStyleRepo - Manage pool-style repo directory

VERSION
    This document describes version 0.003 of App::ManagePoolStyleRepo (from
    Perl distribution App-ManagePoolStyleRepo), released on 2023-11-20.

FUNCTIONS
  get_item_metadata
    Usage:

     get_item_metadata(%args) -> any

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   item_path* => *filename*

        (No description)

    Return value: (any)

  list_items
    Usage:

     list_items(%args) -> [$status_code, $reason, $payload, \%result_meta]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   detail => *bool*

        (No description)

    *   has_tags => *array[str]*

        (No description)

    *   lacks_tags => *array[str]*

        (No description)

    *   pool1_pattern => *re* (default: qr(\Apool1(?:\..+)?\z))

        By default, "pool1" and "pool1.*" subdirectories under the repo are
        searched for items under a layer of intermediate subdirectories. You
        can customize using this option. But note that "pool2_pattern"
        option has precedence over this.

    *   pool2_pattern => *re* (default: qr(\Apool2(?:\..+)?\z))

        By default, "pool2" and "pool2.*" subdirectories under the repo are
        searched for items. You can customize using this option.

    *   pool_pattern => *re* (default: qr(\Apool(?:\..+)?\z))

        By default, "pool" and "pool.*" subdirectory under the repo are
        searched for items. You can customize using this option. But note
        that "pool1_pattern" and "pool2_pattern" options have precedence
        over this.

    *   q => *str*

        Search query.

    *   repo_path* => *dirname*

        Repo directory.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  update_index
    Usage:

     update_index(%args) -> [$status_code, $reason, $payload, \%result_meta]

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   pool1_pattern => *re* (default: qr(\Apool1(?:\..+)?\z))

        By default, "pool1" and "pool1.*" subdirectories under the repo are
        searched for items under a layer of intermediate subdirectories. You
        can customize using this option. But note that "pool2_pattern"
        option has precedence over this.

    *   pool2_pattern => *re* (default: qr(\Apool2(?:\..+)?\z))

        By default, "pool2" and "pool2.*" subdirectories under the repo are
        searched for items. You can customize using this option.

    *   pool_pattern => *re* (default: qr(\Apool(?:\..+)?\z))

        By default, "pool" and "pool.*" subdirectory under the repo are
        searched for items. You can customize using this option. But note
        that "pool1_pattern" and "pool2_pattern" options have precedence
        over this.

    *   repo_path* => *dirname*

        Repo directory.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2023, 2020 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report all bug reports or feature requests to
    <mailto:stevenharyanto@gmail.com>.

