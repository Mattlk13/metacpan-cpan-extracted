#!perl

use 5.010;
use strict;
use warnings;
use Log::ger; BEGIN { $ENV{LOG_LEVEL} //= 'info' }

use Perinci::CmdLine::Classic;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2023-11-20'; # DATE
our $DIST = 'App-ManagePoolStyleRepo'; # DIST
our $VERSION = '0.003'; # VERSION

my $prefix = '/App/ManagePoolStyleRepo/';
my $cli = Perinci::CmdLine::Classic->new(
    url => $prefix,
    log => 1,
    subcommands => {
        'update-index'  => {url=>"${prefix}update_index"},
        'list-items'    => {url=>"${prefix}list_items"},
    },
);
$cli->run;

# ABSTRACT: Manage my pending perl releases
# PODNAME: manage-pool-style-repo

__END__

=pod

=encoding UTF-8

=head1 NAME

manage-pool-style-repo - Manage my pending perl releases

=head1 VERSION

This document describes version 0.003 of manage-pool-style-repo (from Perl distribution App-ManagePoolStyleRepo), released on 2023-11-20.

=head1 SYNOPSIS

Pool-style repo can be used to store collections, e.g. movies, songs, books,
programs. To create a pool-style repo, first create a directory, e.g. C<movies>
along with C<movies/pool>:

 % mkdir movies
 % mkdir movies/pool

Put some items (movies) inside the pool (each item as a directory or a file; but
mostly you want to use directory to be able to put tags inside), e.g.:

 movies/pool/a wednesday (2008)/
 movies/pool/a wednesday (2008)/movie.mp4
 movies/pool/a wednesday (2008)/.tag-country-in
 movies/pool/a wednesday (2008)/.tag-genre-crime
 movies/pool/a wednesday (2008)/.tag-genre-drama

 movies/pool/andhadhun (2018)/
 movies/pool/andhadhun (2018)/movie.mp4
 movies/pool/andhadhun (2018)/movie.srt
 movies/pool/andhadhun (2018)/.tag-country-in
 movies/pool/andhadhun (2018)/.tag-genre-crime
 movies/pool/andhadhun (2018)/.tag-genre-thriller

 movies/pool/the raid - redemption (2011)/
 movies/pool/the raid - redemption (2011)/the-raid.mkv
 movies/pool/the raid - redemption (2011)/.tag-country-id
 movies/pool/the raid - redemption (2011)/.tag-genre-action
 movies/pool/the raid - redemption (2011)/.tag-genre-thriller

 movies/pool/the swimmer (1968)/
 movies/pool/the swimmer (1968)/swimmer.avi
 movies/pool/the swimmer (1968)/.tag-country-us
 movies/pool/the swimmer (1968)/.tag-genre-drama

 movies/pool/to_live_1994.mp4

 movies/pool/TS/toy-story.mp4
 movies/pool/TS/.tag-country-us
 movies/pool/TS/.tag-genre-animated
 movies/pool/TS/.tag-genre-fantasy
 movies/pool/TS/.title                 # containing "toy story (1995)"

 movies/pool/TS2/toy-story2.mp4
 movies/pool/TS2/.tag-country-us
 movies/pool/TS2/.tag-genre-animated
 movies/pool/TS2/.tag-genre-fantasy
 movies/pool/TS2/.title                 # containing "toy story 2 (1999)"

If you want to put items using an intermediate level of subdirectories, you can
use C<pool1/> instead:

 movies/pool1/a/a wednesday (2008)/...
 movies/pool1/a/andhadhun (2018)/...
 movies/pool1/t/the raid - redemption (2011)/
 movies/pool1/t/the swimmer (1968)/
 movies/pool1/t/to_live_1994.mp4
 movies/pool1/t/TS/
 movies/pool1/t/TS2/

(the intermediate directories can be anything.)

If you want two levels of intermediate directories, use C<pool2>:

 movies/pool2/a/aw/a wednesday (2008)/...
 movies/pool2/a/an/andhadhun (2018)/...
 movies/pool2/t/th/the raid - redemption (2011)/
 movies/pool2/t/th/the swimmer (1968)/
 movies/pool2/t/to/to_live_1994.mp4
 movies/pool2/t/ts/TS/
 movies/pool2/t/ts/TS2/

To create index:

 % manage-pool-style-repo update-index movies

This will create this directory structure of symlinks:

 movies/index/
 movies/index/by-tag/

 movies/index/by-tag/country/
 movies/index/by-tag/country/id/the raid - redemption (2011) -> ../../../../pool/the raid - redemption (2011)
 movies/index/by-tag/country/in/a wednesday (2008) -> ../../../../pool/a wednesday (2008)
 movies/index/by-tag/country/in/andhadhun (2018) -> ../../../../pool/andhadhun (2018)
 movies/index/by-tag/country/us/the swimmer (1968) -> ../../../../pool/the swimmer (1968)
 movies/index/by-tag/country/us/toy story (1995) -> ../../../../pool/TS
 movies/index/by-tag/country/us/toy story 2 (1999) -> ../../../../pool/TS2

 movies/index/by-tag/genre/
 movies/index/by-tag/genre/action/the raid - redemption (2011) -> ../../../../pool/the raid - redemption (2011)
 movies/index/by-tag/genre/animated/toy story (1995) -> ../../../../pool/TS
 movies/index/by-tag/genre/animated/toy story 2 (1999) -> ../../../../pool/TS2
 movies/index/by-tag/genre/crime/a wednesday (2008) -> ../../../../pool/a wednesday (2008)
 movies/index/by-tag/genre/crime/andhadhun (2018) -> ../../../../pool/andhadhun (2018)
 movies/index/by-tag/genre/drama/a wednesday (2008) -> ../../../../pool/a wednesday (2008)
 movies/index/by-tag/genre/drama/the swimmer (1968) -> ../../../../pool/the swimmer (1968)
 movies/index/by-tag/genre/fantasy/toy story (1995) -> ../../../../pool/TS
 movies/index/by-tag/genre/fantasy/toy story 2 (1999) -> ../../../../pool/TS2
 movies/index/by-tag/genre/thriller/the raid - redemption (2011) -> ../../../../pool/the raid - redemption (2011)
 movies/index/by-tag/genre/thriller/andhadhun (2018) -> ../../../../pool/andhadhun (2018)

 movies/index/by-title/
 movies/index/by-title/the raid - redemption (2011) -> ../../pool/the raid - redemption (2011)
 movies/index/by-title/a wednesday (2008) -> ../../pool/a wednesday (2008)
 movies/index/by-title/andhadhun (2018) -> ../../pool/andhadhun (2018)
 movies/index/by-title/the swimmer (1968) -> ../../pool/the swimmer (1968)
 movies/index/by-title/toy story (1995) -> ../../pool/TS
 movies/index/by-title/toy story 2 (1999) -> ../../pool/TS2
 movies/index/by-title/to_live_1994.mp4 -> ../../pool/to_live_1994.mp4

=head1 DESCRIPTION

=head2 Pool-style repo

A "pool-style repo" is a term I coined to refer to a directory structure that
contains a collection of items (media files like movies, songs, or books;
software, and so on). The items are put in C<pool/> top-level subdirectory. Each
item can be a file or a directory, although to have the benefit of giving tags,
you'll need to use a directory.

If you use C<pool1/> instead of C<pool>, then the items are expected to be put
under a layer of intermediate directory like shown in the example in
L</SYNOPSIS>. And if you use C<pool2/>, the items are expected to be put under
two layers of intermediate directories, also shown in the example. You can use
one or all of C<pool>, C<pool1>, C<pool2> to put your items.

This script can then be used to create C<index> directory structure which
contains symbolic links to the items. There are C<index/by-tag>,
C<index/by-title>. These directory structure can be navigated by any filesystem
tool of your choice.

This files organization is inspired from how Debian repository works.

=head1 SUBCOMMANDS

=head2 B<list-items>

=head2 B<update-index>

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--config-path>=I<s>

Set path to configuration file.

Can actually be specified multiple times to instruct application to read from
multiple configuration files (and merge them).


Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

A single configuration file can contain profiles, i.e. alternative sets of
values that can be selected. For example:

 [profile=dev]
 username=foo
 pass=beaver
 
 [profile=production]
 username=bar
 pass=honey

When you specify C<--config-profile=dev>, C<username> will be set to C<foo> and
C<password> to C<beaver>. When you specify C<--config-profile=production>,
C<username> will be set to C<bar> and C<password> to C<honey>.


=item B<--debug>

Shortcut for --log-level=debug.

=item B<--format-options>=I<s>

Pass options to formatter.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

Output can be displayed in multiple formats, and a suitable default format is
chosen depending on the application and/or whether output destination is
interactive terminal (i.e. whether output is piped). This option specifically
chooses an output format.


=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--json>

Equivalent to --format=json-pretty.

=item B<--log-level>=I<s>

Set log level.

By default, these log levels are available (in order of increasing level of
importance, from least important to most): C<trace>, C<debug>, C<info>,
C<warn>/C<warning>, C<error>, C<fatal>. By default, the level is usually set to
C<warn>, which means that log statements with level C<info> and less important
levels will not be shown. To increase verbosity, choose C<info>, C<debug>, or
C<trace>.

For more details on log level and logging, as well as how new logging levels can
be defined or existing ones modified, see L<Log::ger>.


=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

 [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
C<--naked-res> so you just get:

 [1,2,3]


=item B<--no-config>

Do not use any configuration file.

If you specify C<--no-config>, the application will not read any configuration
file.


=item B<--no-env>

Do not read environment for default options.

If you specify C<--no-env>, the application wil not read any environment
variable.


=item B<--quiet>

Shortcut for --log-level=error.

=item B<--subcommands>

List available subcommands.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head2 Options for subcommand list-items

=over

=item B<--detail>, B<-l>

(No description)


=item B<--has-tag>=I<s@>

(No description)


Can be specified multiple times.

=item B<--has-tags-json>=I<s>

See C<--has-tag>.

=item B<--lacks-tag>=I<s@>

(No description)


Can be specified multiple times.

=item B<--lacks-tags-json>=I<s>

See C<--lacks-tag>.

=item B<--pool-pattern>=I<s>

Default value:

 qr(\Apool(?:\..+)?\z)

By default, C<pool> and C<pool.*> subdirectory under the repo are searched for
items. You can customize using this option. But note that C<pool1_pattern> and
C<pool2_pattern> options have precedence over this.


=item B<--pool1-pattern>=I<s>

Default value:

 qr(\Apool1(?:\..+)?\z)

By default, C<pool1> and C<pool1.*> subdirectories under the repo are searched for
items under a layer of intermediate subdirectories. You can customize using this
option. But note that C<pool2_pattern> option has precedence over this.


=item B<--pool2-pattern>=I<s>

Default value:

 qr(\Apool2(?:\..+)?\z)

By default, C<pool2> and C<pool2.*> subdirectories under the repo are searched for
items. You can customize using this option.


=item B<--repo-path>=I<s>*

Repo directory.

Can also be specified as the 1st command-line argument.

=item B<-q>=I<s>

Search query.

Can also be specified as the 2nd command-line argument.

=back

=head2 Options for subcommand update-index

=over

=item B<--pool-pattern>=I<s>

Default value:

 qr(\Apool(?:\..+)?\z)

By default, C<pool> and C<pool.*> subdirectory under the repo are searched for
items. You can customize using this option. But note that C<pool1_pattern> and
C<pool2_pattern> options have precedence over this.


=item B<--pool1-pattern>=I<s>

Default value:

 qr(\Apool1(?:\..+)?\z)

By default, C<pool1> and C<pool1.*> subdirectories under the repo are searched for
items under a layer of intermediate subdirectories. You can customize using this
option. But note that C<pool2_pattern> option has precedence over this.


=item B<--pool2-pattern>=I<s>

Default value:

 qr(\Apool2(?:\..+)?\z)

By default, C<pool2> and C<pool2.*> subdirectories under the repo are searched for
items. You can customize using this option.


=item B<--repo-path>=I<s>*

Repo directory.

Can also be specified as the 1st command-line argument.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C manage-pool-style-repo manage-pool-style-repo

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete manage-pool-style-repo 'p/*/`manage-pool-style-repo`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/u1/.config/manage-pool-style-repo.conf>, F</home/u1/manage-pool-style-repo.conf>, or F</etc/manage-pool-style-repo.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable equals some string: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal some string: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when the value of an environment variable includes some string: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. If you only want a section to be read when the value of an environment variable does not include some string: C<[env=HOSTNAME!*=server ...]> or C<[SOMESECTION env=HOSTNAME!*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

=head2 Common for all subcommands


=head2 Configuration for subcommand list-items

 detail (see --detail)
 has_tags (see --has-tag)
 lacks_tags (see --lacks-tag)
 pool1_pattern (see --pool1-pattern)
 pool2_pattern (see --pool2-pattern)
 pool_pattern (see --pool-pattern)
 q (see -q)
 repo_path (see --repo-path)

=head2 Configuration for subcommand update-index

 pool1_pattern (see --pool1-pattern)
 pool2_pattern (see --pool2-pattern)
 pool_pattern (see --pool-pattern)
 repo_path (see --repo-path)

=head1 ENVIRONMENT

=head2 MANAGE_POOL_STYLE_REPO_OPT

String. Specify additional command-line options.

=head1 FILES

=head2 /home/u1/.config/manage-pool-style-repo.conf

=head2 /home/u1/manage-pool-style-repo.conf

=head2 /etc/manage-pool-style-repo.conf

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2023, 2020 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report all bug reports or feature requests to L<mailto:stevenharyanto@gmail.com>.

=cut
