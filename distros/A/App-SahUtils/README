NAME
    App::SahUtils - Collection of CLI utilities for Sah and Data::Sah

VERSION
    This document describes version 0.485 of App::SahUtils (from Perl
    distribution App-SahUtils), released on 2024-08-06.

SYNOPSIS
    This distribution provides the following command-line utilities related
    to Sah and Data::Sah:

    1. coerce-with-sah
    2. filter-with-sah
    3. format-with-sah
    4. get-sah-type
    5. get-value-with-sah
    6. is-sah-builtin-type
    7. is-sah-collection-builtin-type
    8. is-sah-collection-type
    9. is-sah-numeric-builtin-type
    10. is-sah-numeric-type
    11. is-sah-ref-builtin-type
    12. is-sah-ref-type
    13. is-sah-simple-builtin-type
    14. is-sah-simple-type
    15. is-sah-type
    16. list-sah-clauses
    17. list-sah-coerce-rule-modules
    18. list-sah-filter-rule-modules
    19. list-sah-pschema-modules
    20. list-sah-pschemabundle-modules
    21. list-sah-schema-modules
    22. list-sah-schemabundle-modules
    23. list-sah-type-modules
    24. list-sah-value-rule-modules
    25. normalize-sah-schema
    26. resolve-sah-schema
    27. sah-to-human
    28. show-sah-coerce-rule-module
    29. show-sah-filter-rule-module
    30. show-sah-schema-module
    31. show-sah-value-rule-modules
    32. validate-with-sah

FUNCTIONS
  get_sah_type
    Usage:

     get_sah_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Extract type from a Sah string or array schema.

    Uses Data::Sah::Util::Type's get_type() to extract the type name part of
    the schema.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_builtin_type
    Usage:

     is_sah_builtin_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a Sah builtin type.

    Uses Data::Sah::Util::Type's is_type() to return the type of the schema
    is the type is known builtin type, or undef if type is unknown.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_collection_builtin_type
    Usage:

     is_sah_collection_builtin_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a Sah collection builtin type.

    Uses Data::Sah::Util::Type's is_collection() to check whether the schema
    is a collection Sah builtin type.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_collection_type
    Usage:

     is_sah_collection_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a collection Sah type.

    The difference from this and "is_sah_collection_builtin_type" is: if
    type is not a known builtin type, this routine will try to resolve the
    schema using Data::Sah::Resolve then try again.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_numeric_builtin_type
    Usage:

     is_sah_numeric_builtin_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a Sah numeric builtin type.

    Uses Data::Sah::Util::Type's is_ref() to check whether the schema is a
    numeric Sah builtin type.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_numeric_type
    Usage:

     is_sah_numeric_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a numeric Sah type.

    The difference from this and "is_sah_numeric_builtin_type" is: if type
    is not a known builtin type, this routine will try to resolve the schema
    using Data::Sah::Resolve then try again.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_ref_builtin_type
    Usage:

     is_sah_ref_builtin_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a Sah ref builtin type.

    Uses Data::Sah::Util::Type's is_ref() to check whether the schema is a
    ref Sah builtin type.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_ref_type
    Usage:

     is_sah_ref_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a ref Sah type.

    The difference from this and "is_sah_ref_builtin_type" is: if type is
    not a known builtin type, this routine will try to resolve the schema
    using Data::Sah::Resolve then try again.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_simple_builtin_type
    Usage:

     is_sah_simple_builtin_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a Sah simple builtin type.

    Uses Data::Sah::Util::Type's is_simple() to check whether the schema is
    a simple Sah builtin type.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_simple_type
    Usage:

     is_sah_simple_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a simple Sah type.

    The difference from this and "is_sah_simple_builtin_type" is: if type is
    not a known builtin type, this routine will try to resolve the schema
    using Data::Sah::Resolve then try again.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  is_sah_type
    Usage:

     is_sah_type(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check that a string or array schema is a Sah type.

    The difference from this and "is_sah_builtin_type" is: if type is not a
    known builtin type, this routine will try to resolve the schema using
    Data::Sah::Resolve then try again.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   schema* => *any*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-SahUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-SahUtils>.

SEE ALSO
    Data::Sah

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2024, 2023, 2022, 2020, 2019, 2018, 2017,
    2016, 2015 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-SahUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

