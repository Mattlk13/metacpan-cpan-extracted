#!perl

use 5.010001;
use strict;
use warnings;

use App::prefixcat;
use Getopt::Long;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2024-08-11'; # DATE
our $DIST = 'App-prefixcat'; # DIST
our $VERSION = '0.002'; # VERSION

my %Opts = (
    eval         => undef,
    format       => "%s",
    separator    => ":",
);

sub parse_cmdline {
    Getopt::Long::Configure("gnu_getopt", "no_ignore_case");
    my $res = GetOptions(
        'eval|e=s'       =>
        sub { $Opts{eval} = eval "no strict; no warnings; sub { $_[1] }" or die "Invalid code in --eval (-e): $@" }, ## no critic: BuiltinFunctions::ProhibitStringyEval
        'format|f=s' => \$Opts{format},
        'separator|s=s' => \$Opts{separator},
        'help|h'           => sub {
            print <<USAGE;
Usage:
  prefixcat [OPTIONS]... [FILE]...
  prefixcat --help
Options:
  --eval, -e
  --format, -f
  --separator, -s
For more details, see the manpage/documentation.
USAGE
            exit 0;
        },
    );
    exit 99 if !$res;
}

# MAIN

parse_cmdline();
App::prefixcat::run(%Opts);

1;
# ABSTRACT: Like Unix `cat` but by default prefix each line with filename
# PODNAME: prefixcat

__END__

=pod

=encoding UTF-8

=head1 NAME

prefixcat - Like Unix `cat` but by default prefix each line with filename

=head1 VERSION

This document describes version 0.002 of prefixcat (from Perl distribution App-prefixcat), released on 2024-08-11.

=head1 SYNOPSIS

 % prefixcat [OPTION]... [FILE]...

See examples in L</EXAMPLES>.

=head1 DESCRIPTION

This utility is like the Unix B<cat> command but by default it prefixes each
output line with filename. I wrote this utility because this feature is
surprisingly absent in C<cat> and rather cumbersome to accomplish using the
traditional Unix toolbox. [1] The simplest is using C<grep '.*' FILE...> but it
highlights the lines by default.

B<prefixcat> offers a few options. You can choose the string to print to
separate the filename prefix and the output line (C<-s>). You can format the
filename using a C<sprintf()> template (C<-f>). And for maximum flexibility you
can specify a Perl code to do the formatting.

[1] L<https://serverfault.com/questions/977831/how-to-add-the-filename-as-prefix-to-each-line-of-the-text-file-batch-processi>

=head1 EXIT CODES

0 on success.

255 on I/O error.

99 on command-line options error.

=head1 OPTIONS

=over

=item * --separator, -s

String, default C<:>. The text used to separate the prefix (filename) and the
input line.

=item * --format, -f

String, default C<%s>. C<sprintf()> template used to print the prefix
(filename).

=item * --eval, -e

If specified, will print the result of Perl code for each line of input. Code
will get the content of line (including the newline) in C<$_>. It should return
the output line to be printed, or if it returns C<undef>, the content of C<$_>
will be used as the output line.

Additionally, C<$main::filename> will be set to the current input filename,
C<$main::filenum> to the current index of input files (1-based), and
C<$main::linenum> to the current input line (1-based).

Overrides L</"--separator, -s"> and L</"--format, -f">.

=back

=head1 FAQ

=head1 EXAMPLES

=head2 Print filename

 % prefixcat f1.txt f2.txt

Sample output:

 f1.txt:line 1
 f1.txt:line 2
 f1.txt:line 3
 f2.txt:line 1
 f2.txt:line 2

=head2 Print line number as well

 % prefixcat -e '"$filename:$linenum:$_"' f1.txt f2.txt

Sample output:

 f1.txt:1:line 1
 f1.txt:2:line 2
 f1.txt:3:line 3
 f2.txt:1:line 1
 f2.txt:2:line 2

=head2 Filter lines (skip blank lines)

 % prefixcat -e '/\S/ ? "$filename:$linenum:$_" : ""' f1.txt f2.txt

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-prefixcat>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-prefixcat>.

=head1 SEE ALSO

B<cat> Unix command

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-prefixcat>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
