#!perl

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2020-04-29'; # DATE
our $DIST = 'App-podsel'; # DIST
our $VERSION = '0.008'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

Perinci::CmdLine::Any->new(
    url => '/App/podsel/podsel',
    read_config => 0,
    read_env => 0,
    log => 1,
)->run;

# ABSTRACT: Select Pod::Elemental nodes using CSel syntax
# PODNAME: podsel

__END__

=pod

=encoding UTF-8

=head1 NAME

podsel - Select Pod::Elemental nodes using CSel syntax

=head1 VERSION

This document describes version 0.008 of podsel (from Perl distribution App-podsel), released on 2020-04-29.

=head1 SYNOPSIS

To select the head1 sections:

 % podsel foo.pod -t Pod5 -t Nested '.Nested[command=head1]'

To dump Pod document tree (C<--root> select the root node, C<--dump> dumps the
content):

 % podsel foo.pod -t Pod5 -t Nested --root --dump

=head1 DESCRIPTION

This utility uses CSel to select against a tree of L<Pod::Elemental> nodes,
constructed from a Perl POD document.

About the tree: the root node is Pod::Elemental::Document object. The other
nodes are Pod::Elemental::Element::* nodes. This utility allows you to omit the
C<Pod::Elemental::Element::Generic>, C<Pod::Elemental::Element::Pod5>,
C<Pod::Elemental::Element> or C<Pod::Elemental::> prefix, so to select a command
you can use:

 .Element::Generic::Command

or just:

 .Command

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--count>

Shortcut for --node-action count.

See C<--node-action>.

=item B<--dump>

Shortcut for --node-action dump.

See C<--node-action>.

=item B<--eval>=I<s@>

--eval E is shortcut for --action eval:E.

See C<--node-action>.

Can be specified multiple times.

=item B<--expr>=I<s>

=item B<--file>=I<s>

Default value:

 "-"

=item B<--node-action>=I<s@>

Specify action(s) to perform on matching nodes.

Default value:

 ["print_as_string"]

Each action can be one of the following:

* `count` will print the number of matching nodes.

* `print_method` will call on or more of the node object's methods and print the
  result. Example:

    print_method:as_string

* `dump` will show a indented text representation of the node and its
  descendants. Each line will print information about a single node: its class,
  followed by the value of one or more attributes. You can specify which
  attributes to use in a dot-separated syntax, e.g.:

    dump:tag.id.class

  which will result in a node printed like this:

    HTML::Element tag=p id=undef class=undef

By default, if no attributes are specified, `id` is used. If the node class does
not support the attribute, or if the value of the attribute is undef, then
`undef` is shown.

* `eval` will execute Perl code for each matching node. The Perl code will be
  called with arguments: `($node)`. For convenience, `$_` is also locally set to
  the matching node. Example in <prog:htmlsel> you can add this action:

    eval:'print $_->tag'

  which will print the tag name for each matching <pm:HTML::Element> node.


Can be specified multiple times.

=item B<--node-actions-json>=I<s>

Specify action(s) to perform on matching nodes (JSON-encoded).

See C<--node-action>.

=item B<--node-actions-on-descendants>=I<s>

Specify how descendants should be actioned upon.

Default value:

 ""

Valid values:

 ["","descendants_depth_first"]

This option sets how node action is performed (See `node_actions` option).

When set to '' (the default), then only matching nodes are actioned upon.

When set to 'descendants_depth_first', then after each matching node is actioned
upon by an action, the descendants of the matching node are also actioned, in
depth-first order. This option is sometimes necessary e.g. when your node's
`as_string()` method shows a node's string representation that does not include
its descendants.


=item B<--print>

Shortcut for --node-action print_as_string.

See C<--node-action>.

=item B<--print-method>=I<s@>

--print-method M is shortcut for --node-action print_method:M.

See C<--node-action>.

Can be specified multiple times.

=item B<--root>

Shortcut for --select-action=root.

See C<--select-action>.

=item B<--select-action>=I<s>

Specify how we should select nodes.

Default value:

 "csel"

Valid values:

 ["csel","root"]

The default is `csel`, which will select nodes from the tree using the CSel
expression. Note that the root node itself is not included. For more details on
CSel expression, refer to <pm:Data::CSel>.

`root` will return a single node which is the root node.


=item B<--transform>=I<s@>, B<-t>

Apply one or more Pod::Elemental::Transform's.

**TRANSFORMS**

First of all, by default, the "stock" Pod::Elemental parser will be generic and
often not very helpful in parsing your typical POD (Perl 5 variant) documents.
You often want to add:

    -t Pod5 -t Nester

or -5 for short, which is equivalent to the above. Except in some simple cases.
See examples below.

The following are available transforms:

* Pod5

Equivalent to this:

    Pod::Elemental::Transformer::Pod5->new->transform_node($tree);

* Nester

Equivalent to this:

    my $nester;

    $nester = Pod::Elemental::Transformer::Nester->new({
        top_selector      => Pod::Elemental::Selectors::s_command('head3'),
        content_selectors => [
            Pod::Elemental::Selectors::s_command([ qw(head4) ]),
            Pod::Elemental::Selectors::s_flat(),
        ],
    });
    $nester->new->transform_node($tree);

    $nester = Pod::Elemental::Transformer::Nester->new({
        top_selector      => Pod::Elemental::Selectors::s_command('head2'),
        content_selectors => [
            Pod::Elemental::Selectors::s_command([ qw(head3 head4) ]),
            Pod::Elemental::Selectors::s_flat(),
        ],
    });
    $nester->new->transform_node($tree);

    $nester = Pod::Elemental::Transformer::Nester->new({
        top_selector      => Pod::Elemental::Selectors::s_command('head1'),
        content_selectors => [
            Pod::Elemental::Selectors::s_command([ qw(head2 head3 head4) ]),
            Pod::Elemental::Selectors::s_flat(),
        ],
    });
    $nester->new->transform_node($tree);

**EXAMPLES**

Note: <prog:pmpath> is a CLI utility that returns the path of a locally
installed Perl module. It's distributed in <pm:App::PMUtils> distribution.

Select all head1 commands (only print the command lines and not the content):

    % podsel `pmpath strict` 'Command[command=head1]'
    =head1 NAME

    =head1 SYNOPSIS

    =head1 DESCRIPTION

    =head1 HISTORY

Select all head1 commands that contain "SYN" in them (only print the command
lines and not the content):

    % podsel `pmpath strict` 'Command[command=head1][content =~ /synopsis/i]'
    =head1 SYNOPSIS

Select all head1 commands that contain "SYN" in them (but now also print the
content; note now the use of the `Nested` class selector and the `-5` flag to
create a nested document tree instead of a flat one):

    % podsel -5 `pmpath strict` 'Nested[command=head1][content =~ /synopsis/i]'
    =head1 SYNOPSIS

        use strict;

        use strict "vars";
        use strict "refs";
        use strict "subs";

        use strict;
        no strict "vars";

List of head commands in POD of <pm:List::Util>:

    % podsel `pmpath List::Util` 'Command[command =~ /head/]'
    =head1 NAME

    =head1 SYNOPSIS

    =head1 DESCRIPTION

    =head1 LIST-REDUCTION FUNCTIONS

    =head2 reduce

    =head2 reductions

    ...

    =head1 KEY/VALUE PAIR LIST FUNCTIONS

    =head2 pairs

    =head2 unpairs

    =head2 pairkeys

    =head2 pairvalues

    ...

List only key/value pair list functions and not list-reduction ones:

    % podsel -5 `pmpath List::Util` 'Nested[command=head1][content =~ /pair/i] Nested[command=head2]' --print-method content
    pairs
    unpairs
    pairkeys
    pairvalues
    pairgrep
    pairfirst
    pairmap


Can be specified multiple times.

=item B<--transforms-json>=I<s>

Apply one or more Pod::Elemental::Transform's (JSON-encoded).

See C<--transform>.

=item B<-5>

Shortcut for -t Pod5 -t Nester.

See C<--transform>.

=item B<-R>

Shortcut for --node-action-on-descendants=descendants_depth_first.

See C<--node-actions-on-descendants>.

=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--page-result>

Filter output through a pager.

=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C podsel podsel

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete podsel 'p/*/`podsel`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-podsel>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-podsel>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-podsel>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<Data::CSel>

L<Pod::Elemental>

Other utilities that use CSel against various data: L<ddsel>, L<jsonsel>,
L<orgsel>, L<podsel>, L<htmlsel>, L<yamlsel>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2020, 2019 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
