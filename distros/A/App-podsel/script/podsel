#!perl

our $DATE = '2019-08-08'; # DATE
our $VERSION = '0.003'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

Perinci::CmdLine::Any->new(
    url => '/App/podsel/podsel',
    read_config => 0,
    read_env => 0,
)->run;

# ABSTRACT: Select Pod::Elemental nodes using CSel syntax
# PODNAME: podsel

__END__

=pod

=encoding UTF-8

=head1 NAME

podsel - Select Pod::Elemental nodes using CSel syntax

=head1 VERSION

This document describes version 0.003 of podsel (from Perl distribution App-podsel), released on 2019-08-08.

=head1 SYNOPSIS

To select the commands:

 % podsel foo.pod '.Command'

To print only the head* commands:

 % podsel foo.pod '.Command[command =~ "head"]'

To dump Pod document tree (C<--root> select the root node, C<--dump> dumps the
content):

 % podsel foo.pod --root --dump

=head1 DESCRIPTION

This utility uses CSel to select against a tree of L<Pod::Elemental> nodes,
constructed from a Perl POD document.

About the tree: the root node is Pod::Elemental::Document object. The other
nodes are Pod::Elemental::Element::* nodes. This utility allows you to omit the
C<Pod::Elemental::Element::Generic>, C<Pod::Elemental::Element> or
C<Pod::Elemental::> prefix, so to select a command you can use:

 .Element::Generic::Command

or just:

 .Command

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--count>

Shortcut for --node-action count.

See C<--node-action>.

=item B<--dump>

Shortcut for --node-action dump.

See C<--node-action>.

=item B<--eval>=I<s@>

--eval E is shortcut for --action eval:E.

See C<--node-action>.

Can be specified multiple times.

=item B<--expr>=I<s>

=item B<--file>=I<filename>

Default value:

 "-"

=item B<--node-action>=I<s@>

Specify action(s) to perform on matching nodes.

Default value:

 ["print_as_string"]

Each action can be one of the following:

* `count` will print the number of matching nodes.

* `print_method` will call on or more of the node object's methods and print the
result. Example:

    print_method:as_string

* `dump` will show a indented text representation of the node and its
descendants. Each line will print information about a single node: its class,
followed by the value of one or more attributes. You can specify which
attributes to use in a dot-separated syntax, e.g.:

    dump:tag.id.class

which will result in a node printed like this:

    HTML::Element tag=p id=undef class=undef

By default, if no attributes are specified, `id` is used. If the node class does
not support the attribute, or if the value of the attribute is undef, then
`undef` is shown.


Can be specified multiple times.

=item B<--node-actions-json>=I<s>

Specify action(s) to perform on matching nodes (JSON-encoded).

See C<--node-action>.

=item B<--print>

Shortcut for --node-action print_as_string.

See C<--node-action>.

=item B<--print-method>=I<s@>

--print-method M is shortcut for --node-action print_method:M.

See C<--node-action>.

Can be specified multiple times.

=item B<--root>

Shortcut for --select-action=root.

See C<--select-action>.

=item B<--select-action>=I<s>

Specify how we should select nodes.

Default value:

 "csel"

Valid values:

 ["csel","root"]

The default is `csel`, which will select nodes from the tree using the CSel
expression. Note that the root node itself is not included. For more details on
CSel expression, refer to <pm:Data::CSel>.

`root` will return a single node which is the root node.


=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C podsel podsel

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete podsel 'p/*/`podsel`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-podsel>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-podsel>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-podsel>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

L<Data::CSel>

L<Pod::Elemental>

Other utilities that use CSel against various data: L<ddsel>, L<jsonsel>,
L<orgsel>, L<podsel>, L<htmlsel>, L<yamlsel>.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2019 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
