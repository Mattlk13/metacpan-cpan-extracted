NAME
    Acme::CPANModules::OneLinerTools - Modules to make your life easier when
    writing perl one-liners

VERSION
    This document describes version 0.003 of
    Acme::CPANModules::OneLinerTools (from Perl distribution
    Acme-CPANModules-OneLinerTools), released on 2020-02-07.

DESCRIPTION
    Modules to make your life easier when writing perl one-liners.

INCLUDED MODULES
    *   L

        One of the "module autoloader" modules, which happens to have a
        short name for one-liner usage. So instead of having to type this:

         % perl -MOrg::Parser::Tiny -E'$doc = Org::Parser::Tiny->new->parse_file("/home/budi/todo.org"); ...'

        you can now write:

         % perl -ML -E'$doc = Org::Parser::Tiny->new->parse_file("/home/budi/todo.org"); ...'

        "Module autoloader" modules work using Perl's autoloading mechanism
        (read "perlsub" for more details). By declaring a subroutine named
        "AUTOLOAD" in the "UNIVERSAL" package, you setup a fallback
        mechanism when you call an undefined subroutine. L's AUTOLOADER
        loads the module using Module::Load then try to invoke the undefined
        subroutine once again.

    *   lib::xi

        This module can automatically install missing module during run-time
        using "cpanm". Convenient when running a Perl script (that comes
        without a proper distribution or "cpanfile") that uses several
        modules which you might not have. The alternative to lib::xi is the
        "trial and error" method: repeatedly run the Perl script to see
        which module it tries and fails to load.

        lib::xi works by installing a hook in @INC.

        Alternate modules: Require::Hook::More

    *   Log::Any::App

        A convenient way to display (consume) logs if your application uses
        Log::Any to produce logs.

    *   Log::ger::App

        A convenient way to display (consume) logs if your application uses
        Log::ger to produce logs.

    *   DD::Dummy

        My preference when dumping data structure when debugging Perl
        application is, well, Perl format (unlike some others which prefer
        custom format like Data::Printer). The DD-Dummy distribution
        provides DD module, which in turn exports "dd" to dump your data
        structures for debugging using Data::Dump. Another good alternative
        is XXX which by default uses YAML output but can be changed with
        this environment variable setting:

         PERL_XXX_DUMPER=Data::Dump

        Alternate modules: XXX, Data::Printer

    *   Devel::Confess

        Forces stack trace when your application warns or dies. Used with
        the perl's "-d" flag:

         % perl -d:Confess ...
         % perl -d:Confess=dump ...

    *   Carp::Patch::Config

        Carp is used as a stack trace printer (also indirectly if you use
        Devel::Confess). Sometimes you want to customize some Carp
        parameters like $Carp::MaxArgNums and $Carp::MaxArgLen from the
        command-line, and this is where this module helps.

    *   DBIx::Conn::MySQL

        Shortcut when connecting to MySQL database in your one-liner.
        Instead of:

         % perl -MDBI -E'my $dbh = DBI->connect("dbi:mysql:database=mydb", "someuser", "somepass"); $dbh->selectrow_array("query"); ...'

        you can type:

         % perl -MDBIx::Conn::MySQL=mydb -E'$dbh->selectrow_array("query"); ...'

    *   DBIx::Conn::SQLite

        Shortcut when connecting to MySQL database in your one-liner.
        Instead of:

         % perl -MDBI -E'my $dbh = DBI->connect("dbi:SQLite:dbname=mydb", "", ""); $dbh->selectrow_array("query"); ...'

        you can type:

         % perl -MDBIx::Conn::SQLite=mydb -E'$dbh->selectrow_array("query"); ...'

FAQ
  What are ways to use this module?
    Aside from reading it, you can install all the listed modules using
    cpanmodules:

        % cpanmodules ls-entries OneLinerTools | cpanm -n

    or Acme::CM::Get:

        % perl -MAcme::CM::Get=OneLinerTools -E'say $_->{module} for @{ $LIST->{entries} }' | cpanm -n

    This module also helps lcpan produce a more meaningful result for "lcpan
    related-mods" when it comes to finding related modules for the modules
    listed in this Acme::CPANModules module.

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/Acme-CPANModules-OneLinerTools>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-Acme-CPANModules-OneLinerTools>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=Acme-CPANModules-OneL
    inerTools>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

SEE ALSO
    Acme::CPANModules::OneLetter

    Acme::CPANModules::ModuleAutoinstallers

    Acme::CPANModules::ModuleAutoloaders

    Acme::CPANModules::DumpingDataForDebugging

    Acme::CPANModules - about the Acme::CPANModules namespace

    cpanmodules - CLI tool to let you browse/view the lists

AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2020 by perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

