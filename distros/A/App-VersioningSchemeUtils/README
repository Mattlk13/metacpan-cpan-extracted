NAME
    App::VersioningSchemeUtils - Utilities related to Versioning::Scheme

VERSION
    This document describes version 0.001 of App::VersioningSchemeUtils
    (from Perl distribution App-VersioningSchemeUtils), released on
    2018-10-14.

DESCRIPTION
    This distributions provides the following command-line utilities:

    *   bump-version

    *   cmp-version

    *   is-valid-version

    *   list-versioning-schemes

    *   normalize-version

    *   parse-version

FUNCTIONS
  bump_version
    Usage:

     bump_version(%args) -> [status, msg, result, meta]

    Bump version number according to specified scheme.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   scheme* => *str*

    *   v* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (result) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  cmp_version
    Usage:

     cmp_version(%args) -> [status, msg, result, meta]

    Compare two version number according to specified scheme.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   scheme* => *str*

    *   v1* => *str*

    *   v2* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (result) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  is_valid_version
    Usage:

     is_valid_version(%args) -> [status, msg, result, meta]

    Check whether version number is valid, according to specified scheme.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   scheme* => *str*

    *   v* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (result) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  list_versioning_schemes
    Usage:

     list_versioning_schemes() -> [status, msg, result, meta]

    List available versioning schemes.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (result) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  normalize_version
    Usage:

     normalize_version(%args) -> [status, msg, result, meta]

    Normalize version number according to specified scheme.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   scheme* => *str*

    *   v* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (result) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  parse_version
    Usage:

     parse_version(%args) -> [status, msg, result, meta]

    Parse version number according to specified scheme.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   scheme* => *str*

    *   v* => *str*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (result) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-VersioningSchemeUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-VersioningSchemeUtils>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-VersioningSchemeU
    tils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

SEE ALSO
AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2018 by perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

