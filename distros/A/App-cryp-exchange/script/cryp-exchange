#!perl

# FRAGMENT id=shcompgen-hint command=cryp-exchange

our $DATE = '2018-06-24'; # DATE
our $VERSION = '0.010'; # VERSION

use 5.010001;
use strict;
use warnings;
use Log::ger;

use Perinci::CmdLine::cryp;
use PERLANCAR::Module::List;

my $prefix = "/App/cryp/exchange/";
my $mods = do {
    # if we are being called during the building of our own dist by dzil (e.g.
    # by Pod::Weaver::Plugin::Rinci), don't include subcommands installed
    # outside our dist. otherwise we'll be documenting and depending on
    # extraneous subcommands.
    local @INC = ("lib")
        if $ENV{DZIL} &&
            # DZP:SetEnv always sets DZIL=1 so we need to know if it's our own
            # dist that we're building
        (!defined($ENV{DZIL_NAME}) ||
         $ENV{DZIL_NAME} eq 'App-cryp-exchange');

    PERLANCAR::Module::List::list_modules(
        "App::cryp::Cmd::Exchange::", {list_modules=>1});
};
my $subcommands = {};
for my $mod (keys %$mods) {
    (my $sc_name = $mod) =~ s/App::cryp::Cmd::Exchange:://;
    $sc_name =~ s/_/-/g;

    (my $url = $mod) =~ s!::!/!g;
    $subcommands->{$sc_name} = {
        url => "/$url/handle_cmd",
    };
}

Perinci::CmdLine::cryp->new(
    url => $prefix,
    log => 1,
    pass_cmdline_object => 1,
    config_filename => ["cryp.conf", "cryp-exchange.conf"],
    subcommands => $subcommands,
)->run;

# ABSTRACT: Interact with cryptoexchanges using a common interface
# PODNAME: cryp-exchange

__END__

=pod

=encoding UTF-8

=head1 NAME

cryp-exchange - Interact with cryptoexchanges using a common interface

=head1 VERSION

This document describes version 0.010 of cryp-exchange (from Perl distribution App-cryp-exchange), released on 2018-06-24.

=head1 SYNOPSIS

Create configuration in F<~/.config/cryp-exchange.conf> (or
F<~/.config/cryp.conf> so configuration can be shared with the other C<cryp-*>
family of scripts):

 ; equivalent to exchange/indodax/default
 [exchange/indodax]
 api_key    = S6WBYR6Q-TVMTSFOA-YWK6GSNT-H0JMEK6Z-YDF5ML9Y
 api_secret = e16064aa7fb477b267fe774df62194f33583c7f46a09ad931ca2e097aeaa9c9296e1c3b2734bab71

 ; if you have another account on the same exchange
 [exchange/indodax/wifey]
 api_key    = EKSGJUOR-ROR9K24P-Q45UBWVG-GZHANPQV-UY4Z1WBM
 api_secret = 71100dc13ffe4d082239c06b5c36fd8f0548cd97056ffa2ee491ae4dfd4f996fb468ef3c70b12073

 [exchange/gdax]
 api_key        = 2171d01f1de2518c94a11870a6df22d0
 api_secret     = 9B8T2nPFMRUiUIKA82txjaO09iNnJXBMVMdkDgJ0i2YambYKQY8DZAS54ERZE0sE2lzYrpTWfpU7/110xfesZluY
 api_passphrase = gdllszgwO774NN

=head2 General

To list supported exchanges:

 % cryp-exchange exchanges
 % cryp-exchange exchanges -l

To list pairs offered in an exchange:

 % cryp-exchange pairs indodax/wifey
 % cryp-exchange pairs gdax -l

To list accounts:

 % cryp-exchange accounts
 % cryp-exchange accounts -l
 % cryp-exchange accounts -I gdax -l ;# only accounts on gdax
 % cryp-exchange accounts -X gdax -l ;# all accounts except those on gdax

To view ticker (last 24h price and volume information):

 % cryp-exchange ticker gdax BTC/USD

To get order book:

 % cryp-exchange orderbook gdax

=head2 Balance

To get account balance:

 % cryp-exchange balance gdax
 % cryp-exchange balance indodax/wifey

=head2 Order

To create a limit order:

 # buy 100USD worth of BTC at 7000USD/BTC
 % cryp-exchange create-limit-order gdax BTC/USD buy 7500 --quote-size 100

 # buy 0.5BTC at 7000USD/BTC
 % cryp-exchange create-limit-order gdax BTC/USD buy 7500 --base-size 0.5

To get information about an order:

 % cryp-exchange get-order gdax BTC/USD buy 6327a864-d2c8-4e3e-8de3-dd71921b7cd0

To list open orders:

 # list all open orders
 % cryp-exchange open-orders gdax

 # list open orders for a specific pair only
 % cryp-exchange open-orders gdax BTC/USD

To cancel an order:

 % cryp-exchange cancel-order gdax BTC/USD buy 6327a864-d2c8-4e3e-8de3-dd71921b7cd0

=head1 DESCRIPTION

B<Early release. More functionality will be added in the future.>

cryp-exchange is a multi-cryptoexchange CLI. This distribution provides common
interface (as CLI as well as driver modules) to interact with different
cryptocurrency exchanges including:

=over

=item * common set of subcommands (API methods)

Along with common terminology, arguments, error behavior, and result format.

=item * standardized currency codes and pair formats

Following L<CryptoCurrency::Catalog>.

=back

=head1 SUBCOMMANDS

=head2 B<accounts>

List exchange accounts.

=head2 B<balance>

List account balance.

=head2 B<cancel-order>

Cancel an order.

=head2 B<create-limit-order>

Create a limit order.

=head2 B<exchanges>

List supported exchanges.

=head2 B<get-order>

Get information about an order.

=head2 B<open-orders>

List open orders.

=head2 B<orderbook>

Get order book on an exchange.

=head2 B<pairs>

List pairs supported by exchange.

=head2 B<ticker>

Get a pair's ticker (last 24h price & volume information).

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--config-path>=I<filename>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--json>

Set output format to json.

=item B<--log-level>=I<s>

Set log level.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--no-config>

Do not use any configuration file.

=item B<--no-env>

Do not read environment for default options.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--subcommands>

List available subcommands.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head2 Options for subcommand accounts

=over

=item B<--detail>, B<-l>

=back

=head2 Options for subcommand balance

=over

=item B<--account>=I<s>*

=back

=head2 Options for subcommand cancel-order

=over

=item B<--account>=I<s>*

=item B<--buy*>

Alias for --type=buy.

See C<--type>.

=item B<--order-id>=I<s>*

=item B<--pair>=I<s>*

=item B<--sell*>

Alias for --type=sell.

See C<--type>.

=item B<--type>=I<s>*

Valid values:

 ["buy","sell"]

=back

=head2 Options for subcommand create-limit-order

=over

=item B<--account>=I<s>*

=item B<--base-size>=I<s>

Order amount, denominated in base currency (first currency of the pair).

=item B<--buy*>

Alias for --type=buy.

See C<--type>.

=item B<--pair>=I<s>*

=item B<--price>=I<s>*

=item B<--quote-size>=I<s>

Order amount, denominated in quote currency (second currency of the pair).

=item B<--sell*>

Alias for --type=sell.

See C<--type>.

=item B<--type>=I<s>*

Valid values:

 ["buy","sell"]

=back

=head2 Options for subcommand exchanges

=over

=item B<--detail>, B<-l>

=back

=head2 Options for subcommand get-order

=over

=item B<--account>=I<s>*

=item B<--buy*>

Alias for --type=buy.

See C<--type>.

=item B<--order-id>=I<s>*

=item B<--pair>=I<s>*

=item B<--sell*>

Alias for --type=sell.

See C<--type>.

=item B<--type>=I<s>*

Valid values:

 ["buy","sell"]

=back

=head2 Options for subcommand open-orders

=over

=item B<--account>=I<s>*

=item B<--pair>=I<s>

=back

=head2 Options for subcommand orderbook

=over

=item B<--account>=I<s>*

=item B<--buy>

Alias for --type=buy.

See C<--type>.

=item B<--pair>=I<s>*

=item B<--sell>

Alias for --type=sell.

See C<--type>.

=item B<--type>=I<s>

Valid values:

 ["buy","sell"]

=back

=head2 Options for subcommand pairs

=over

=item B<--account>=I<s>*

=item B<--detail>, B<-l>

=item B<--native>

=back

=head2 Options for subcommand ticker

=over

=item B<--account>=I<s>*

=item B<--pair>=I<s>*

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C cryp-exchange cryp-exchange

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete cryp-exchange 'p/*/`cryp-exchange`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/cryp.conf>, F<~/.config/cryp-exchange.conf>, F<~/cryp.conf>, F<~/cryp-exchange.conf>, F</etc/cryp.conf>, or F</etc/cryp-exchange.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

=head2 Common for all subcommands

 format (see --format)
 log_level (see --log-level)
 naked_res (see --naked-res)

=head2 Configuration for subcommand accounts

 detail (see --detail)

=head2 Configuration for subcommand balance

 account (see --account)

=head2 Configuration for subcommand cancel-order

 account (see --account)
 order_id (see --order-id)
 pair (see --pair)
 type (see --type)

=head2 Configuration for subcommand create-limit-order

 account (see --account)
 base_size (see --base-size)
 pair (see --pair)
 price (see --price)
 quote_size (see --quote-size)
 type (see --type)

=head2 Configuration for subcommand exchanges

 detail (see --detail)

=head2 Configuration for subcommand get-order

 account (see --account)
 order_id (see --order-id)
 pair (see --pair)
 type (see --type)

=head2 Configuration for subcommand open-orders

 account (see --account)
 pair (see --pair)

=head2 Configuration for subcommand orderbook

 account (see --account)
 pair (see --pair)
 type (see --type)

=head2 Configuration for subcommand pairs

 account (see --account)
 detail (see --detail)
 native (see --native)

=head2 Configuration for subcommand ticker

 account (see --account)
 pair (see --pair)

=head1 ENVIRONMENT

=head2 CRYP_EXCHANGE_OPT => str

Specify additional command-line options.

=head1 FILES

F<~/.config/cryp.conf>

F<~/.config/cryp-exchange.conf>

F<~/cryp.conf>

F<~/cryp-exchange.conf>

F</etc/cryp.conf>

F</etc/cryp-exchange.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-cryp-exchange>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-cryp-exchange>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-cryp-exchange>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 SEE ALSO

The other C<cryp-*> scripts in the family.

L<CryptoCurrency::Catalog>

L<CryptoExchange::Catalog>

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2018 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
