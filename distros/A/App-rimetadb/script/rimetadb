#!perl

our $DATE = '2019-11-26'; # DATE
our $VERSION = '0.224'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our %SPEC;

my $prefix = '/App/rimetadb/';

Perinci::CmdLine::Any->new(
    url => $prefix,
    subcommands => {
        'update-from-modules' => {url => "${prefix}update_from_modules"},
        update    => {url => "${prefix}update"},
        delete    => {url => "${prefix}delete"},
        stats     => {url => "${prefix}stats"},
        packages  => {url => "${prefix}packages"},
        functions => {url => "${prefix}functions"},
        'function-stats' => {url => "${prefix}function_stats"},
        arguments => {url => "${prefix}arguments"},
        'argument-stats' => {url => "${prefix}argument_stats"},
        meta      => {url => "${prefix}meta"},
    },
    log => 1,
)->run;

# ABSTRACT: Manage a Rinci metadata database
# PODNAME: rimetadb

__END__

=pod

=encoding UTF-8

=head1 NAME

rimetadb - Manage a Rinci metadata database

=head1 VERSION

This document describes version 0.224 of rimetadb (from Perl distribution App-rimetadb), released on 2019-11-26.

=head1 SYNOPSIS

Scan all local Perl modules in the C<MyCompany::> namespace, get all Rinci
metadata and store them in the database (defaults to
C<dbi:SQLite:dbname=$HOME/rimeta.db> where C<$HOME> is the user's home
directory.

 % rimetadb update-from-modules MyCompany::

Ditto, except we specify custom database location (note that this is not
recommended, you should put username/password in config file instead of
command-line options):

 % rimetadb update-from-modules MyCompany:: \
     --dsn 'mysql:database=mycompany_rimeta' --user ... --password ...

Update a single package metadata:

 % rimetadb update --package MyCompany::Job \
     --metadata-json '{"v":1.1,"summary":"Manage jobs"}'

Update a single function metadata:

 % rimetadb update --package MyCompany::Job --function restart_job \
     --metadata-json '{"v":1.1,"summary":"Restart a job","args":{"id":{"summary":"Job ID","schema":"int*","req":1},"force":{"schema":"bool"}}}'

Delete a single package metadata:

 % rimetadb delete --package MyCompany::Job

Delete a single function metadata:

 % rimetadb delete --package MyCompany::Job --function restart_job

Show some statistics (will be expanded further later):

 % rimetadb stats

List packages in the database:

 % rimetadb packages
 % rimetadb packages -l
 % rimetadb packages MyCompany

List functions in the database:

 % rimetadb functions
 % rimetadb functions -l
 % rimetadb functions MyCompany

List function arguments in the database:

 % rimetadb arguments
 % rimetadb arguments -l

Get metadata of function/package:

 % rimetadb meta Foo::Bar::func

=head1 DESCRIPTION

This script (and backend Perl module, L<App::rimetadb>) maintains a database
that catalogs Rinci metadata. The metadata can be used for various purposes:

=over

=item * Statistics

Average number of functions in a package. Average number of arguments in a
function. Most often used schema data types for arguments. And so on.

=item * Allow access to Perl functions via HTTP

See L<Perinci::Access::HTTP::Server> and L<Riap>.

=item * Documentation

=back

You can add Rinci metadata from installed Perl modules, or manually by
specifying JSON or data structure via CLI or Perl API.

=head1 SUBCOMMANDS

=head2 B<argument-stats>

Show statistics on function arguments from the database.

=head2 B<arguments>

List function arguments in the database.

=head2 B<delete>

Delete a package or function metadata from the database.

=head2 B<function-stats>

Show some statistics on functions from the database.

=head2 B<functions>

List functions in the database.

=head2 B<meta>

Get package/function metadata from the database.

=head2 B<packages>

List packages in the database.

=head2 B<stats>

Show some statistics from the database.

=head2 B<update>

Add/update a package or function metadata in the database.

This routine lets you add/update a package or function metadata in the database
with the specified metadata.


=head2 B<update-from-modules>

Update Rinci metadata database from local Perl modules.

This routine scans Perl modules, load them, and update the database using Rinci
metadata from each modules into the database.

For each package, function, or function argument metadata, you can put this
attribute:

 'x.app.rimetadb.exclude' => 1,

to exclude the entity from being imported into the database. When you exclude a
package, all its contents (currently functions) are also excluded.

=head1 OPTIONS

C<*> marks required options.

=head2 Common options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--dsn>=I<s>

DBI connection DSN.

If not specified, will default to `dbd:SQLite:$HOME/rimeta.db` where `$HOME` is
user's home directory.

Note: has been tested with MySQL and SQLite only.


=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--json>

Set output format to json.

=item B<--log-level>=I<s>

Set log level.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--no-config>, B<-C>

Do not use any configuration file.

=item B<--no-env>

Do not read environment for default options.

=item B<--password>=I<s>

DBI connection password.

=item B<--quiet>

Shortcut for --log-level=error.

=item B<--subcommands>

List available subcommands.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--user>=I<s>

DBI connection user.

=item B<--verbose>

Shortcut for --log-level=info.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head2 Options for subcommand arguments

=over

=item B<--detail>, B<-l>

=item B<--function>=I<s>

Select specific function only.

=item B<--package>=I<s>

Select specific package only.

=item B<--query>=I<s>

=item B<--type>=I<s>

Select arguments with specific type only.

=back

=head2 Options for subcommand delete

=over

=item B<--function>=I<s>

=item B<--package>=I<s>*

=back

=head2 Options for subcommand functions

=over

=item B<--detail>, B<-l>

=item B<--package>=I<s>

Select specific package only.

=item B<--query>=I<s>

=back

=head2 Options for subcommand meta

=over

=item B<--name>=I<s>*

(Fully-qualified) function name or package name.

=back

=head2 Options for subcommand packages

=over

=item B<--detail>, B<-l>

=item B<--query>=I<s>

=back

=head2 Options for subcommand update

=over

=item B<--dist>=I<s>

=item B<--extra>=I<s>

=item B<--function>=I<s>

=item B<--metadata-json>=I<s>

See C<--metadata>.

=item B<--metadata>=I<s>*

=item B<--package>=I<s>*

=back

=head2 Options for subcommand update-from-modules

=over

=item B<--exclude-json>=I<s>

Perl package names or prefixes to exclude (JSON-encoded).

See C<--exclude>.

=item B<--exclude>=I<s@>

Perl package names or prefixes to exclude.

You can also use this attribute in your package metadata:

    'x.app.rimetadb.exclude' => 1,

to exclude the package (as well as its contents: all functions) from being
imported into the database.


Can be specified multiple times.

=item B<--force-update>, B<--force>

Force update database even though module hasn't changed since last update.

=item B<--library>=I<s>, B<-I>

Include library path, like Perl's -I.

Note that some modules are already loaded before this option takes effect. To
make sure you use the right library, you can use `PERL5OPT` or explicitly use
`perl` and use its `-I` option.


=item B<--module-or-package-json>=I<s>

Perl module or prefixes or package to add/update (JSON-encoded).

See C<--module-or-package>.

=item B<--module-or-package>=I<s@>*

Perl module or prefixes or package to add/update.

For each entry, you can specify:

* a Perl module name e.g. `Foo::Bar`. An attempt will be made to load that
  module.

* a module prefix ending with `::` e.g. `Foo::Bar::`. `Module::List` will be
  used to list all modules under `Foo::Bar::` recursively and load all those
  modules.

* a package name using `+Foo::Bar` syntax. An attempt to load module with that
  name will *not* be made. This can be used to add an already-loaded package
  e.g. by another module).

* a package prefix using `+Foo::Bar::` or `+Foo::Bar::` syntax. Subpackages will
  be listed recursively (using <pm:Package::Util::Lite>'s `list_subpackages`).


Can be specified multiple times.

=item B<--no-delete>

=item B<--require-json>=I<s>, B<-m>

Require a Perl module, a la Perl's -m (JSON-encoded).

See C<--require>.

=item B<--require>=I<s@>

Require a Perl module, a la Perl's -m.

Can be specified multiple times.

=item B<--use-json>=I<s>, B<-M>

Use a Perl module, a la Perl's -M (JSON-encoded).

See C<--use>.

=item B<--use>=I<s@>

Use a Perl module, a la Perl's -M.

Can be specified multiple times.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C rimetadb rimetadb

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete rimetadb 'p/*/`rimetadb`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F<~/.config/rimetadb.conf>, F<~/rimetadb.conf>, or F</etc/rimetadb.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

To put configuration for a certain subcommand only, use a section name like C<[subcommand=NAME]> or C<[SOMESECTION subcommand=NAME]>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]> or C<[subcommand=SUBCOMMAND_NAME profile=SOMENAME]> or C<[SOMESECTION subcommand=SUBCOMMAND_NAME profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

Finally, you can filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable has value equals something: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal something: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when an environment variable contains something: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

List of available configuration parameters:

=head2 Common for all subcommands

 dsn (see --dsn)
 format (see --format)
 log_level (see --log-level)
 naked_res (see --naked-res)
 password (see --password)
 user (see --user)

=head2 Configuration for subcommand argument-stats


=head2 Configuration for subcommand arguments

 detail (see --detail)
 function (see --function)
 package (see --package)
 query (see --query)
 type (see --type)

=head2 Configuration for subcommand delete

 function (see --function)
 package (see --package)

=head2 Configuration for subcommand function-stats


=head2 Configuration for subcommand functions

 detail (see --detail)
 package (see --package)
 query (see --query)

=head2 Configuration for subcommand meta

 name (see --name)

=head2 Configuration for subcommand packages

 detail (see --detail)
 query (see --query)

=head2 Configuration for subcommand stats


=head2 Configuration for subcommand update

 dist (see --dist)
 extra (see --extra)
 function (see --function)
 metadata (see --metadata)
 package (see --package)

=head2 Configuration for subcommand update-from-modules

 delete (see --no-delete)
 exclude (see --exclude)
 force_update (see --force-update)
 library (see --library)
 module_or_package (see --module-or-package)
 require (see --require)
 use (see --use)

=head1 ENVIRONMENT

=head2 RIMETADB_OPT => str

Specify additional command-line options.

=head1 FILES

F<~/.config/rimetadb.conf>

F<~/rimetadb.conf>

F</etc/rimetadb.conf>

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-rimetadb>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-rimetadb>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-rimetadb>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2019, 2017, 2016, 2015, 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
