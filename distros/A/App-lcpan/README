NAME
    App::lcpan - Manage your local CPAN mirror

VERSION
    This document describes version 1.071 of App::lcpan (from Perl
    distribution App-lcpan), released on 2022-09-19.

SYNOPSIS
    See lcpan script.

FUNCTIONS
  authors
    Usage:

     authors(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List authors.

    Examples:

    *   List all authors:

         authors();

    *   Find CPAN IDs which start with something:

         authors(query => ["MICHAEL%"]); # -> ["MICHAEL", "MICHAELW", undef, {}]

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   detail => *bool*

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   or => *bool*

        When there are more than one query, perform OR instead of AND logic.

    *   query => *array[str]*

        Search query.

    *   query_type => *str* (default: "any")

    *   random => *true*

        Random sort.

    *   result_limit => *uint*

        Only return a certain number of records.

    *   result_start => *posint* (default: 1)

        Only return starting from the n'th record.

    *   sort => *array[str]* (default: ["id"])

        Sort the result.

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

    By default will return an array of CPAN ID's. If you set "detail" to
    true, will return array of records.

  deps
    Usage:

     deps(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List dependencies of distributions.

    Examples:

    *   List what modules Module-List requires:

         deps(dists => ["Module-List"]);

    *   List modules Module-List requires (module name will be converted to
        distro name):

         deps(dists => ["Module::List"]);

    *   List what distribution that contains Sah::Schema::filename requires:

         deps(modules => ["Sah::Schema::filename"]);

        Sah::Schema::filename is included in Sah-Schemas-Path distribution,
        so this command is equivalent to "lcpan deps Sah-Schemas-Path". You
        can't do "lcpan deps Sah::Schema::filename" because "lcpan" will
        assume that you ask "lcpan deps Sah-Schema-filename" and there is no
        Sah-Schema-filename distribution.

    *   List non-core modules Module-List requires:

         deps(dists => ["Module-List"], include_core => 0);

    *   List dependencies of a specific distribution release:

         deps(dists => ["Module-List\@0.004"]);

    By default only runtime requires are displayed. To see prereqs for other
    phases (e.g. configure, or build, or ALL) or for other relationships
    (e.g. recommends, or ALL), use the "--phase" and "--rel" options.

    Note that dependencies information are taken from "META.json" or
    "META.yml" files. Not all releases (especially older ones) contain them.
    lcpan (like MetaCPAN) does not extract information from "Makefile.PL" or
    "Build.PL" because that requires running (untrusted) code.

    Also, some releases specify dynamic config, so there might actually be
    more dependencies.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   added_since => *date*

        Include only records that are added since a certain date.

    *   added_since_last_index_update => *true*

        Include only records that are added since the last index update.

    *   added_since_last_n_index_updates => *posint*

        Include only records that are added since the last N index updates.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   dists => *array[perl::distname_with_optional_ver]*

        Distribution names (with optional version suffix, e.g.
        Foo-Bar@1.23).

    *   dont_uniquify => *bool*

        Allow showing multiple modules for different dists.

    *   flatten => *bool*

        Instead of showing tree-like information, flatten it.

        When recursing, the default is to show the final result in a
        tree-like table, i.e. indented according to levels, e.g.:

         % lcpan deps -R MyModule
         | module            | author  | version |
         |-------------------|---------|---------|
         | Foo               | AUTHOR1 | 0.01    |
         |   Bar             | AUTHOR2 | 0.23    |
         |   Baz             | AUTHOR3 | 1.15    |
         | Qux               | AUTHOR2 | 0       |

        To be brief, if "Qux" happens to also depends on "Bar", it will not
        be shown in the result. Thus we don't know the actual "Bar" version
        that is needed by the dependency tree of "MyModule". For example, if
        "Qux" happens to depends on "Bar" version 0.45 then "MyModule"
        indirectly requires "Bar" 0.45.

        To list all the direct and indirect dependencies on a single flat
        list, with versions already resolved to the largest version
        required, use the "flatten" option:

         % lcpan deps -R --flatten MyModule
         | module            | author  | version |
         |-------------------|---------|---------|
         | Foo               | AUTHOR1 | 0.01    |
         | Bar               | AUTHOR2 | 0.45    |
         | Baz               | AUTHOR3 | 1.15    |
         | Qux               | AUTHOR2 | 0       |

        Note that "Bar"'s required version is already 0.45 in the above
        example.

    *   include_core => *bool* (default: 1)

        Include core modules.

    *   include_indexed => *bool* (default: 1)

        Include modules that are indexed (listed in
        02packages.details.txt.gz).

    *   include_noncore => *bool* (default: 1)

        Include non-core modules.

    *   include_unindexed => *bool* (default: 1)

        Include modules that are not indexed (not listed in
        02packages.details.txt.gz).

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   level => *int* (default: 1)

        Recurse for a number of levels (-1 means unlimited).

    *   modules => *array[perl::modname]*

    *   perl_version => *str* (default: "v5.34.0")

        Set base Perl version for determining core modules.

    *   phase => *str* (default: "runtime")

    *   rel => *str* (default: "requires")

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   updated_since => *date*

        Include only records that are updated since certain date.

    *   updated_since_last_index_update => *true*

        Include only records that are updated since the last index update.

    *   updated_since_last_n_index_updates => *posint*

        Include only records that are updated since the last N index
        updates.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    *   with_xs_or_pp => *bool*

        Check each dependency as XS/PP.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  dists
    Usage:

     dists(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List distributions.

    Examples:

    *   List all distributions:

         dists(cpan => "/cpan");

    *   List all distributions (latest version only):

         dists(cpan => "/cpan", latest => 1);

    *   Grep by distribution name, return detailed record:

         dists(query => ["data-table"], cpan => "/cpan");

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   added_since => *date*

        Include only records that are added since a certain date.

    *   added_since_last_index_update => *true*

        Include only records that are added since the last index update.

    *   added_since_last_n_index_updates => *posint*

        Include only records that are added since the last N index updates.

    *   author => *str*

        Filter by author.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   detail => *bool*

    *   has_buildpl => *bool*

    *   has_makefilepl => *bool*

    *   has_metajson => *bool*

    *   has_metayml => *bool*

    *   has_multiple_rels => *bool*

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   latest => *bool*

    *   or => *bool*

        When there are more than one query, perform OR instead of AND logic.

    *   query => *array[str]*

        Search query.

    *   query_type => *str* (default: "any")

    *   random => *true*

        Random sort.

    *   rel_mtime_newer_than => *date*

    *   result_limit => *uint*

        Only return a certain number of records.

    *   result_start => *posint* (default: 1)

        Only return starting from the n'th record.

    *   sort => *array[str]* (default: ["dist"])

        Sort the result.

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   updated_since => *date*

        Include only records that are updated since certain date.

    *   updated_since_last_index_update => *true*

        Include only records that are updated since the last index update.

    *   updated_since_last_n_index_updates => *posint*

        Include only records that are updated since the last N index
        updates.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

    By default will return an array of distribution names. If you set
    "detail" to true, will return array of records.

  log
    Usage:

     log(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Show database index log.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  modules
    Usage:

     modules(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List modules/packages.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   added_since => *date*

        Include only records that are added since a certain date.

    *   added_since_last_index_update => *true*

        Include only records that are added since the last index update.

    *   added_since_last_n_index_updates => *posint*

        Include only records that are added since the last N index updates.

    *   author => *str*

        Filter by author.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   detail => *bool*

    *   dist => *perl::distname*

        Filter by distribution.

    *   include_core => *bool* (default: 1)

        Include core modules.

    *   include_noncore => *bool* (default: 1)

        Include non-core modules.

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   latest => *bool*

    *   namespaces => *array[perl::modname]*

        Select modules belonging to certain namespace(s).

    *   or => *bool*

        When there are more than one query, perform OR instead of AND logic.

    *   perl_version => *str* (default: "v5.34.0")

        Set base Perl version for determining core modules.

    *   query => *array[str]*

        Search query.

    *   query_type => *str* (default: "any")

    *   random => *true*

        Random sort.

    *   result_limit => *uint*

        Only return a certain number of records.

    *   result_start => *posint* (default: 1)

        Only return starting from the n'th record.

    *   sort => *array[str]* (default: ["module"])

        Sort the result.

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   updated_since => *date*

        Include only records that are updated since certain date.

    *   updated_since_last_index_update => *true*

        Include only records that are updated since the last index update.

    *   updated_since_last_n_index_updates => *posint*

        Include only records that are updated since the last N index
        updates.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

    By default will return an array of package names. If you set "detail" to
    true, will return array of records.

  namespaces
    Usage:

     namespaces(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List namespaces.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   added_since => *date*

        Include only records that are added since a certain date.

    *   added_since_last_index_update => *true*

        Include only records that are added since the last index update.

    *   added_since_last_n_index_updates => *posint*

        Include only records that are added since the last N index updates.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   detail => *bool*

    *   from_level => *int*

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   level => *int*

    *   or => *bool*

        When there are more than one query, perform OR instead of AND logic.

    *   query => *array[str]*

        Search query.

    *   query_type => *str* (default: "any")

    *   sort => *str* (default: "name")

    *   to_level => *int*

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   updated_since => *date*

        Include only records that are updated since certain date.

    *   updated_since_last_index_update => *true*

        Include only records that are updated since the last index update.

    *   updated_since_last_n_index_updates => *posint*

        Include only records that are updated since the last N index
        updates.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  packages
    Usage:

     packages(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List modules/packages.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   added_since => *date*

        Include only records that are added since a certain date.

    *   added_since_last_index_update => *true*

        Include only records that are added since the last index update.

    *   added_since_last_n_index_updates => *posint*

        Include only records that are added since the last N index updates.

    *   author => *str*

        Filter by author.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   detail => *bool*

    *   dist => *perl::distname*

        Filter by distribution.

    *   include_core => *bool* (default: 1)

        Include core modules.

    *   include_noncore => *bool* (default: 1)

        Include non-core modules.

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   latest => *bool*

    *   namespaces => *array[perl::modname]*

        Select modules belonging to certain namespace(s).

    *   or => *bool*

        When there are more than one query, perform OR instead of AND logic.

    *   perl_version => *str* (default: "v5.34.0")

        Set base Perl version for determining core modules.

    *   query => *array[str]*

        Search query.

    *   query_type => *str* (default: "any")

    *   random => *true*

        Random sort.

    *   result_limit => *uint*

        Only return a certain number of records.

    *   result_start => *posint* (default: 1)

        Only return starting from the n'th record.

    *   sort => *array[str]* (default: ["module"])

        Sort the result.

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   updated_since => *date*

        Include only records that are updated since certain date.

    *   updated_since_last_index_update => *true*

        Include only records that are updated since the last index update.

    *   updated_since_last_n_index_updates => *posint*

        Include only records that are updated since the last N index
        updates.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

    By default will return an array of package names. If you set "detail" to
    true, will return array of records.

  rdeps
    Usage:

     rdeps(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List reverse dependencies.

    Examples:

    *   List what distributions depend on Sah::Schema::filename:

         rdeps(modules => ["Sah::Schema::filename"]);

    *   List what distributions depend on one of the modules in
        Sah-Schemas-Path:

         rdeps(dists => ["Sah-Schemas-Path"]);

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   added_since => *date*

        Include only records that are added since a certain date.

    *   added_since_last_index_update => *true*

        Include only records that are added since the last index update.

    *   added_since_last_n_index_updates => *posint*

        Include only records that are added since the last N index updates.

    *   authors => *array[str]*

        Filter certain author.

        This can be used to select certain author(s).

    *   authors_arent => *array[str]*

        Filter out certain author.

        This can be used to filter out certain author(s). For example if you
        want to know whether a module is being used by another CPAN author
        instead of just herself.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   dists => *array[perl::distname]*

        Distribution names (e.g. Foo-Bar).

    *   dont_uniquify => *true*

        Allow showing multiple modules for different dists.

    *   flatten => *bool*

        Instead of showing tree-like information, flatten it.

        See deps' *flatten* argument for more details.

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   level => *int* (default: 1)

        Recurse for a number of levels (-1 means unlimited).

    *   modules => *array[perl::modname]*

    *   phase => *str* (default: "ALL")

    *   rel => *str* (default: "ALL")

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   updated_since => *date*

        Include only records that are updated since certain date.

    *   updated_since_last_index_update => *true*

        Include only records that are updated since the last index update.

    *   updated_since_last_n_index_updates => *posint*

        Include only records that are updated since the last N index
        updates.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  releases
    Usage:

     releases(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List releases/tarballs.

    The status field is the processing status of the file/release by lcpan.
    "ok" means file has been extracted and the meta files parsed, "nofile"
    means file is not found in mirror (possibly because the mirroring
    process excludes the file e.g. due to file size too large), "nometa"
    means file does not contain META.{yml,json}, "unsupported" means file
    archive format is not supported (e.g. rar), "err" means some other error
    in processing file.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   added_or_updated_since => *date*

        Include only records that are added/updated since a certain date.

    *   added_or_updated_since_last_index_update => *true*

        Include only records that are added/updated since the last index
        update.

    *   added_or_updated_since_last_n_index_updates => *posint*

        Include only records that are added/updated since the last N index
        updates.

    *   added_since => *date*

        Include only records that are added since a certain date.

    *   added_since_last_index_update => *true*

        Include only records that are added since the last index update.

    *   added_since_last_n_index_updates => *posint*

        Include only records that are added since the last N index updates.

    *   author => *str*

        Filter by author.

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   detail => *bool*

    *   full_path => *bool*

    *   has_buildpl => *bool*

    *   has_makefilepl => *bool*

    *   has_metajson => *bool*

    *   has_metayml => *bool*

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   latest => *bool*

    *   no_path => *bool*

    *   or => *bool*

        When there are more than one query, perform OR instead of AND logic.

    *   query => *array[str]*

        Search query.

    *   query_type => *str* (default: "any")

    *   random => *true*

        Random sort.

    *   result_limit => *uint*

        Only return a certain number of records.

    *   result_start => *posint* (default: 1)

        Only return starting from the n'th record.

    *   sort => *array[str]* (default: ["name"])

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   updated_since => *date*

        Include only records that are updated since certain date.

    *   updated_since_last_index_update => *true*

        Include only records that are updated since the last index update.

    *   updated_since_last_n_index_updates => *posint*

        Include only records that are updated since the last N index
        updates.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  reset
    Usage:

     reset(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Reset (empty) the database index.

    All data tables will be emptied. This includes all records in the "log"
    table as well as "index_creation_time" record in the "meta" table, so
    there is no records of previous indexing activity. There is also no
    record of resetting in the "log".

    Tables are not dropped and re-created. The "meta" table is not emptied.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  stats
    Usage:

     stats(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Statistics of your local CPAN mirror.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  update
    Usage:

     update(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Create/update local CPAN mirror.

    This subcommand first create/update the mirror files by downloading from
    a remote CPAN mirror, then update the index.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   cpan => *dirname*

        Location of your local CPAN mirror, e.g. /path/to/cpan.

        Defaults to "~/cpan".

    *   exclude_author => *array[str]*

        Exclude files from certain author(s).

    *   force_update_index => *bool*

        Update the index even though there is no change in files.

    *   include_author => *array[str]*

        Only include files from certain author(s).

    *   index_name => *filename* (default: "index.db")

        Filename of index.

        If "index_name" is a filename without any path, e.g. "index.db" then
        index will be located in the top-level of "cpan". If "index_name"
        contains a path, e.g. "./index.db" or "/home/ujang/lcpan.db" then
        the index will be located solely using the "index_name".

    *   max_file_size => *int*

        If set, skip downloading files larger than this.

    *   remote_url => *str*

        Select CPAN mirror to download from.

    *   retry_delay => *int*

        Number of seconds to delay between retry attempt.

    *   retry_max_attempts => *int*

        Number of retry attempts on failed HTTP request.

    *   skip_file_indexing_pass_1 => *bool*

    *   skip_file_indexing_pass_2 => *bool*

    *   skip_file_indexing_pass_3 => *bool*

    *   skip_index_file_patterns => *array[re]*

        Skip one or more file patterns from being indexed.

    *   skip_index_files => *array[str]*

        Skip one or more files from being indexed.

    *   skip_sub_indexing => *bool* (default: 1)

        Since sub indexing is still experimental, it is not enabled by
        default. To enable it, pass the "--no-skip-sub-indexing" option.

    *   skip_sub_indexing_file_patterns => *array[re]*

        Skip one or more file patterns from being parsed for subs.

    *   skip_sub_indexing_files => *array[str]*

        Skip one or more files from being parsed for subs.

    *   update_db_schema => *bool* (default: 1)

        Whether to update database schema to the latest.

        By default, when the application starts and reads the index
        database, it updates the database schema to the latest if the
        database happens to be last updated by an older version of the
        application and has the old database schema (since database schema
        is updated from time to time, for example at 1.070 the database
        schema is at version 15).

        When you disable this option, the application will not update the
        database schema. This option is for testing only, because it will
        probably cause the application to run abnormally and then die with a
        SQL error when reading/writing to the database.

        Note that in certain modes e.g. doing tab completion, the
        application also will not update the database schema.

    *   update_files => *bool* (default: 1)

        Update the files.

    *   update_index => *bool* (default: 1)

        Update the index.

    *   use_bootstrap => *bool* (default: 1)

        Whether to use bootstrap database from App-lcpan-Bootstrap.

        If you are indexing your private CPAN-like repository, you want to
        turn this off.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-lcpan>.

SOURCE
    Source repository is at <https://github.com/perlancar/perl-App-lcpan>.

SEE ALSO
    App::lcpan::Manual

    CPAN::SQLite

    CPAN::Mini

HISTORY
    This application began as CPAN::SQLite::CPANMeta, an extension of
    CPAN::SQLite. "CPAN::SQLite" parses "02packages.details.txt.gz" and
    "01mailrc.txt.gz" and puts the parse result into a SQLite database.
    "CPAN::SQLite::CPANMeta" parses the "META.json"/"META.yml" files in
    individual release files and adds it to the SQLite database.

    In order to simplify things for the users (one-step indexing) and get
    more freedom in database schema, "lcpan" skips using "CPAN::SQLite" and
    creates its own SQLite database. It also parses
    "02packages.details.txt.gz" but does not parse distribution names from
    it but instead uses "META.json" and "META.yml" files extracted from the
    release files. If no "META.*" files exist, then it will use the module
    name.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTORS
    *   Norbert Csongradi <norbert@csongradi.hu>

    *   Steven Haryanto <stevenharyanto@gmail.com>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022, 2021, 2020, 2019, 2018, 2017, 2016,
    2015 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-lcpan>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

