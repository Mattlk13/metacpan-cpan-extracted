NAME
    App::perlmv::u - Rename files using Perl code, with undo/redo

VERSION
    This document describes version 0.007 of App::perlmv::u (from Perl
    distribution App-perlmv-u), released on 2023-11-20.

DESCRIPTION
    See included script perlmv-u.

FUNCTIONS
  clear_history
    Usage:

     clear_history() -> [$status_code, $reason, $payload, \%result_meta]

    Clear undo history.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  history
    Usage:

     history() -> [$status_code, $reason, $payload, \%result_meta]

    Show undo history.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  move_multiple
    Usage:

     move_multiple(%args) -> [$status_code, $reason, $payload, \%result_meta]

    This function is not exported.

    This function supports dry-run operation. This function is idempotent
    (repeated invocations with same arguments has the same effect as single
    invocation). This function supports transactions.

    Arguments ('*' denotes required arguments):

    *   file_pairs* => *array[array]*

        Pairs of [source, target].

        Both "source" and "target" must be absolute paths.

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    *   -tx_action => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_action_id => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_recovery => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_rollback => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_v => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  perlmv
    Usage:

     perlmv(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Rename files using Perl code, with undo/redo.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   d => *bool*

        Alias for --dry-run.

    *   eval* => *str*

        Perl code to rename file.

        Your Perl code will receive the original filename in $_ and is
        expected to modify it. If it is unmodified, the last expression is
        used as the new filename. If it is also the same as the original
        filename, the file is not renamed.

    *   files* => *array[pathname]*

        (No description)

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  redo
    Usage:

     redo() -> [$status_code, $reason, $payload, \%result_meta]

    Redo last undone action.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  undo
    Usage:

     undo(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Undo last action.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   ignore_errors => *bool*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-perlmv-u>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-perlmv-u>.

SEE ALSO
    App::perlmv

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2023, 2021, 2017 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-perlmv-u>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

