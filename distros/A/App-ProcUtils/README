NAME
    App::ProcUtils - Command line utilities related to processes

VERSION
    This document describes version 0.038 of App::ProcUtils (from Perl
    distribution App-ProcUtils), released on 2020-07-21.

SYNOPSIS
    This distribution provides the following command-line utilities:

    *   proc-exists

    *   proc-kill

    *   proc-list

    *   proc-list-parents

    *   proc-table

FUNCTIONS
  exists
    Usage:

     exists(%args) -> [status, msg, payload, meta]

    Check if processes that match criteria exists.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   cmdline_match => *re*

    *   cmdline_not_match => *re*

    *   code => *code*

        Code is given Proc::ProcessTable::Process object, which is a hashref
        containing items like "pid", "uid", etc. It should return true to
        mean that a process matches.

    *   exec_match => *re*

    *   exec_not_match => *re*

    *   logic => *str* (default: "AND")

    *   pids => *array[unix::pid]*

    *   quiet => *true*

    *   uids => *array[unix::local_uid]*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  kill
    Usage:

     kill(%args) -> [status, msg, payload, meta]

    Kill processes that match criteria.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   cmdline_match => *re*

    *   cmdline_not_match => *re*

    *   code => *code*

        Code is given Proc::ProcessTable::Process object, which is a hashref
        containing items like "pid", "uid", etc. It should return true to
        mean that a process matches.

    *   exec_match => *re*

    *   exec_not_match => *re*

    *   logic => *str* (default: "AND")

    *   pids => *array[unix::pid]*

    *   signal => *unix::signal* (default: "TERM")

    *   uids => *array[unix::local_uid]*

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  list
    Usage:

     list(%args) -> [status, msg, payload, meta]

    List processes that match criteria.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   cmdline_match => *re*

    *   cmdline_not_match => *re*

    *   code => *code*

        Code is given Proc::ProcessTable::Process object, which is a hashref
        containing items like "pid", "uid", etc. It should return true to
        mean that a process matches.

    *   detail => *true*

        Return detailed records instead of just PIDs.

    *   exec_match => *re*

    *   exec_not_match => *re*

    *   logic => *str* (default: "AND")

    *   pids => *array[unix::pid]*

    *   uids => *array[unix::local_uid]*

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  list_parents
    Usage:

     list_parents() -> [status, msg, payload, meta]

    List all the parents of the current process.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

  table
    Usage:

     table() -> [status, msg, payload, meta]

    Run Proc::ProcessTable and display the result.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (payload) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-ProcUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-ProcUtils>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-ProcUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

SEE ALSO
    Proc::Find is a similar module; App::ProcUtils provides the CLI scripts
    as well as function interface.

AUTHOR
    perlancar <perlancar@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2020, 2019, 2018, 2016, 2015 by
    perlancar@cpan.org.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

