NAME
    App::ProcUtils - Command line utilities related to processes

VERSION
    This document describes version 0.039 of App::ProcUtils (from Perl
    distribution App-ProcUtils), released on 2024-11-15.

SYNOPSIS
    This distribution provides the following command-line utilities:

    *   proc-exists

    *   proc-kill

    *   proc-list

    *   proc-list-parents

    *   proc-table

FUNCTIONS
  exists
    Usage:

     exists(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Check if processes that match criteria exists.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   cmdline_match => *re*

        (No description)

    *   cmdline_not_match => *re*

        (No description)

    *   code => *code*

        Code is given Proc::ProcessTable::Process object, which is a hashref
        containing items like "pid", "uid", etc. It should return true to
        mean that a process matches.

    *   exec_match => *re*

        (No description)

    *   exec_not_match => *re*

        (No description)

    *   logic => *str* (default: "AND")

        (No description)

    *   pids => *array[unix::pid]*

        (No description)

    *   quiet => *true*

        (No description)

    *   uids => *array[unix::uid::exists]*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  kill
    Usage:

     kill(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Kill processes that match criteria.

    This function is not exported.

    This function supports dry-run operation.

    Arguments ('*' denotes required arguments):

    *   cmdline_match => *re*

        (No description)

    *   cmdline_not_match => *re*

        (No description)

    *   code => *code*

        Code is given Proc::ProcessTable::Process object, which is a hashref
        containing items like "pid", "uid", etc. It should return true to
        mean that a process matches.

    *   exec_match => *re*

        (No description)

    *   exec_not_match => *re*

        (No description)

    *   logic => *str* (default: "AND")

        (No description)

    *   pids => *array[unix::pid]*

        (No description)

    *   signal => *unix::signal* (default: "TERM")

        (No description)

    *   uids => *array[unix::uid::exists]*

        (No description)

    Special arguments:

    *   -dry_run => *bool*

        Pass -dry_run=>1 to enable simulation mode.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list
    Usage:

     list(%args) -> [$status_code, $reason, $payload, \%result_meta]

    List processes that match criteria.

    This function is not exported.

    Arguments ('*' denotes required arguments):

    *   cmdline_match => *re*

        (No description)

    *   cmdline_not_match => *re*

        (No description)

    *   code => *code*

        Code is given Proc::ProcessTable::Process object, which is a hashref
        containing items like "pid", "uid", etc. It should return true to
        mean that a process matches.

    *   detail => *true*

        Return detailed records instead of just PIDs.

    *   exec_match => *re*

        (No description)

    *   exec_not_match => *re*

        (No description)

    *   logic => *str* (default: "AND")

        (No description)

    *   pids => *array[unix::pid]*

        (No description)

    *   uids => *array[unix::uid::exists]*

        (No description)

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list_parents
    Usage:

     list_parents() -> [$status_code, $reason, $payload, \%result_meta]

    List all the parents of the current process.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  table
    Usage:

     table() -> [$status_code, $reason, $payload, \%result_meta]

    Run Proc::ProcessTable and display the result.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/App-ProcUtils>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-App-ProcUtils>.

SEE ALSO
    Proc::Find is a similar module; App::ProcUtils provides the CLI scripts
    as well as function interface.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2024 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=App-ProcUtils>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

