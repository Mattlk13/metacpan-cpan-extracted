NAME
    Acme::CPANModules::BloomFilters - List of bloom filter modules on CPAN

VERSION
    This document describes version 0.004 of Acme::CPANModules::BloomFilters
    (from Perl distribution Acme-CPANModules-BloomFilters), released on
    2022-03-18.

DESCRIPTION
    Bloom filter is a data structure that allows you to quickly check
    whether an element is in a set. Compared to a regular hash, it is much
    more memory-efficient. The downside is that bloom filter can give you
    false positives, although false negatives are not possible. So in
    essence you can ask a bloom filter which item is "possibly in set" or
    "definitely not in set". You can configure the rate of false positives.
    The larger the filter, the smaller the rate. Some examples for
    application of bloom filter include: 1) checking whether a password is
    in a dictionary of millions of common/compromised passwords; 2) checking
    an email address against leak database; 3) virus pattern checking; 4)
    IP/domain blacklisting/whitelisting. Due to its properties, it is
    sometimes combined with other data structures. For example, a small
    bloom filter can be distributed with a software to check against a
    database. When the answer from bloom filter is "possibly in set", the
    software can further consult on online database to make sure if it is
    indeed in set. Thus, bloom filter can be used to reduce the number of
    direct queries to database.

    In Perl, my default go-to choice is Algorithm::BloomFilter, unless
    there's a specific feature I need from other implementations.

ACME::CPANMODULES ENTRIES
    *   Bloom::Filter - Sample Perl Bloom filter implementation

        Author: XAERXESS <https://metacpan.org/author/XAERXESS>

        Does not provide mehods to save/load to/from strings/files, although
        you can just take a peek at the source code or the hash object and
        get the filter there. Performance might not be stellar since it's
        pure-Perl.

    *   Bloom16 - Perl extension for "threshold" Bloom filters

        Author: IWOODHEAD <https://metacpan.org/author/IWOODHEAD>

        An Inline::C module. Barely documented. Also does not provide filter
        saving/loading methods.

    *   Algorithm::BloomFilter - A simple bloom filter data structure

        Author: SMUELLER <https://metacpan.org/author/SMUELLER>

        XS, made by SMUELLER. Can merge other bloom filters. Provides
        serialize and deserialize methods.

    *   Bloom::Scalable - Implementation of the probalistic datastructure -
        ScalableBloomFilter

        Author: SUBBU <https://metacpan.org/author/SUBBU>

        Pure-perl module. A little weird, IMO, e.g. with hardcoded
        filenames. The distribution also provides Bloom::Simple.

    *   Bloom::Simple

        Author: SUBBU <https://metacpan.org/author/SUBBU>

        Pure-perl module. A little weird, IMO, e.g. with hardcoded
        filenames. The distribution also provides Bloom::Simple.

    *   Bloom::Faster - Perl extension for the c library libbloom.

        Author: PALVARO <https://metacpan.org/author/PALVARO>

        XS module. Serialize/deserialize directly to/from files, no string
        (de)serialization provided.

    *   Text::Bloom

        Author: ASPINELLI <https://metacpan.org/author/ASPINELLI>

        Pure-Perl module, part of Text-Document distribution. Uses
        Bit::Vector.

    *   App::BloomUtils - Utilities related to bloom filters

        Author: PERLANCAR <https://metacpan.org/author/PERLANCAR>

    *   Bencher::Scenarios::BloomFilters

FAQ
  What is an Acme::CPANModules::* module?
    An Acme::CPANModules::* module, like this module, contains just a list
    of module names that share a common characteristics. It is a way to
    categorize modules and document CPAN. See Acme::CPANModules for more
    details.

  What are ways to use this Acme::CPANModules module?
    Aside from reading this Acme::CPANModules module's POD documentation,
    you can install all the listed modules (entries) using cpanm-cpanmodules
    script (from App::cpanm::cpanmodules distribution):

     % cpanm-cpanmodules -n BloomFilters

    Alternatively you can use the cpanmodules CLI (from App::cpanmodules
    distribution):

        % cpanmodules ls-entries BloomFilters | cpanm -n

    or Acme::CM::Get:

        % perl -MAcme::CM::Get=BloomFilters -E'say $_->{module} for @{ $LIST->{entries} }' | cpanm -n

    or directly:

        % perl -MAcme::CPANModules::BloomFilters -E'say $_->{module} for @{ $Acme::CPANModules::BloomFilters::LIST->{entries} }' | cpanm -n

    This Acme::CPANModules module also helps lcpan produce a more meaningful
    result for "lcpan related-mods" command when it comes to finding related
    modules for the modules listed in this Acme::CPANModules module. See
    App::lcpan::Cmd::related_mods for more details on how "related modules"
    are found.

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/Acme-CPANModules-BloomFilters>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-Acme-CPANModules-BloomFilters>.

SEE ALSO
    Acme::CPANModules - about the Acme::CPANModules namespace

    cpanmodules - CLI tool to let you browse/view the lists

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla plugin and/or Pod::Weaver::Plugin. Any additional
    steps required beyond that are considered a bug and can be reported to
    me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2022, 2021, 2018 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=Acme-CPANModules-Bloo
    mFilters>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

