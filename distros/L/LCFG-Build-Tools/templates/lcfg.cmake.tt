# Details for this project

# The entries with names which do *not* start with LCFG_ or CPACK_ are
# for compatibility only, they are now deprecated.

[%+ FOREACH key IN mapping.keys.sort %]
[% SET attr = mapping.item(key) %]
[% SET value = spec.${attr} %]
SET([% key +%] "[%+ value.list.join(', ') | replace('"','\"') %]")

[%+ END %]

# On Linux these variables allow packagers to make decisions based on
# the platform

set( LCFG_HIERARCHY_DEFAULT "fhs" )

if( "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux" )

  SET( OS_NAME "linux" )

  if( EXISTS "/etc/redhat-release" )
    set( DISTRIB_BASE_REDHAT true )

    if( EXISTS "/etc/sl-release" )
      set( DISTRIB_ID "scientific" )
    elseif( EXISTS "/etc/centos-release" )
      set( DISTRIB_ID "centos" )
    elseif( EXISTS "/etc/fedora-release" )
      set( DISTRIB_ID "fedora" )
    else()
      set( DISTRIB_ID "rhel" )
    endif()

  elseif( EXISTS "/etc/debian_version" )
    set( DISTRIB_BASE_DEBIAN true )

    if( EXISTS "/etc/ubuntu_version" )
      set( DISTRIB_ID "ubuntu" )
    else()
      set( DISTRIB_ID "debian" )
    endif()

  endif()

  if( EXISTS "/etc/os-release" )

    file( READ /etc/os-release LCFG_OS_INFO )

    if( "${LCFG_OS_INFO}" MATCHES "VERSION_ID=\"([^\"]+)\"")
      set( DISTRIB_RELEASE "${CMAKE_MATCH_1}")

      string(REPLACE "." ";" DISTRIB_RELEASE_LIST "${DISTRIB_RELEASE}")
      list(GET DISTRIB_RELEASE_LIST 0 DISTRIB_RELEASE_MAJOR)

      list(LENGTH DISTRIB_RELEASE_LIST DISTRIB_RELEASE_PARTS)
      if(DISTRIB_RELEASE_PARTS GREATER 1)
        list(GET DISTRIB_RELEASE_LIST 1 DISTRIB_RELEASE_MINOR)
      endif()

      # Compatibility variables for OS info

      set( OS_RELEASE "${DISTRIB_RELEASE_MAJOR}" )
      if ( "${DISTRIB_ID}" STREQUAL "fedora" )
        set( OS_VERSION "f${OS_RELEASE}")
      elseif( "${DISTRIB_ID}" STREQUAL "scientific" )
        set( OS_VERSION "sl${OS_RELEASE}")
      elseif( DISTRIB_BASE_REDHAT )
        set( OS_VERSION "el${OS_RELEASE}")
      else()
        set( OS_VERSION "${OS_RELEASE}")
      endif()

      if( DISTRIB_BASE_REDHAT AND 
          "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND
          "${DISTRIB_RELEASE}" LESS 7 )
        set( OS_ID "${OS_VERSION}_64")
      else()
        set( OS_ID "${OS_VERSION}" )
      endif()

    endif()

    if( "${LCFG_OS_INFO}" MATCHES "PRETTY_NAME=\"([^\"]+)\"" )
      set( DISTRIB_DESCRIPTION "${CMAKE_MATCH_1}")
    endif()

  endif( EXISTS "/etc/os-release" )

  set( HAS_PROC "yes" )
  set( BOOTCOMP "systemd" )

  if( DISTRIB_BASE_REDHAT )
    if ( "${DISTRIB_RELEASE}" LESS 7 )
      set( BOOTCOMP "boot")
      set( LCFG_HIERARCHY_DEFAULT "legacy1" )
    else()
      set( LCFG_HIERARCHY_DEFAULT "legacy2" )
    endif()
  endif()

endif( "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux" )

IF( "${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")

set( LCFG_HIERARCHY_DEFAULT "macosx" )

SET(HAS_PROC "no")
SET(BOOTCOMP "macboot")

# We need to run uname ourselves to set the common variables so
# we can test which version of MacOS X we're running on.
FIND_PROGRAM(CMAKE_UNAME uname /bin /usr/bin /usr/local/bin )
IF(CMAKE_UNAME)
  EXEC_PROGRAM(uname ARGS -s OUTPUT_VARIABLE CMAKE_SYSTEM_NAME)
  EXEC_PROGRAM(uname ARGS -r OUTPUT_VARIABLE CMAKE_SYSTEM_VERSION)
  EXEC_PROGRAM(uname ARGS -p OUTPUT_VARIABLE CMAKE_SYSTEM_PROCESSOR
    RETURN_VALUE val)
  IF("${val}" GREATER 0)
    EXEC_PROGRAM(uname ARGS -m OUTPUT_VARIABLE CMAKE_SYSTEM_PROCESSOR
      RETURN_VALUE val)
  ENDIF("${val}" GREATER 0)
  IF("${val}" GREATER 0)
    SET(CMAKE_SYSTEM_PROCESSOR "unknown")
  ENDIF("${val}" GREATER 0)
  SET(CMAKE_UNAME ${CMAKE_UNAME} CACHE INTERNAL "uname command")
  # processor may have double quote in the name, and that needs to be removed
  STRING(REGEX REPLACE "\"" "" CMAKE_SYSTEM_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR}")
  STRING(REGEX REPLACE "/" "_" CMAKE_SYSTEM_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR}")
ENDIF(CMAKE_UNAME)
SET(OSX_VERSION ${DARWIN_MINOR_VERSION})

## This makes CPack use temporary install root for packaging.
## There seems to be a lot of discussion indicating that this should
## be the default, but it's not.
SET(CPACK_SET_DESTDIR "ON")

## Use the "Unspecified package to avoid the server defs
SET(CPACK_INSTALL_CMAKE_PROJECTS "${CMAKE_HOME_DIRECTORY};${LCFG_FULLNAME};Unspecified;/")

## Tells CPack not to bother creating tgz etc package
SET(CPACK_GENERATOR "PackageMaker")

# Set a sane package filename
SET(CPACK_PACKAGE_FILE_NAME ${LCFG_FULLNAME}-${LCFG_VERSION}-${LCFG_RELEASE})

# Default to building flat packages
IF(NOT DEFINED CPACK_OSX_PACKAGE_VERSION)
  SET(CPACK_OSX_PACKAGE_VERSION "10.5")
ENDIF(NOT DEFINED CPACK_OSX_PACKAGE_VERSION)

# Set architectures in case we're compiling anything
# 10.7 and beyond don't support powerpc.
IF(${CMAKE_SYSTEM_VERSION} MATCHES "10.6.*")
  SET(CMAKE_OSX_ARCHITECTURES ppc;i386;x86_64)
ELSE(${CMAKE_SYSTEM_VERSION} MATCHES "10.6.*")
  SET(CMAKE_OSX_ARCHITECTURES i386;x86_64)
ENDIF(${CMAKE_SYSTEM_VERSION} MATCHES "10.6.*")

IF(NOT DEFINED CPACK_PACKAGE_VENDOR)
  SET(CPACK_PACKAGE_VENDOR "org.lcfg")
ENDIF(NOT DEFINED CPACK_PACKAGE_VENDOR)

## Turns on CPack
INCLUDE(CPack)

# All the LCFG libraries are installed into /usr/local/lib so this is
# required to get the full path embedded in the dynamic libraries.
# See https://bugs.lcfg.org/show_bug.cgi?id=911

SET(CMAKE_INSTALL_NAME_DIR "/usr/local/lib")

ENDIF( "${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")

# Find the location of the perl executable

FIND_PACKAGE(Perl)
IF(PERL_FOUND)
  SET(PERL ${PERL_EXECUTABLE})
ELSE(PERL_FOUND)
  MESSAGE(FATAL_ERROR "Failed to find perl")
ENDIF(PERL_FOUND)

SET(PERL_INSTALLDIRS "site" CACHE STRING "Perl installation locations")

IF(${PERL_INSTALLDIRS} STREQUAL "vendor")
  SET(PERL_ARCHDIR "installvendorarch")
  SET(PERL_LIBDIR "installvendorlib")
ELSE(${PERL_INSTALLDIRS} STREQUAL "vendor")
  SET(PERL_ARCHDIR "installsitearch")
  SET(PERL_LIBDIR "installsitelib")
ENDIF(${PERL_INSTALLDIRS} STREQUAL "vendor")

EXECUTE_PROCESS(COMMAND ${PERL_EXECUTABLE}
                -MConfig -e "print \"\$Config{${PERL_ARCHDIR}}\""
                OUTPUT_VARIABLE PERL_ARCHDIR)
EXECUTE_PROCESS(COMMAND ${PERL_EXECUTABLE}
                -MConfig -e "print \"\$Config{${PERL_LIBDIR}}\""
                OUTPUT_VARIABLE PERL_LIBDIR)

# Find the location of the bash executable

FIND_PROGRAM(SHELL bash)

# Compatibility stuff

FIND_PROGRAM(EGREP egrep)
FIND_PROGRAM(SED sed)
FIND_PROGRAM(SORT sort)

SET(LCFGOS ${CMAKE_SYSTEM_NAME})

SET(LCFGARCH ${CMAKE_SYSTEM_PROCESSOR})

STRING( REGEX REPLACE "^i[1-6]86$" "i386" LCFGARCH ${LCFGARCH} )

# Variables describing the standard LCFG layout

set(LCFG_HIERARCHY "${LCFG_HIERARCHY_DEFAULT}" CACHE STRING "LCFG filesystem layout")

set_property(CACHE LCFG_HIERARCHY PROPERTY STRINGS fhs legacy3 legacy2 legacy1 local macosx) 

if( "${LCFG_HIERARCHY}" STREQUAL "local" OR "${LCFG_HIERARCHY}" STREQUAL "macosx" )
  set( LCFG_BASE "/usr/local" )
else() # fhs
  set( LCFG_BASE "/usr" )
endif()

set( LCFGLIB    "${LCFG_BASE}/share/lcfg" )

# Assuming we can always write data into /var

set( LCFGVAR    "/var/lib/lcfg" )
set( LCFGLOG    "/var/log/lcfg" )
set( LCFGTMP    "/var/tmp/lcfg" )

set( LCFGLOCK   "/run/lock/lcfg" )
set( LCFGRUN    "/run/lcfg" )
set( LCFGSTATUS "/run/lcfg/status" )

if ( "${LCFG_HIERARCHY}" MATCHES "^legacy([0-9]+)$" ) 
  set( LEGACY_LEVEL "${CMAKE_MATCH_0}")

  set( LCFGLIB  "${LCFG_BASE}/lib/lcfg" )
  set( LCFGVAR  "/var/lcfg" )
  set( LCFGLOG  "${LCFGVAR}/log" )
  set( LCFGTMP  "${LCFGVAR}/tmp" )

  if( "${LEGACY_LEVEL}" LESS 2 ) # Legacy 1 (EL6)
    set( INITDIR    "/etc/init.d" )

    set( LCFGLOCK   "${LCFGVAR}/lock" )
    set( LCFGRUN    "${LCFGVAR}/tmp" )
    set( LCFGSTATUS "${LCFGVAR}/status" )
  endif()

else()

  if( "${LCFG_HIERARCHY}" STREQUAL "macosx" )
    set( LCFGLIB    "${LCFG_BASE}/lib/lcfg" )
    set( LCFGVAR    "/var/lcfg" )
    set( LCFGLOG    "${LCFGVAR}/log" )
    set( LCFGTMP    "${LCFGVAR}/tmp" )
    set( LCFGLOCK   "${LCFGVAR}/lock" )
    set( LCFGRUN    "${LCFGVAR}/tmp" )
    set( LCFGSTATUS "${LCFGVAR}/status" )
  endif()

endif()

# ALL

set( LCFGCOMP      "${LCFGLIB}/components" )
set( LCFGDATA      "${LCFGLIB}/conf" )
set( LCFGCONF      "${LCFGVAR}/conf" )

# Binaries

set( LCFGBIN       "${LCFG_BASE}/bin" )
set( LCFGSBIN      "${LCFG_BASE}/sbin" )
set( LCFGOM        "${LCFGBIN}/om" )

# Documentation

set( LCFGDOC       "${LCFGLIB}/doc" )
set( LCFGHTML      "${LCFGDOC}/html" )
set( LCFGPOD       "${LCFGDOC}/pod" )
set( LCFGBIB       "${LCFGDOC}/bib" )
set( LCFGPDF       "${LCFGDOC}/pdf" )

# Manual pages

set( LCFGMAN       "${LCFG_BASE}/share/man" )
set( LIBMANSECT    3 CACHE STRING "The manual page section for libraries" )
set( MANSECT       8 CACHE STRING "The manual page section for admin commands" )
set( LIBMANDIR     "${LCFGMAN}/man${LIBMANSECT}" )
set( MANDIR        "${LCFGMAN}/man${MANSECT}" )

# Config files

set( BOOTSTAMP     /var/run/bootstamp CACHE FILEPATH "last boot time-stamp marker file" )
set( RELEASEFILE   /etc/LCFG-RELEASE  CACHE FILEPATH "The LCFG platform release file" )
set( LCFGROTATED   /etc/logrotate.d   CACHE PATH "Directory for log rotate config files" )

# Schema files

set( LCFGCLIENTDEF "${LCFGLIB}/defaults/client" )
set( LCFGSERVERDEF "${LCFGLIB}/defaults/server" )

# Component directories

set( CONFIGDIR     "${LCFGCONF}/${LCFG_NAME}" )
set( ICONDIR       "${LCFGDATA}/${LCFG_NAME}/icons" )
set( SCRIPTDIR     "${LCFGDATA}/${LCFG_NAME}/scripts" )
set( LCFG_TMPLDIR  "${LCFGDATA}/${LCFG_NAME}" )

# Main library and PAM module directories

if( "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")

  if( DISTRIB_BASE_REDHAT )

    if( "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" )

      set( LIBDIR "/usr/lib64" CACHE PATH "Library installation location")
      set( LIBSECURITYDIR "/lib64/security" CACHE PATH "PAM module installation location")
    elseif()
      set( LIBDIR "/usr/lib" CACHE PATH "Library installation location" )
      set( LIBSECURITYDIR "/lib/security" CACHE PATH "PAM module installation location" )
    endif()

  elseif( DISTRIB_BASE_DEBIAN )

      set( LIBDIR "/usr/lib" CACHE PATH "Library installation location" )
      set( LIBSECURITYDIR "/lib/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu/security" CACHE PATH "PAM module installation location" )

  endif()

endif( "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")

SET(MSG " ** Generated file : do not edit **")

[%+ INCLUDE build.cmake.tt %]
