package Locale::CLDR::Transformations::Bgn::Dv::Dv_latn;
# This file auto generated from Data\common\transforms\Maldivian-Latin-BGN.xml
#	on Fri 29 Apr  6:48:45 pm GMT

use version;

our $VERSION = version->declare('v0.29.0');

use v5.10.1;
use mro 'c3';
use utf8;
use if $^V ge v5.12.0, feature => 'unicode_strings';

use Types::Standard qw( Str Int HashRef ArrayRef CodeRef RegexpRef );
use Moo;

BEGIN {
	die "Transliteration requires Perl 5.18 or above"
		unless $^V ge v5.18.0;
}

no warnings 'experimental::regex_sets';
has 'transforms' => (
	is => 'ro',
	isa => ArrayRef,
	init_arg => undef,
	default => sub { [
		qr/(?^umi:\G(?^u:[\p{block=thaana}ﷲ]))/,
		{
			type => 'transform',
			data => [
				{
					from => q(Any),
					to => q(NFD),
				},
			],
		},
		{
			type => 'conversion',
			data => [
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްހ)),
					result  => q(hh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ހ)),
					result  => q(h),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:(?[[ް] + [ަ-ޯ]]))),
					replace => q((?^u:[އށ] ްނ)),
					result  => q(nn),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްނ)),
					result  => q(nn\'),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:(?[[ް] + [ަ-ޯ]]))),
					replace => q((?^u:ނ)),
					result  => q(n),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ނ)),
					result  => q(n\'),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްރ)),
					result  => q(rr),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ރ)),
					result  => q(r),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްބ)),
					result  => q(bb),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ބ)),
					result  => q(b),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޅ)),
					result  => q(hlh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޅ)),
					result  => q(lh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްކ)),
					result  => q(kk),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ކ)),
					result  => q(k),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްވ)),
					result  => q(vv),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ވ)),
					result  => q(v),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްމ)),
					result  => q(mm),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:މ)),
					result  => q(m),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްފ)),
					result  => q(ff),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ފ)),
					result  => q(f),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްދ)),
					result  => q(hdh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ދ)),
					result  => q(dh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްތް)),
					result  => q(hiy),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްތ)),
					result  => q(hth),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ިތް)),
					result  => q(iy),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ތް)),
					result  => q(iy),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ތ)),
					result  => q(th),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްލ)),
					result  => q(ll),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ލ)),
					result  => q(l),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްގ)),
					result  => q(gg),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ގ)),
					result  => q(g),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޏ)),
					result  => q(hgn),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޏ)),
					result  => q(gn),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްސ)),
					result  => q(ss),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ސ)),
					result  => q(s),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޑ)),
					result  => q(dd),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޑ)),
					result  => q(d),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޒ)),
					result  => q(zz),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޒ)),
					result  => q(z),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޓ)),
					result  => q(tt),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޓ)),
					result  => q(t),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޔ)),
					result  => q(yy),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޔ)),
					result  => q(y),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޕ)),
					result  => q(pp),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޕ)),
					result  => q(p),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޖ)),
					result  => q(jj),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޖ)),
					result  => q(j),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޗ)),
					result  => q(hch),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޗ)),
					result  => q(ch),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޞ)),
					result  => q(şş),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޞ)),
					result  => q(ş),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޝ)),
					result  => q(hsh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޝ)),
					result  => q(sh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޜ)),
					result  => q(zz),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޜ)),
					result  => q(z),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޚ)),
					result  => q(hkh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޚ)),
					result  => q(kh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޙ)),
					result  => q(ḩḩ),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޙ)),
					result  => q(ḩ),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޛ)),
					result  => q(hdh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޛ)),
					result  => q(dh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޘ)),
					result  => q(hth),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޘ)),
					result  => q(th),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޥ)),
					result  => q(ww),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޥ)),
					result  => q(w),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޤ)),
					result  => q(qq),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޤ)),
					result  => q(q),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޣ)),
					result  => q(hgh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޣ)),
					result  => q(gh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޢ)),
					result  => q(\\'),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޢ)),
					result  => q(\'),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޡ)),
					result  => q(z̧z̧),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޡ)),
					result  => q(z̧),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޠ)),
					result  => q(ţţ),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޠ)),
					result  => q(ţ),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޟ)),
					result  => q(ḑḑ),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޟ)),
					result  => q(ḑ),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްޱ)),
					result  => q(n̲n̲),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޱ)),
					result  => q(n̲),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[^ \p{L} \p{M} \p{N}])),
					replace => q((?^u:[އށ] ް)),
					result  => q(h),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ްށ)),
					result  => q(hsh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ށ)),
					result  => q(sh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:[އށ] ް)),
					result  => q(),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ް)),
					result  => q(),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:އ)),
					result  => q(),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:([ަ-ޯ])ﷲ)),
					result  => q(),
					revisit => 6,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ﷲ)),
					result  => q(allāh),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ަ)),
					result  => q(a),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ާ)),
					result  => q(aa),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ެ)),
					result  => q(e),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޭ)),
					result  => q(ey),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ި)),
					result  => q(i),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ީ)),
					result  => q(ee),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޮ)),
					result  => q(o),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޯ)),
					result  => q(oa),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ު)),
					result  => q(u),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ޫ)),
					result  => q(oo),
					revisit => 0,
				},
			]
		},
	] },
);

no Moo;

1;

# vim: tabstop=4
