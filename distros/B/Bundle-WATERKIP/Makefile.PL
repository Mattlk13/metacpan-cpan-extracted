# This file was automatically generated by Dist::Zilla::Plugin::MakeMaker v6.031.
use strict;
use warnings;

use 5.026000;

use ExtUtils::MakeMaker;

my %WriteMakefileArgs = (
  "ABSTRACT" => "A mono repo for perl scripts and modules which WATERKIP likes",
  "AUTHOR" => "Wesley Schwengle <waterkip\@cpan.org>",
  "CONFIGURE_REQUIRES" => {
    "CPAN::Meta::Requirements" => "2.120620",
    "ExtUtils::MakeMaker" => 0,
    "Module::Metadata" => 0
  },
  "DISTNAME" => "Bundle-WATERKIP",
  "EXE_FILES" => [
    "bin/get-azure-token.pl",
    "bin/i3-wod",
    "bin/jwt-decrypt.pl",
    "bin/opnpost",
    "bin/parse-phone-number",
    "bin/rm_pm",
    "bin/today-is"
  ],
  "LICENSE" => "bsd",
  "MIN_PERL_VERSION" => "5.026000",
  "NAME" => "Bundle::WATERKIP",
  "PREREQ_PM" => {
    "AnyEvent" => 0,
    "AnyEvent::I3X::Workspace::OnDemand" => 0,
    "Authen::SASL" => 0,
    "Azure::AD::Password" => 0,
    "Crypt::JWT" => 0,
    "Crypt::SaltedHash" => 0,
    "Cwd" => 0,
    "Data::Random::NL" => "1.6",
    "Date::Holidays" => "1.36",
    "Date::Holidays::AW" => "0.004",
    "Date::Holidays::BQ" => "0.001",
    "Date::Holidays::CW" => "0.001",
    "Date::Holidays::NL" => "0.006",
    "DateTime" => 0,
    "DateTime::Format::ISO8601" => 0,
    "Devel::Cover" => 0,
    "Digest::MD5" => 0,
    "Dist::Zilla::PluginBundle::Author::WATERKIP" => "3.3",
    "EV" => 0,
    "ExtUtils::Installed" => 0,
    "ExtUtils::Packlist" => 0,
    "File::Find" => 0,
    "File::LibMagic" => 0,
    "File::MimeInfo::Magic" => 0,
    "File::ShareDir" => 0,
    "File::Spec" => 0,
    "File::Spec::Functions" => 0,
    "File::Temp" => 0,
    "Finance::Crypto::Exchange::Kraken" => "0.002",
    "Finance::Loan::Repayment" => "1.5",
    "Finance::Salary::Rate" => "0.001",
    "Finance::Tax::Aruba" => "0.009",
    "FindBin" => 0,
    "Getopt::Long" => 0,
    "HTTP::Cookies" => 0,
    "HTTP::Daemon::SSL" => 0,
    "HTTP::Request" => 0,
    "HTTP::Request::Params" => 0,
    "IO::All" => 0,
    "IO::Socket::SSL" => 0,
    "Image::ExifTool" => 0,
    "JSON::XS" => 0,
    "LWP::UserAgent" => 0,
    "List::Util" => 0,
    "Moo" => 0,
    "Moose" => 0,
    "Net::SMTP" => 0,
    "Net::SMTP::SSL" => 0,
    "Number::Phone" => 0,
    "Object::Pad" => "0.66",
    "POSIX" => 0,
    "Pod::Usage" => 0,
    "Proc::Find" => 0,
    "SQL::Beautify" => 0,
    "Sys::Hostname" => 0,
    "Term::ReadLine" => 0,
    "Test::Mock::One" => "0.011",
    "Text::Continuation::Parser" => "0.5",
    "Text::ParseWords" => 0,
    "Types::Standard" => 0,
    "WebService::KvKAPI" => "0.106",
    "XML::Compile::Schema" => 0,
    "XML::LibXML" => 0,
    "YA::CLI" => "0.006",
    "YA::CLI::ActionRole" => 0,
    "YAML::XS" => 0,
    "namespace::autoclean" => 0
  },
  "TEST_REQUIRES" => {
    "File::Spec" => 0,
    "IO::Handle" => 0,
    "IPC::Open3" => 0,
    "Test::More" => "0.96"
  },
  "VERSION" => "0.003",
  "test" => {
    "TESTS" => "t/*.t"
  }
);


my %FallbackPrereqs = (
  "AnyEvent" => 0,
  "AnyEvent::I3X::Workspace::OnDemand" => 0,
  "Authen::SASL" => 0,
  "Azure::AD::Password" => 0,
  "Crypt::JWT" => 0,
  "Crypt::SaltedHash" => 0,
  "Cwd" => 0,
  "Data::Random::NL" => "1.6",
  "Date::Holidays" => "1.36",
  "Date::Holidays::AW" => "0.004",
  "Date::Holidays::BQ" => "0.001",
  "Date::Holidays::CW" => "0.001",
  "Date::Holidays::NL" => "0.006",
  "DateTime" => 0,
  "DateTime::Format::ISO8601" => 0,
  "Devel::Cover" => 0,
  "Digest::MD5" => 0,
  "Dist::Zilla::PluginBundle::Author::WATERKIP" => "3.3",
  "EV" => 0,
  "ExtUtils::Installed" => 0,
  "ExtUtils::Packlist" => 0,
  "File::Find" => 0,
  "File::LibMagic" => 0,
  "File::MimeInfo::Magic" => 0,
  "File::ShareDir" => 0,
  "File::Spec" => 0,
  "File::Spec::Functions" => 0,
  "File::Temp" => 0,
  "Finance::Crypto::Exchange::Kraken" => "0.002",
  "Finance::Loan::Repayment" => "1.5",
  "Finance::Salary::Rate" => "0.001",
  "Finance::Tax::Aruba" => "0.009",
  "FindBin" => 0,
  "Getopt::Long" => 0,
  "HTTP::Cookies" => 0,
  "HTTP::Daemon::SSL" => 0,
  "HTTP::Request" => 0,
  "HTTP::Request::Params" => 0,
  "IO::All" => 0,
  "IO::Handle" => 0,
  "IO::Socket::SSL" => 0,
  "IPC::Open3" => 0,
  "Image::ExifTool" => 0,
  "JSON::XS" => 0,
  "LWP::UserAgent" => 0,
  "List::Util" => 0,
  "Moo" => 0,
  "Moose" => 0,
  "Net::SMTP" => 0,
  "Net::SMTP::SSL" => 0,
  "Number::Phone" => 0,
  "Object::Pad" => "0.66",
  "POSIX" => 0,
  "Pod::Usage" => 0,
  "Proc::Find" => 0,
  "SQL::Beautify" => 0,
  "Sys::Hostname" => 0,
  "Term::ReadLine" => 0,
  "Test::Mock::One" => "0.011",
  "Test::More" => "0.96",
  "Text::Continuation::Parser" => "0.5",
  "Text::ParseWords" => 0,
  "Types::Standard" => 0,
  "WebService::KvKAPI" => "0.106",
  "XML::Compile::Schema" => 0,
  "XML::LibXML" => 0,
  "YA::CLI" => "0.006",
  "YA::CLI::ActionRole" => 0,
  "YAML::XS" => 0,
  "namespace::autoclean" => 0
);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.040
requires('JSON::XS', '4.02') if has_module('JSON::XS', '4.01') or !defined has_module('JSON::XS', '4.01');


unless ( eval { ExtUtils::MakeMaker->VERSION(6.63_03) } ) {
  delete $WriteMakefileArgs{TEST_REQUIRES};
  delete $WriteMakefileArgs{BUILD_REQUIRES};
  $WriteMakefileArgs{PREREQ_PM} = \%FallbackPrereqs;
}

delete $WriteMakefileArgs{CONFIGURE_REQUIRES}
  unless eval { ExtUtils::MakeMaker->VERSION(6.52) };

WriteMakefile(%WriteMakefileArgs);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.040
sub _add_prereq {
  my ($mm_key, $module, $version_or_range) = @_;
  $version_or_range ||= 0;
  warn "$module already exists in $mm_key (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $WriteMakefileArgs{$mm_key}{$module}
      and $WriteMakefileArgs{$mm_key}{$module} ne '0'
      and $WriteMakefileArgs{$mm_key}{$module} ne $version_or_range;
  warn "$module already exists in FallbackPrereqs (at version $FallbackPrereqs{$module}) -- need to do a sane metamerge!"
    if exists $FallbackPrereqs{$module} and $FallbackPrereqs{$module} ne '0'
        and $FallbackPrereqs{$module} ne $version_or_range;
  $WriteMakefileArgs{$mm_key}{$module} = $FallbackPrereqs{$module} = $version_or_range;
  return;
}

sub has_module {
  my ($module, $version_or_range) = @_;
  require Module::Metadata;
  my $mmd = Module::Metadata->new_from_module($module);
  return undef if not $mmd;
  return $mmd->version($module) if not defined $version_or_range;

  require CPAN::Meta::Requirements;
  my $req = CPAN::Meta::Requirements->new;
  $req->add_string_requirement($module => $version_or_range);
  return 1 if $req->accepts_module($module => $mmd->version($module));
  return 0;
}

sub requires { goto &runtime_requires }

sub runtime_requires {
  my ($module, $version_or_range) = @_;
  _add_prereq(PREREQ_PM => $module, $version_or_range);
}
