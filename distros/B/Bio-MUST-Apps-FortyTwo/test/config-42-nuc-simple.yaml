# ===Run mode===
# Two values are available: 'phylogenomic' and 'metagenomic'.
# The phylogenomic mode is designed to enrich multiple sequence alignements
# (ALIs) with orthologues for subsequent phylogenomic analysis. In contrast,
# the metagenomic mode is designed to probe contamination in transcriptomic
# data using reference ribosomal protein ALIs; it produces a taxonomic report
# per ALI listing the lineage of each identified orthologous sequence.
# When not specified, 'run_mode' internally defaults to 'phylogenomic'.
run_mode: phylogenomic

# ===Suffix to append to infile basenames for deriving outfile names===
# When not specified 'outsuffix' internally defaults to '-42'.
# Use a bare 'out_suffix:' to reuse the ALI name and to preserve the original
# file by appending a .bak extension to its name.
out_suffix: -42-nuc-simple


# ===Orgs from where to select BLAST queries===
# Depending on availability at least one query by family and by org will be
# picked for the 'homologues' and 'references' BLAST rounds.
query_orgs: 
    - Camponotus floridanus 
    - Nasonia vitripennis 
    - Tribolium castaneum 


# ===Optional args for each BLAST step===
# Any valid command-line option can be specified (see NCBIBLAST+ docs).
# Note the hyphens (-) before option names (departing from API consistency).
# -query, -db, -out, -outfmt, -db_gencode, -query_gencode will be ignored as
# they are directly handled by forty-two itself. -max_target_seqs may be
# specified at step 'homologues' to speed up things.
blast_args:
    # TBLASTN vs banks
    homologues:
        -evalue: 1e-05
        -seg: yes
        -num_threads: 1
        -max_target_seqs: 10000
    # BLASTP vs ref banks (for transitive BRH ; actually two steps)
    references:
        -evalue: 1e-05
        -num_threads: 1
    # BLASTX vs ref banks (for transitive BRH)
    orthologues:
        -evalue: 1e-05
        -num_threads: 1
    # BLASTX vs ALI (for tax filters and alignment)
    templates:
        -evalue: 1e-05
        -seg: no
        -num_threads: 1


# ===BRH mode for assessing orthology===
# Two values are available: 'on' and 'off'.
# If set to 'on', a candidate seq must be in BRH with all reference proteomes
# to be considered as an orthologous seq. In contrast, all candidate seqs are
# considered as orthologous seqs when this parameter is set to 'off'.
# When not specified, 'ref_brh_mode' internally defaults to 'on'.
# To limit the number of candidate seqs, use the '-max_target_seqs' option of
# the BLAST executable(s) at the 'homologues' step.
ref_brh_mode: on


# ===Path to dir holding complete proteome BLAST databases===
# Only required when setting 'ref_brh_mode' to 'on'.
ref_bank_dir: test/ref_banks

# ===Basenames of complete proteome BLAST databases (keyed by org name)===
# Only required when setting 'ref_brh_mode' to 'on'.
# You can list as many databases as needed here.
# Only those specified as 'ref_orgs' below will actually be used for BRH.
ref_org_mapper: 
    Camponotus floridanus: Camponotus_floridanus 
    Nasonia vitripennis: Nasonia_vitripennis 
    Tribolium castaneum: Tribolium_castaneum 

# ===Orgs to be used for BRH checks===
# Only required when setting 'ref_brh_mode' to 'on'.
# To be considered as an orthologue, a candidate seq must be in transitive BRH
# for all listed orgs (and not for only one of them).
# Listing more orgs thus increases the stringency of the BRH check. Note that
# 'ref_orgs' may but DO NOT NEED to match 'query_orgs'.
ref_orgs: 
    - Camponotus floridanus 
    - Nasonia vitripennis 
    - Tribolium castaneum 

# ===Fraction of ref_orgs to really use when assessing orthology===
# Only meaningful when setting 'ref_brh_mode' to 'on'.
# This parameter introduces some flexibility when using reference proteomes.
# If set to a fractional value (below 1), only the best proteomes will be
# considered during BRHs. The best proteomes are those against which the
# queries have the highest average scores. This helps discarding ref_orgs that
# might hinder orthology assessment because they lack the orthologous gene(s).
# When not specified, 'reg_org_mul' internally defaults to 1.0, which is the
# strictest mode since all reference proteomes are used during BRHs.
ref_org_mul: 0.66

# ===Bit score reduction allowed when including non-1st hits among best hits===
# Only meaningful when setting 'ref_brh_mode' to 'on'.
# This parameter applies when collecting best hits for queries to complete
# proteomes, so that close in-paralogues can all be included in the set of
# best hits. The allowed bit score reduction of any hit is expressed relatively
# to the score of the previous hit. During BRH checks, only the very first hit
# for the candidate seq is actually tested for inclusion in this set but for
# all complete proteomes. By default at most 10 hits are considered. To change
# this, use the '-max_target_seqs' option of the BLAST executable(s) at the
# 'reference' step.
# When not specified 'ref_score_mul' internally defaults to 1.0, which is the
# strictest mode since only equally-best hits are retained.
ref_score_mul: 0.99



# ===Hit trimming switch===
# Two values are available: 'on' and 'off'.
# If set to 'on', each candidate seq is first trimmed to the range covered by
# the HSPs that retrieved it. This helps exonerate to splice genes correctly.
# The details of this trimming step can be fine-tuned by editing the other
# hit_* parameters of this configuration file.
# When not specified, 'trimming_mode' internally defaults to 'on'.
trimming_mode: on

# ===Max distance between HSPs allowed when defining a hit range===
# Only meaningful when setting 'trimming_mode' to 'on'.
# HSPs define ranges that will be used to extract one or more candidate seq(s)
# from each hit. Before extraction, neighboring ranges are merged if they lie
# at max this distance (in nt) apart. This distance can thus be seen as the
# max length allowed for an intron within a gene to be added.
# When not specified 'trim_max_shift' internally defaults to 20000 nt.
trim_max_shift: 20000

# ===Extra margin to hit range===
# Only meaningful when setting 'trimming_mode' to 'on'.
# Since HSPs can sometimes miss the beginning or end of the best hit, this
# parameter extends the range of the candidate seq to be extracted at both
# extremities (in nt) to allow for a potentially more complete seq.
# When not specified 'trim_extra_margin' internally defaults to 15 nt.
trim_extra_margin: 15


# ===Action to perform when a preexisting lengthened seq is identified===
# Currently, two values are available: 'remove' and 'keep'.
# When not specified, 'ls_action' internally defaults to 'keep'.
ls_action: keep


# ===Engine to be used for aligning new seqs===
# Four values are available: 'blast', 'exonerate', 'exoblast' and 'off'.
# If the alignment engine is 'off', new seqs are added 'as is' to the ALI.
# Consequently, they will be full length but not aligned to existing seqs.
# This mode is meant for protein seqs only and thus cannot be used when adding
# transcripts from nucleotide banks.
# The 'exonerate' mode sometimes fails to align orthologous seqs due to a bug
# in exonerate executable. This causes new seqs to be lost. To automatically
# retry aligning them with BLAST in case of failure, use the 'exoblast' mode.
# When not specified, 'aligner_mode' internally defaults to 'blast'.
aligner_mode: exoblast


# ===Template selection mode for aligning new seqs===
# Only meaningful when setting 'aligner_mode' to a value other than 'off'.
# Two values are available: 'on' and 'off'.
# If set to 'on', closest relatives belonging to the same org as the new seqs
# will not be selected as templates, thus allowing the latter to align better.
# When not specified, 'ali_patch_mode' internally defaults to 'off'.
ali_patch_mode: off

# ===Coverage improvement required to consider non-1st hits as templates===
# Only meaningful when setting 'aligner_mode' to a value other than 'off'.
# This parameter applies when collecting templates for aligning the new seqs.
# Templates get considered as long as query coverage improves at least of this
# value (relatively to the previous template). The exact effect of this
# parameter depends on the 'aligner_mode' engine: 'exonerate' will try to use the
# longest template for alignment while 'blast' will use each hit in turn (as a
# fall-back with 'exoblast'). New seqs can thus be added more than once to the
# ALI (with ids *.H1.N, *.H2.N etc).
# When not specified 'ali_cover_mul' internally defaults to 1.1., which means
# that if the BLAST alignment with the second template is at least 110% of the
# BLAST alignment with the first template, both templates are retained.
ali_cover_mul: 1.1


# ===Taxonomic report switch===
# Two values are available: 'on' and 'off'.
# If set to 'on', the lineage of new seqs is inferred by analyzing the taxonomy
# of their ALI closest relatives and one '.tax-report' file is generated for
# each ALI processed (see 'run_mode' above).
# The details of this taxonomic analysis can be fine-tuned by editing the other
# tax_* parameters of this configuration file.
# When not specified, 'tax_reports' internally defaults to 'off'. Yet, the YAML
# generator automatically sets it to 'on' if 'run_mode' is 'metagenomic'.
tax_reports: on


# ===Path to dir holding transcript BLAST databases===
bank_dir: test/candidates/genomes/

# ===Default args applying to all orgs unless otherwise specified===
# Some of these args can be thus specified on a per-org basis below if needed.
# This especially makes sense for 'code'.
defaults:
    # ===Genetic code for translated BLAST searches===
    # When not specified 'code' internally defaults to 1 (standard).
    # See ftp://ftp.ncbi.nih.gov/entrez/misc/data/gc.prt for other codes.
    code: 1

# ===Org-specific args===
# The only mandatory args are 'org' and 'banks'. All other args are taken from
# the 'defaults:' section described above.
# This part can be concatenated on a per-run basis to the previous part, which
# would be the same for several runs. In the future, forty-two might support
# two different configuration files to reflect this conceptual distinction.
orgs: 
  - org: Apis mellifera
    banks:
        - Apis_mellifera
     
  - org: Harpegnathos saltator
    banks:
        - Harpegnathos_saltator
     

#
# This config file has been generated automatically on 15:54:37 10-Jan-2019.
# We advise not to modify directly this file manually but rather to modify
# the yaml-generator command instead for traceability and reproducibility.
#
#yaml-generator-42.pl --run_mode=phylogenomic --out_suffix=-42-nuc-simple \
#--queries=MSAs/queries.idl \
#--evalue=1e-05 --homologues_seg=yes --max_target_seqs=10000 --templates_seg=no \
#--bank_dir candidates/genomes/ --bank_suffix=.nsq --bank_mapper=candidates/genomes/nuc-bank-mapper.idm \
#--ref_brh_mode=on --ref_bank_dir ref_banks --ref_bank_suffix=.psq --ref_bank_mapper=ref_banks/ref-bank-mapper.idm \
#--ref_org_mul=0.66 --ref_score_mul=0.99 \
#--trimming_mode=on --trim_max_shift=20000 --trim_extra_margin=15 \
#--ls_action=keep --aligner_mode=exoblast --ali_patch_mode=off --ali_cover_mul=1.1 \
#--tax_reports=on \



