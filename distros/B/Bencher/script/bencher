#!perl

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our $AUTHORITY = 'cpan:PERLANCAR'; # AUTHORITY
our $DATE = '2022-11-30'; # DATE
our $DIST = 'Bencher'; # DIST
our $VERSION = '1.062.2'; # VERSION

binmode(STDOUT, ":encoding(utf8)");
Perinci::CmdLine::Any->new(
    url => '/Bencher/Backend/bencher',
    extra_urls_for_version => ['/Bencher/Backend/', '/Bencher/'],
    log => 1,
    pass_cmdline_object => 1,
)->run;

# ABSTRACT: A benchmark framework (CLI)
# PODNAME: bencher

__END__

=pod

=encoding UTF-8

=head1 NAME

bencher - A benchmark framework (CLI)

=head1 VERSION

This document describes version 1.062.2 of bencher (from Perl distribution Bencher), released on 2022-11-30.

=head1 SYNOPSIS

B<B<bencher>> [B<L<--action|/"--show-scenario">>=I<str>|B<L<-L|/"--show-scenario">>|B<L<-a|/"--show-scenario">>=I<str>|B<L<--dump-items|/"--show-scenario">>|B<L<--dump-parsed-scenario|/"--show-scenario">>|B<L<--list-datasets|/"--show-scenario">>|B<L<--list-items|/"--show-scenario">>|B<L<--list-participant-modules|/"--show-scenario">>|B<L<--list-participants|/"--show-scenario">>|B<L<--list-perls|/"--show-scenario">>|B<L<--list-permutes|/"--show-scenario">>|B<L<--list-scenario-modules|/"--show-scenario">>|B<L<--profile|/"--show-scenario">>|B<L<--show-items-codes|/"--show-scenario">>|B<L<--show-items-outputs|/"--show-scenario">>|B<L<--show-items-results|/"--show-scenario">>|B<L<--show-items-results-sizes|/"--show-scenario">>|B<L<--show-scenario|/"--show-scenario">>] [B<L<--capture-stderr|/"--capture-stderr">>|B<L<--no-capture-stderr|/"--capture-stderr">>|B<L<--nocapture-stderr|/"--capture-stderr">>] [B<L<--capture-stdout|/"--capture-stdout">>|B<L<--no-capture-stdout|/"--capture-stdout">>|B<L<--nocapture-stdout|/"--capture-stdout">>] [B<L<--code-startup|/"--code-startup">>] [B<L<--config-path|/"--config-path=s, -c">>=I<path>|B<L<-c|/"--config-path=s, -c">>|B<L<--no-config|/"--no-config, -C">>|B<L<-C|/"--no-config, -C">>] [B<L<--config-profile|/"--config-profile=s, -P">>=I<profile>|B<L<-P|/"--config-profile=s, -P">>] [B<L<--cpanmodules-module|/"--cpanmodules-module=s">>=I<L<perl::modname|Sah::Schema::perl::modname>>] [B<L<--datasets|/"--datasets=s">>=I<hash>|B<L<-d|/"--datasets=s">>=I<hash>|B<L<--dataset|/"--datasets=s">>=I<hash>] [B<L<--debug|/"--debug">>|B<L<--log-level|/"--log-level=s">>=I<level>|B<L<--quiet|/"--quiet">>|B<L<--trace|/"--trace">>|B<L<--verbose|/"--verbose">>] [B<L<--detail|/"--detail, -l">>|B<L<-l|/"--detail, -l">>|B<L<--no-detail|/"--detail, -l">>|B<L<--nodetail|/"--detail, -l">>] [B<L<--env-hashes|/"--env-hashes=s">>=I<hash>|B<L<--env-hash|/"--env-hashes=s">>=I<hash>] [(B<L<--exclude-dataset-name|/"--exclude-dataset-name=s@">>=I<str>)+] [B<L<--exclude-dataset-pattern|/"--exclude-dataset-pattern=s">>=I<re>] [(B<L<--exclude-dataset-seq|/"--exclude-dataset-seq=s@">>=I<int>)+] [(B<L<--exclude-dataset-tag|/"--exclude-dataset-tag=s@">>=I<str>)+] [(B<L<--exclude-dataset|/"--exclude-dataset=s@">>=I<str>)+] [B<L<--exclude-function-pattern|/"--exclude-function-pattern=s">>=I<re>] [(B<L<--exclude-function|/"--exclude-function=s@">>=I<str>)+] [(B<L<--exclude-item-name|/"--exclude-item-name=s@">>=I<str>)+] [B<L<--exclude-item-pattern|/"--exclude-item-pattern=s">>=I<re>] [(B<L<--exclude-item-seq|/"--exclude-item-seq=s@">>=I<int>)+] [(B<L<--exclude-item|/"--exclude-item=s@">>=I<str>)+] [B<L<--exclude-module-pattern|/"--exclude-module-pattern=s">>=I<re>] [(B<L<--exclude-module|/"--exclude-module=s@">>=I<str>)+] [(B<L<--exclude-participant-name|/"--exclude-participant-name=s@">>=I<str>)+] [B<L<--exclude-participant-pattern|/"--exclude-participant-pattern=s">>=I<re>] [(B<L<--exclude-participant-seq|/"--exclude-participant-seq=s@">>=I<int>)+] [(B<L<--exclude-participant-tag|/"--exclude-participant-tag=s@">>=I<str>)+] [(B<L<--exclude-participant|/"--exclude-participant=s@">>=I<str>)+] [(B<L<--exclude-perl|/"--exclude-perl=s@">>=I<str>)+] [B<L<--exclude-pp-modules|/"--exclude-pp-modules, --nopp">>|B<L<--nopp|/"--exclude-pp-modules, --nopp">>] [B<L<--exclude-xs-modules|/"--exclude-xs-modules, --noxs">>|B<L<--noxs|/"--exclude-xs-modules, --noxs">>] [B<L<--format|/"--format=s">>=I<name>|B<L<--json|/"--json">>] [(B<L<--include-dataset-name|/"--include-dataset-name=s@">>=I<str>)+] [B<L<--include-dataset-pattern|/"--include-dataset-pattern=s">>=I<re>] [(B<L<--include-dataset-seq|/"--include-dataset-seq=s@">>=I<int>)+] [(B<L<--include-dataset-tag|/"--include-dataset-tag=s@">>=I<str>)+] [(B<L<--include-dataset|/"--include-dataset=s@">>=I<str>)+] [B<L<--include-function-pattern|/"--include-function-pattern=s">>=I<re>] [(B<L<--include-function|/"--include-function=s@">>=I<str>)+] [(B<L<--include-item-name|/"--include-item-name=s@">>=I<str>)+] [B<L<--include-item-pattern|/"--include-item-pattern=s">>=I<re>] [(B<L<--include-item-seq|/"--include-item-seq=s@">>=I<int>)+] [(B<L<--include-item|/"--include-item=s@">>=I<str>)+] [B<L<--include-module-pattern|/"--include-module-pattern=s">>=I<re>] [(B<L<--include-module|/"--include-module=s@">>=I<str>)+] [(B<L<--include-participant-name|/"--include-participant-name=s@">>=I<str>)+] [B<L<--include-participant-pattern|/"--include-participant-pattern=s">>=I<re>] [(B<L<--include-participant-seq|/"--include-participant-seq=s@">>=I<int>)+] [(B<L<--include-participant-tag|/"--include-participant-tag=s@">>=I<str>)+] [(B<L<--include-participant|/"--include-participant=s@">>=I<str>)+] [(B<L<--include-path|/"--include-path=s@, -I">>=I<str>)+|(B<L<-I|/"--include-path=s@, -I">>=I<str>)+] [(B<L<--include-perl|/"--include-perl=s@">>=I<str>)+] [B<L<--keep-tempdir|/"--keep-tempdir">>|B<L<--no-keep-tempdir|/"--keep-tempdir">>|B<L<--nokeep-tempdir|/"--keep-tempdir">>] [B<L<--module-startup|/"--module-startup">>] [B<L<--multimodver|/"--multimodver=s">>=I<L<perl::modname|Sah::Schema::perl::modname>>] [B<L<--multiperl|/"--multiperl">>|B<L<--no-multiperl|/"--multiperl">>|B<L<--nomultiperl|/"--multiperl">>] [B<L<--(no)naked-res|/"--naked-res">>] [B<L<--no-env|/"--no-env">>] [B<L<--note|/"--note=s">>=I<str>] [B<L<--on-failure|/"--on-failure=s">>=I<str>] [B<L<--on-result-failure|/"--on-result-failure=s">>=I<str>] [B<L<--page-result|/"--page-result">>[=I<program>]|B<L<--view-result|/"--view-result">>[=I<program>]] [B<L<--participants|/"--participants=s">>=I<hash>|B<L<-p|/"--participants=s">>=I<hash>|B<L<--participant|/"--participants=s">>=I<hash>] [B<L<--precision-limit|/"--precision-limit=s">>=I<float>] [B<L<--precision|/"--precision=s">>=I<float>] [B<L<--raw|/"--raw">>|B<L<--no-raw|/"--raw">>|B<L<--noraw|/"--raw">>] [B<L<--render-as-benchmark-pm|/"--render-as-benchmark-pm, -B">>|B<L<-B|/"--render-as-benchmark-pm, -B">>] [B<L<--result-dir|/"--result-dir=s">>=I<L<dirname|Sah::Schema::dirname>>] [B<L<--result-filename|/"--result-filename=s">>=I<L<filename|Sah::Schema::filename>>] [B<L<--return-meta|/"--return-meta">>|B<L<--no-return-meta|/"--return-meta">>|B<L<--noreturn-meta|/"--return-meta">>] [B<L<--runner|/"--runner=s">>=I<str>] [B<L<--save-result|/"--save-result">>|B<L<--no-save-result|/"--save-result">>|B<L<--nosave-result|/"--save-result">>] [B<L<--scenario-file|/"--scenario-file=s, -f">>=I<str>|B<L<-f|/"--scenario-file=s, -f">>=I<str>] [B<L<--scenario-module|/"--scenario-module=s, -m">>=I<L<perl::modname|Sah::Schema::perl::modname>>|B<L<-m|/"--scenario-module=s, -m">>=I<L<perl::modname|Sah::Schema::perl::modname>>] [B<L<--scenario|/"--scenario=s">>=I<s>] [B<L<--scientific-notation|/"--scientific-notation">>] [(B<L<--sort|/"--sort=s@">>=I<str>)+] [B<L<--test|/"--test">>|B<L<--no-test|/"--test">>|B<L<--notest|/"--test">>] [B<L<--tidy|/"--tidy">>|B<L<--no-tidy|/"--tidy">>|B<L<--notidy|/"--tidy">>] [B<L<--with-args-size|/"--with-args-size">>|B<L<--without-args-size|/"--with-args-size">>] [B<L<--with-process-size|/"--with-process-size">>|B<L<--without-process-size|/"--with-process-size">>] [B<L<--with-result-size|/"--with-result-size">>|B<L<--without-result-size|/"--with-result-size">>]

=head2 Getting started and basic usage

To benchmark things, you write a I<scenario> file. Let's write a simple one that
benchmarks several trim functions. In F<scenario.pl>:

 #!/usr/bin/env perl

 use strict;
 use warnings;

 our $scenario = {
     participants => [
         {fcall_template=>'String::Trim::NonRegex::trim(<str>)'},
         {fcall_template=>'String::Trim::Regex::trim(<str>)'},
         {fcall_template=>'Text::Minify::XS::minify_ascii(<str>)'},
     ],
     datasets => [
         {name=>'empty'        , args=>{str=>''}},
         {name=>'len10ws1'     , args=>{str=>' '.('x' x   10).' '}},
         {name=>'len100ws1'    , args=>{str=>' '.('x' x  100).' '}},
     ],
 };

The scenario is declared in package variable C<$scenario>. In the above script,
we define three I<participants> (function/code that will be benchmarked) and
three I<datasets> (arguments to functions): an empty string, a 10-character
string surrounded by two spaces, and a 100-character string surrounded by two
spaces.

You'll notice that the participant is a string (a code template) instead of
coderef. Bencher can benchmark coderef, but by using a code template, we can
permute the code with different datasets into benchmark I<items> (each item is
the actual benchmark code that will be run). (For more terminologies and
concepts, see L<Bencher>, but the abovementioned terms are pretty much all the
important ones.)

Next, run the scenario (do the benchmarking):

 % bencher -f scenario.pl
 # Run on: perl v5.34.0, CPU Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz (2 cores), OS GNU/Linux Ubuntu version 20.04, OS kernel: Linux version 5.4.0-91-generic
 # Elapsed time: 0.29s
 +--------------------------------+-----------+-----------+-----------+-----------------------+-----------------------+---------+---------+
 | participant                    | dataset   | rate (/s) | time (Î¼s) | pct_faster_vs_slowest | pct_slower_vs_fastest |  errors | samples |
 +--------------------------------+-----------+-----------+-----------+-----------------------+-----------------------+---------+---------+
 | String::Trim::Regex::trim      | len100ws1 |    165330 |   6.04851 |                 0.00% |              4531.91% | 5.4e-12 |      20 |
 | String::Trim::Regex::trim      | len10ws1  |    862720 |   1.1591  |               421.82% |               787.65% | 5.7e-12 |      24 |
 | String::Trim::NonRegex::trim   | len100ws1 |   1048000 |   0.9539  |               534.07% |               630.51% | 1.7e-11 |      20 |
 | String::Trim::NonRegex::trim   | len10ws1  |   1060000 |   0.946   |               539.58% |               624.21% | 4.2e-10 |      20 |
 | String::Trim::NonRegex::trim   | empty     |   1580000 |   0.633   |               856.02% |               384.50% | 1.9e-10 |      24 |
 | Text::Minify::XS::minify_ascii | len100ws1 |   2737000 |   0.3653  |              1555.73% |               179.75% | 5.8e-12 |      20 |
 | Text::Minify::XS::minify_ascii | len10ws1  |   6640000 |   0.1506  |              3916.37% |                15.33% | 5.7e-12 |      20 |
 | String::Trim::Regex::trim      | empty     |   7100000 |   0.14    |              4180.07% |                 8.22% | 1.6e-10 |      20 |
 | Text::Minify::XS::minify_ascii | empty     |   7700000 |   0.13    |              4531.91% |                 0.00% | 2.6e-10 |      20 |
 +--------------------------------+-----------+-----------+-----------+-----------------------+-----------------------+---------+---------+

From the result, we see that L<String::Trim::Regex> is slower than
L<String::Trim::NonRegex>. But both are obliterated by L<Text::Minify::XS>,
which is no surprise since it is an XS module.

You'll notice that the benchmark runs pretty quickly because it uses
L<Benchmark::Dumb> by default, so each code only needs to be run a few times
instead of seconds-long like with L<Benchmark>.pm. You'll also notice the output
is in table form, showing the code from slowest to fastest. If you prefer the
Benchmark.pm matrix output, use the C<-B> option:

 % bencher -f scenario.pl -B
 # Run on: perl v5.34.0, CPU Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz (2 cores), OS GNU/Linux Ubuntu version 20.04, OS kernel: Linux version 5.4.0-91-generic
 # Elapsed time: 0.20s
                          Rate  STR:t len100ws1  STR:t len10ws1  STN:t len100ws1  STN:t len10ws1  STN:t empty  TMX:m_a len100ws1  TMX:m_a len10ws1  STR:t empty  TMX:m_a empty
  STR:t len100ws1     155160/s               --            -81%             -85%            -85%         -90%               -94%              -97%         -97%           -98%
  STR:t len10ws1      846000/s             446%              --             -19%            -19%         -46%               -68%              -87%         -88%           -89%
  STN:t len100ws1    1050000/s             576%             23%               --              0%         -33%               -61%              -84%         -85%           -87%
  STN:t len10ws1     1100000/s             578%             24%               0%              --         -33%               -61%              -84%         -85%           -87%
  STN:t empty        1600000/s             922%             87%              51%             50%           --               -41%              -76%         -78%           -80%
  TMX:m_a len100ws1  2703000/s            1642%            219%             157%            156%          70%                 --              -59%         -62%           -67%
  TMX:m_a len10ws1   6703000/s            4219%            690%             538%            536%         322%               147%                --          -8%           -19%
  STR:t empty        7320000/s            4604%            761%             594%            593%         359%               169%                8%           --           -11%
  TMX:m_a empty      8277060/s            5234%            876%             687%            686%         421%               206%               23%          13%             --

 Legends:
   STN:t empty: dataset=empty participant=String::Trim::NonRegex::trim
   STN:t len100ws1: dataset=len100ws1 participant=String::Trim::NonRegex::trim
   STN:t len10ws1: dataset=len10ws1 participant=String::Trim::NonRegex::trim
   STR:t empty: dataset=empty participant=String::Trim::Regex::trim
   STR:t len100ws1: dataset=len100ws1 participant=String::Trim::Regex::trim
   STR:t len10ws1: dataset=len10ws1 participant=String::Trim::Regex::trim
   TMX:m_a empty: dataset=empty participant=Text::Minify::XS::minify_ascii
   TMX:m_a len100ws1: dataset=len100ws1 participant=Text::Minify::XS::minify_ascii
   TMX:m_a len10ws1: dataset=len10ws1 participant=Text::Minify::XS::minify_ascii

To promote reusability, you can write scenarios in a Perl module, in the
C<Bencher::Scenario::*> namespace. In fact, the above scenario (with more
complete participants and datasets) is already on CPAN:
L<Bencher::Scenario::StringFunctions::Trim>. The examples below assume you have
installed it (with e.g. C<cpanm -n>).

=head2 Doing other things with scenario

=head3 Listing participants

Let's see which participants (functions, in this case) are included in the
scenario:

 % bencher -m StringFunctions::Trim --list-participants
 String::Trim::More::trim
 String::Trim::NonRegex::trim
 String::Trim::Regex::trim
 String::Util::trim
 Text::Minify::XS::minify

=head3 Listing datasets

What datasets are defined?

 % bencher -m StringFunctions/Trim --list-datasets
 empty
 len10ws1
 len100ws1
 len100ws10
 len100ws100
 len1000ws1
 len1000ws10
 len1000ws100
 len1000ws1000

=head3 Dumping the scenario

To see the scenario in more detail, let's dump it:

 % bencher -m StringFunctions::Trim --dump-parsed-scenario
 ...

=head3 Showing codes and results

Let's see how the functions will trim the data C<len100ws10>:

 % bencher -m StringFunctions/Trim --show-items-codes --include-dataset-name len10ws1
 #0 (participant=String::Trim::More::trim):
 package main; sub { String::Trim::More::trim(" xxxxxxxxxx ") }

 #1 (participant=String::Trim::NonRegex::trim):
 package main; sub { String::Trim::NonRegex::trim(" xxxxxxxxxx ") }

 #2 (participant=String::Trim::Regex::trim):
 package main; sub { String::Trim::Regex::trim(" xxxxxxxxxx ") }

 #3 (participant=String::Util::trim):
 package main; sub { String::Util::trim(" xxxxxxxxxx ") }

 #4 (participant=Text::Minify::XS::minify):
 package main; sub { Text::Minify::XS::minify(" xxxxxxxxxx ") }

Let's first check whether those functions do the job correctly:

 % bencher -m StringFunctions/Trim --show-items-results --include-dataset-name len10ws1
 #0 (participant=String::Trim::More::trim):
 "xxxxxxxxxx"

 #1 (participant=String::Trim::NonRegex::trim):
 "xxxxxxxxxx"

 #2 (participant=String::Trim::Regex::trim):
 "xxxxxxxxxx"

 #3 (participant=String::Util::trim):
 "xxxxxxxxxx"

 #4 (participant=Text::Minify::XS::minify):
 "xxxxxxxxxx"

=head3 Selecting only certain participants and datasets

Let's benchmark trimming short strings:

 % bencher -m StringFunctions/Trim --include-dataset-name len10ws1
 # Run on: perl v5.34.0, CPU Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz (2 cores), OS GNU/Linux Ubuntu version 20.04, OS kernel: Linux version 5.4.0-91-generic
 # Elapsed time: 0.13s
 +------------------------------+-----------+-----------+-----------------------+-----------------------+---------+---------+
 | participant                  | rate (/s) | time (ns) | pct_faster_vs_slowest | pct_slower_vs_fastest |  errors | samples |
 +------------------------------+-----------+-----------+-----------------------+-----------------------+---------+---------+
 | String::Util::trim           |    802126 |  1246.69  |                 0.00% |               651.62% |   0     |      20 |
 | String::Trim::Regex::trim    |    813180 |  1229.7   |                 1.38% |               641.40% | 1.1e-11 |      20 |
 | String::Trim::NonRegex::trim |    971000 |  1030     |                21.07% |               520.80% | 3.5e-10 |      28 |
 | String::Trim::More::trim     |   1250860 |   799.448 |                55.94% |               381.98% |   0     |      20 |
 | Text::Minify::XS::minify     |   6030000 |   166     |               651.62% |                 0.00% | 1.1e-10 |      20 |
 +------------------------------+-----------+-----------+-----------------------+-----------------------+---------+---------+

Let's see how L<Text::Minify::XS>C<::minify> perform on the different
datasets:

 % bencher -m StringFunctions/Trim --include-participant-name Text::Minify::XS::minify
 # Run on: perl v5.34.0, CPU Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz (2 cores), OS GNU/Linux Ubuntu version 20.04, OS kernel: Linux version 5.4.0-91-generic
 # Elapsed time: 0.18s
 +---------------+-----------+-----------+-----------------------+-----------------------+---------+---------+
 | dataset       | rate (/s) | time (Î¼s) | pct_faster_vs_slowest | pct_slower_vs_fastest |  errors | samples |
 +---------------+-----------+-----------+-----------------------+-----------------------+---------+---------+
 | len1000ws1000 |    194823 |   5.13285 |                 0.00% |              3974.38% |   0     |      20 |
 | len1000ws100  |    426100 |   2.347   |               118.72% |              1762.85% | 3.9e-11 |      27 |
 | len1000ws10   |    500000 |   2       |               154.42% |              1501.46% | 2.5e-09 |      20 |
 | len1000ws1    |    520000 |   1.9     |               164.59% |              1439.91% | 6.4e-09 |      22 |
 | len100ws100   |   1528000 |   0.6545  |               684.30% |               419.49% | 4.6e-11 |      20 |
 | len100ws10    |   2690000 |   0.372   |              1279.83% |               195.28% | 4.6e-11 |      27 |
 | len100ws1     |   2950000 |   0.339   |              1413.54% |               169.20% | 4.4e-11 |      20 |
 | len10ws1      |   6130000 |   0.163   |              3045.75% |                29.52% | 1.1e-10 |      20 |
 | empty         |   7940000 |   0.126   |              3974.38% |                 0.00% | 6.3e-11 |      30 |
 +---------------+-----------+-----------+-----------------------+-----------------------+---------+---------+

=head3 Showing result in raw form

The result data is actually a data structure. You can show it as JSON and save it somewhere:

 % bencher -m StringFunctions/Trim --include-participant-name Text::Minify::XS::minify --format json
 % bencher -m StringFunctions/Trim --include-participant-name Text::Minify::XS::minify --json         ;# same thing
 [
    200,
    "OK",
    [
      {
         "dataset" : "empty",
         "ds_tags" : "",
         "errors" : 1.99650629822291e-10,
         "notes" : "",
         "p_tags" : "",
         "participant" : "Text::Minify::XS::minify",
         "perl" : "perl",
         "rate" : 7666873.39865677,
         "samples" : 34,
         "seq" : 0,
         "time" : 1.30431265524118e-07
      },
      ...

=head3 Saving and redisplaying result

 % bencher -m StringFunctions/Trim --include-participant-name Text::Minify::XS::minify --json > /path/to/result1.json

Later when you want to display it again, you can use L<bencher-fmt>:

 % bencher-fmt < /path/to/result1.json

=head2 Available subcommands

List all scenario modules (Bencher::Scenario::*) installed locally on your
system:

 % bencher --list-scenario-modules
 % bencher -L

Run benchmark described by a scenario module:

 % bencher -m Example

Run benchmark described by a scenario file:

 % bencher -f scenario.pl

Add participants from the command-line instead of (or in addition to) those
specified in a scenario file/module:

 % bencher -p '{"fcall_template":"Bar::func(<arg>)"}'

Run module startup overhead benchmark instead of the normal benchmark:

 % bencher -m Example --module-startup

Show/dump scenario instead of running benchmark:

 % bencher -m Example --show-scenario

List participants instead of running benchmark:

 % bencher ... --list-participants
 % bencher ... --list-participants -l ;# show detail

List participating Perl modules (modules mentioned by all the participants):

 % bencher ... --list-participant-modules
 % bencher ... --list-participant-modules -l ;# show detail

List datasets instead of running benchmark:

 % bencher ... --list-datasets
 % bencher ... --list-datasets -l ;# show detail

List items instead of running benchmark:

 % bencher ... --list-items
 % bencher ... --list-items -l ;# show detail

Show items' codes instead of running benchmark:

 % bencher ... --show-items-codes

Show items' results instead of running benchmark:

 % bencher ... --show-items-results

Select (include/exclude) participants before running benchmark (you can also
select datasets/modules/items):

 % bencher ... --include-participant-pattern 'Tiny|Lite' --exclude-participant 'HTTP::Tiny'

=head2 Benchmarking against multiple perls

You need to install L<App::perlbrew> first and then install some perls. Also,
install at least L<Bencher::Backend> to each perl you want to run the benchmark
on.

To list available perls (same as C<perlbrew list>, but also shows whether a perl
has Bencher):

 % bencher --list-perls
 % bencher --list-perls -l

To run a scenario against all perls which have Bencher:

 % bencher -m ScenarioModule --multiperl ...

To run a scenario against some perls:

 % bencher -m ScenarioModule --multiperl --include-perl perl-5.20.3 --include-perl perl-5.22.1 ...

=head2 Benchmarking multiple versions of a module

For example, if version 0.02 of a module is installed and you want to benchmark
against version 0.01 (in C</my/home/lib>):

 % bencher -m ScenarioModule --multimodver Module::Name -I /my/home/lib ...

Note that C<Module::Name> must be among the modules that are being benchmarked
(according to the scenario).

=head1 DESCRIPTION

Bencher is a benchmark framework. You specify a I<scenario> (either in a
C<Bencher::Scenario::*> Perl module, or a Perl script, or over the command-line)
containing list of I<participants> and I<datasets>. Participants are codes or
commands to run, and datasets are arguments for the codes/commands. Bencher will
permute the participants and datasets into benchmark items, ready to run.

You can choose to include only some participants, datasets, or items. And there
are options to view your scenario's participants/datasets/items/mentioned
modules, run benchmark against multiple perls and module versions, and so on.
Bencher comes as a CLI script as well as Perl module. See the
L<Bencher::Backend> documentation for more information.

=head1 OPTIONS

C<*> marks required options.

=head2 Main options

=over

=item B<--detail>, B<-l>

Show detailed information for each result.

=item B<--env-hash>=I<s>

Add an environment hash.

See C<--env-hashes>.

=item B<--env-hashes-json>=I<s>

Add environment hashes (JSON-encoded).

See C<--env-hashes>.

=item B<--env-hashes>=I<s>

Add environment hashes.

=item B<--on-failure>=I<s>

What to do when there is a failure.

Valid values:

 ["die","skip"]

For a command participant, failure means non-zero exit code. For a Perl-code
participant, failure means Perl code dies or (if expected result is specified)
the result is not equal to the expected result.

The default is "die". When set to "skip", will first run the code of each item
before benchmarking and trap command failure/Perl exception and if that happens,
will "skip" the item.


=item B<--on-result-failure>=I<s>

What to do when there is a result failure.

Valid values:

 ["die","skip","warn"]

This is like C<on_failure> except that it specifically refer to the failure of
item's result not being equal to expected result.

There is an extra choice of C<warn> for this type of failure, which is to print a
warning to STDERR and continue.


=item B<--precision-limit>=I<s>

Set precision limit.

Instead of setting C<precision> which forces a single value, you can also set
this C<precision_limit> setting. If the precision in the scenario is higher
(=number is smaller) than this limit, then this limit is used. For example, if
the scenario specifies C<default_precision> 0.001 and C<precision_limit> is set to
0.005 then 0.005 is used.

This setting is useful on slower computers which might not be able to reach the
required precision before hitting maximum number of iterations.


=item B<--precision>=I<s>

Precision.

When benchmarking with the default L<Benchmark::Dumb> runner, will pass the
precision to it. The value is a fraction, e.g. 0.5 (for 5% precision), 0.01 (for
1% precision), and so on. Or, it can also be a positive integer to speciify
minimum number of iterations, usually need to be at least 6 to avoid the "Number
of initial runs is very small (<6)" warning. The default precision is 0, which
is to let Benchmark::Dumb determine the precision, which is good enough for most
cases.

When benchmarking with L<Benchmark> runner, will pass this value as the
C<$count> argument. Which can be a positive integer to mean the number of
iterations to do (e.g. 10, or 100). Or, can also be set to a negative number
(e.g. -0.5 or -2) to mean minimum number of CPU seconds. The default is -0.5.

When benchmarking with L<Benchmark::Dumb::SimpleTime>, this value is a
positive integer which means the number of iterations to perform.

When profiling, a number greater than 1 will set a repetition loop (e.g. C<<
for(1..100){ ... } >>).

This setting overrides C<default_precision> property in the scenario.


=item B<--runner>=I<s>

Runner module to use.

Valid values:

 ["Benchmark::Dumb","Benchmark","Benchmark::Dumb::SimpleTime"]

The default is C<Benchmark::Dumb> which should be good enough for most cases.

You can use C<Benchmark> runner (C<Benchmark.pm>) if you are accustomed to it and
want to see its output format.

You can use C<Benchmark::Dumb::SimpleTime> if your participant code runs for at
least a few to many seconds and you want to use very few iterations (like 1 or
2) because you don't want to wait for too long.


=item B<--save-result>

Whether to save benchmark result to file.

Will also be turned on automatically if C<BENCHER_RESULT_DIR> environment
variabl is defined.

When this is turned on, will save a JSON file after benchmark, containing the
result along with metadata. The directory of the JSON file will be determined
from the C<results_dir> option, while the filename from the C<results_filename>
option.


=item B<--test>

Whether to test participant code once first before benchmarking.

By default, participant code is run once first for testing (e.g. whether it dies
or return the correct result) before benchmarking. If your code runs for many
seconds, you might want to skip this test and set this to 0.


=item B<--with-args-size>

Also return memory usage of item's arguments.

Memory size is measured using L<Devel::Size>.


=item B<--with-process-size>

Also return process size information for each item.

This is done by dumping each item's code into a temporary file and running the
file with a new perl interpreter process and measuring the process size at the
end (so it does not need to load Bencher itself or the other items). Currently
only works on Linux because process size information is retrieved from
C</proc/PID/smaps>. Not all code can work, e.g. if the code tries to access a
closure or outside data or extra modules (modules not specified in the
participant or loaded by the code itself). Usually does not make sense to use
this on external command participants.


=item B<--with-result-size>

Also return memory usage of each item code's result (return value).

Memory size is measured using L<Devel::Size>.


=back

=head2 Action options

=over

=item B<--action>=I<s>, B<-a>

Default value:

 "bench"

Valid values:

 ["list-perls","list-scenario-modules","show-scenario","list-participants","list-participant-modules","list-datasets","list-items","show-items-codes","show-items-results","show-items-results-sizes","show-items-outputs","dump-items","dump-parsed-scenario","profile","bench"]

=item B<--code-startup>

Benchmark code startup overhead instead of normal benchmark.

=item B<--dump-items>

Shortcut for -a dump-items.

See C<--action>.

=item B<--dump-parsed-scenario>

Shortcut for -a dump-parsed-scenario.

See C<--action>.

=item B<--list-datasets>

Shortcut for -a list-datasets.

See C<--action>.

=item B<--list-items>

Shortcut for -a list-items.

See C<--action>.

=item B<--list-participant-modules>

Shortcut for -a list-participant-modules.

See C<--action>.

=item B<--list-participants>

Shortcut for -a list-participants.

See C<--action>.

=item B<--list-perls>

Shortcut for -a list-perls.

See C<--action>.

=item B<--list-permutes>

Shortcut for -a list-permutes.

See C<--action>.

=item B<--list-scenario-modules>

Shortcut for -a list-scenario-modules.

See C<--action>.

=item B<--module-startup>

Benchmark module startup overhead instead of normal benchmark.

=item B<--profile>

Shortcut for -a profile.

See C<--action>.

=item B<--show-items-codes>

Shortcut for -a show-items-codes.

See C<--action>.

=item B<--show-items-outputs>

Shortcut for -a show-items-outputs.

See C<--action>.

=item B<--show-items-results>

Shortcut for -a show-items-results.

See C<--action>.

=item B<--show-items-results-sizes>

Shortcut for -a show-items-results-sizes.

See C<--action>.

=item B<--show-scenario>

Shortcut for -a show-scenario.

See C<--action>.

=item B<-L>

Shortcut for -a list-scenario-modules.

See C<--action>.

=back

=head2 Configuration options

=over

=item B<--config-path>=I<s>, B<-c>

Set path to configuration file.

Can actually be specified multiple times to instruct application to read from
multiple configuration files (and merge them).


=item B<--config-profile>=I<s>, B<-P>

Set configuration profile to use.

A single configuration file can contain profiles, i.e. alternative sets of
values that can be selected. For example:

 [profile=dev]
 username=foo
 pass=beaver
 
 [profile=production]
 username=bar
 pass=honey

When you specify C<--config-profile=dev>, C<username> will be set to C<foo> and
C<password> to C<beaver>. When you specify C<--config-profile=production>,
C<username> will be set to C<bar> and C<password> to C<honey>.


=item B<--no-config>, B<-C>

Do not use any configuration file.

If you specify C<--no-config>, the application will not read any configuration
file.


=back

=head2 Dataset options

=over

=item B<--dataset>=I<s>

Add a dataset.

See C<--datasets>.

=item B<--datasets-json>=I<s>

Add datasets (JSON-encoded).

See C<--datasets>.

=item B<--datasets>=I<s>

Add datasets.

=item B<-d>=I<s>

Add a dataset.

See C<--datasets>.

=back

=head2 Debugging options

=over

=item B<--keep-tempdir>

Do not cleanup temporary directory when bencher ends.

=item B<--tidy>

Run perltidy over generated scripts.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

If you specify C<--no-env>, the application wil not read any environment
variable.


=back

=head2 Filtering options

=over

=item B<--exclude-dataset-name>=I<s@>

Add dataset (by name) to exclude list.

Can be specified multiple times.

=item B<--exclude-dataset-names-json>=I<s>

Exclude datasets whose name matches this (JSON-encoded).

See C<--exclude-dataset-name>.

=item B<--exclude-dataset-pattern>=I<s>

Exclude datasets matching this regex pattern.

=item B<--exclude-dataset-seq>=I<s@>

Add dataset (by sequence number) to exclude list.

Can be specified multiple times.

=item B<--exclude-dataset-seqs-json>=I<s>

Exclude datasets whose sequence number matches this (JSON-encoded).

See C<--exclude-dataset-seq>.

=item B<--exclude-dataset-tag>=I<s@>

Add a tag to dataset exclude tag list.

You can specify C<A & B> to exclude datasets that have I<both> tags A and B.


Can be specified multiple times.

=item B<--exclude-dataset-tags-json>=I<s>

Exclude datasets whose tag matches this (JSON-encoded).

See C<--exclude-dataset-tag>.

=item B<--exclude-dataset>=I<s@>

Add dataset (by name/seq) to exclude list.

Can be specified multiple times.

=item B<--exclude-datasets-json>=I<s>

Exclude datasets whose seq/name matches this (JSON-encoded).

See C<--exclude-dataset>.

=item B<--exclude-function-pattern>=I<s>

Exclude function(s) matching this regex pattern.

=item B<--exclude-function>=I<s@>

Add function to exclude list.

Can be specified multiple times.

=item B<--exclude-functions-json>=I<s>

Exclude functions specified in this list (JSON-encoded).

See C<--exclude-function>.

=item B<--exclude-item-name>=I<s@>

Add item (by name) to exclude list.

Can be specified multiple times.

=item B<--exclude-item-names-json>=I<s>

Exclude items whose name matches this (JSON-encoded).

See C<--exclude-item-name>.

=item B<--exclude-item-pattern>=I<s>

Exclude items matching this regex pattern.

=item B<--exclude-item-seq>=I<s@>

Add item (by sequence number) to exclude list.

Can be specified multiple times.

=item B<--exclude-item-seqs-json>=I<s>

Exclude items whose sequence number matches this (JSON-encoded).

See C<--exclude-item-seq>.

=item B<--exclude-item>=I<s@>

Add item (by name/seq) to exclude list.

Can be specified multiple times.

=item B<--exclude-items-json>=I<s>

Exclude items whose seq/name matches this (JSON-encoded).

See C<--exclude-item>.

=item B<--exclude-module-pattern>=I<s>

Exclude module(s) matching this regex pattern.

=item B<--exclude-module>=I<s@>

Add module to exclude list.

Can be specified multiple times.

=item B<--exclude-modules-json>=I<s>

Exclude modules specified in this list (JSON-encoded).

See C<--exclude-module>.

=item B<--exclude-participant-name>=I<s@>

Add participant (by name) to exclude list.

Can be specified multiple times.

=item B<--exclude-participant-names-json>=I<s>

Exclude participants whose name matches this (JSON-encoded).

See C<--exclude-participant-name>.

=item B<--exclude-participant-pattern>=I<s>

Exclude participants matching this regex pattern.

=item B<--exclude-participant-seq>=I<s@>

Add participant (by sequence number) to exclude list.

Can be specified multiple times.

=item B<--exclude-participant-seqs-json>=I<s>

Exclude participants whose sequence number matches this (JSON-encoded).

See C<--exclude-participant-seq>.

=item B<--exclude-participant-tag>=I<s@>

Add a tag to participants exclude tag list.

You can specify C<A & B> to exclude participants that have I<both> tags A and B.


Can be specified multiple times.

=item B<--exclude-participant-tags-json>=I<s>

Exclude participants whose tag matches this (JSON-encoded).

See C<--exclude-participant-tag>.

=item B<--exclude-participant>=I<s@>

Add participant (by name/seq) to exclude list.

Can be specified multiple times.

=item B<--exclude-participants-json>=I<s>

Exclude participants whose seq/name matches this (JSON-encoded).

See C<--exclude-participant>.

=item B<--exclude-perl>=I<s@>

Add specified perl to exclude list.

Can be specified multiple times.

=item B<--exclude-perls-json>=I<s>

Exclude some perls (JSON-encoded).

See C<--exclude-perl>.

=item B<--exclude-pp-modules>, B<--nopp>

Exclude PP (pure-Perl) modules.

=item B<--exclude-xs-modules>, B<--noxs>

Exclude XS modules.

=item B<--include-dataset-name>=I<s@>

Add dataset (by name) to include list.

Can be specified multiple times.

=item B<--include-dataset-names-json>=I<s>

Only include datasets whose name matches this (JSON-encoded).

See C<--include-dataset-name>.

=item B<--include-dataset-pattern>=I<s>

Only include datasets matching this regex pattern.

=item B<--include-dataset-seq>=I<s@>

Add dataset (by sequence number) to include list.

Can be specified multiple times.

=item B<--include-dataset-seqs-json>=I<s>

Only include datasets whose sequence number matches this (JSON-encoded).

See C<--include-dataset-seq>.

=item B<--include-dataset-tag>=I<s@>

Add a tag to dataset include tag list.

You can specify C<A & B> to include datasets that have I<both> tags A and B.


Can be specified multiple times.

=item B<--include-dataset-tags-json>=I<s>

Only include datasets whose tag matches this (JSON-encoded).

See C<--include-dataset-tag>.

=item B<--include-dataset>=I<s@>

Add dataset (by name/seq) to include list.

Can be specified multiple times.

=item B<--include-datasets-json>=I<s>

Only include datasets whose seq/name matches this (JSON-encoded).

See C<--include-dataset>.

=item B<--include-function-pattern>=I<s>

Only include functions matching this regex pattern.

=item B<--include-function>=I<s@>

Add function to include list.

Can be specified multiple times.

=item B<--include-functions-json>=I<s>

Only include functions specified in this list (JSON-encoded).

See C<--include-function>.

=item B<--include-item-name>=I<s@>

Add item (by name) to include list.

Can be specified multiple times.

=item B<--include-item-names-json>=I<s>

Only include items whose name matches this (JSON-encoded).

See C<--include-item-name>.

=item B<--include-item-pattern>=I<s>

Only include items matching this regex pattern.

=item B<--include-item-seq>=I<s@>

Add item (by sequence number) to include list.

Can be specified multiple times.

=item B<--include-item-seqs-json>=I<s>

Only include items whose sequence number matches this (JSON-encoded).

See C<--include-item-seq>.

=item B<--include-item>=I<s@>

Add item (by name/seq) to include list.

Can be specified multiple times.

=item B<--include-items-json>=I<s>

Only include items whose seq/name matches this (JSON-encoded).

See C<--include-item>.

=item B<--include-module-pattern>=I<s>

Only include modules matching this regex pattern.

=item B<--include-module>=I<s@>

Add module to include list.

Can be specified multiple times.

=item B<--include-modules-json>=I<s>

Only include modules specified in this list (JSON-encoded).

See C<--include-module>.

=item B<--include-participant-name>=I<s@>

Add participant (by name) to include list.

Can be specified multiple times.

=item B<--include-participant-names-json>=I<s>

Only include participants whose name matches this (JSON-encoded).

See C<--include-participant-name>.

=item B<--include-participant-pattern>=I<s>

Only include participants matching this regex pattern.

=item B<--include-participant-seq>=I<s@>

Add participant (by sequence number) to include list.

Can be specified multiple times.

=item B<--include-participant-seqs-json>=I<s>

Only include participants whose sequence number matches this (JSON-encoded).

See C<--include-participant-seq>.

=item B<--include-participant-tag>=I<s@>

Add a tag to participants include tag list.

You can specify C<A & B> to include participants that have I<both> tags A and B.


Can be specified multiple times.

=item B<--include-participant-tags-json>=I<s>

Only include participants whose tag matches this (JSON-encoded).

See C<--include-participant-tag>.

=item B<--include-participant>=I<s@>

Add participant (by name/seq) to include list.

Can be specified multiple times.

=item B<--include-participants-json>=I<s>

Only include participants whose seq/name matches this (JSON-encoded).

See C<--include-participant>.

=item B<--include-perl>=I<s@>

Add specified perl to include list.

Can be specified multiple times.

=item B<--include-perls-json>=I<s>

Only include some perls (JSON-encoded).

See C<--include-perl>.

=back

=head2 Logging options

=over

=item B<--debug>

Shortcut for --log-level=debug.

=item B<--log-level>=I<s>

Set log level.

By default, these log levels are available (in order of increasing level of
importance, from least important to most): C<trace>, C<debug>, C<info>,
C<warn>/C<warning>, C<error>, C<fatal>. By default, the level is usually set to
C<warn>, which means that log statements with level C<info> and less important
levels will not be shown. To increase verbosity, choose C<info>, C<debug>, or
C<trace>.

For more details on log level and logging, as well as how new logging levels can
be defined or existing ones modified, see L<Log::ger>.


=item B<--quiet>

Shortcut for --log-level=error.

=item B<--trace>

Shortcut for --log-level=trace.

=item B<--verbose>

Shortcut for --log-level=info.

=back

=head2 Multi module version options

=over

=item B<--include-path-json>=I<s>, B<-I>

Additional module search paths (JSON-encoded).

See C<--include-path>.

=item B<--include-path>=I<s@>

Add path to module search path.

Used when searching for scenario module, or when in multimodver mode.


Can be specified multiple times.

=item B<--multimodver>=I<s>

Benchmark multiple module versions.

If set to a module name, will search for all (instead of the first occurrence)
of the module in C<@INC>. Then will generate items for each version.

Currently only one module can be multi version.


=back

=head2 Multiperl options

=over

=item B<--exclude-perl>=I<s@>

Add specified perl to exclude list.

Can be specified multiple times.

=item B<--exclude-perls-json>=I<s>

Exclude some perls (JSON-encoded).

See C<--exclude-perl>.

=item B<--include-perl>=I<s@>

Add specified perl to include list.

Can be specified multiple times.

=item B<--include-perls-json>=I<s>

Only include some perls (JSON-encoded).

See C<--include-perl>.

=item B<--multiperl>

Benchmark against multiple perls.

Requires L<App::perlbrew> to be installed. Will use installed perls from the
perlbrew installation. Each installed perl must have L<Bencher::Backend>
module installed (in addition to having all modules that you want to benchmark,
obviously).

By default, only perls having Bencher::Backend will be included. Use
C<--include-perl> and C<--exclude-perl> to include and exclude which perls you
want.

Also note that due to the way this is currently implemented, benchmark code that
contains closures (references to variables outside the code) won't work.


=back

=head2 Output options

=over

=item B<--capture-stderr>

Trap output to stderr.

=item B<--capture-stdout>

Trap output to stdout.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

Output can be displayed in multiple formats, and a suitable default format is
chosen depending on the application and/or whether output destination is
interactive terminal (i.e. whether output is piped). This option specifically
chooses an output format.


=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

 [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
C<--naked-res> so you just get:

 [1,2,3]


=item B<--note>=I<s>

Put additional note in the result.

=item B<--page-result>

Filter output through a pager.

This option will pipe the output to a specified pager program. If pager program
is not specified, a suitable default e.g. C<less> is chosen.


=item B<--raw>

Show "raw" data.

When action=show-items-result, will print result as-is instead of dumping as
Perl.


=item B<--render-as-benchmark-pm>, B<-B>

Format result like Benchmark.pm.

=item B<--result-dir>=I<s>

Directory to use when saving benchmark result.

Default is from C<BENCHER_RESULT_DIR> environment variable, or the home
directory.


=item B<--result-filename>=I<s>

Filename to use when saving benchmark result.

Default is:

 <NAME>.<yyyy-dd-dd-"T"HH-MM-SS>.json

or, when running in module startup mode:

 <NAME>.module_startup.<yyyy-dd-dd-"T"HH-MM-SS>.json

or, when running in code startup mode:

 <NAME>.code_startup.<yyyy-dd-dd-"T"HH-MM-SS>.json

where <NAME> is scenario module name, or C<NO_MODULE> if scenario is not from a
module. The C<::> (double colon in the module name will be replaced with C<->
(dash).


=item B<--return-meta>

Whether to return extra metadata.

When set to true, will return extra metadata such as platform information, CPU
information, system load before & after the benchmark, system time, and so on.
This is put in result metadata under C<func.*> keys.

The default is to true (return extra metadata) unless when run as CLI and format
is text (where the extra metadata is not shown).


=item B<--scientific-notation>

(No description)


=item B<--sort>=I<s@>

Default value:

 ["-time"]

Can be specified multiple times.

=item B<--sorts-json>=I<s>

See C<--sort>.

=item B<--view-result>

View output using a viewer.

This option will first save the output to a temporary file, then open a viewer
program to view the temporary file. If a viewer program is not chosen, a
suitable default, e.g. the browser, is chosen.


=back

=head2 Participant options

=over

=item B<--cpanmodules-module>=I<s>

Load a scenario from an Acme::CPANModules:: Perl module.

An L<Acme::CPANModules> module can also contain benchmarking information, e.g.
L<Acme::CPANModules::TextTable>.


=item B<--participant>=I<s>

Add a participant.

See C<--participants>.

=item B<--participants-json>=I<s>

Add participants (JSON-encoded).

See C<--participants>.

=item B<--participants>=I<s>

Add participants.

=item B<--scenario-file>=I<s>, B<-f>

Load a scenario from a Perl file.

Perl file will be do()'ed and the last expression should be a hash containing
the scenario specification.


=item B<--scenario-json>=I<s>

Load a scenario from data structure (JSON-encoded).

See C<--scenario>.

=item B<--scenario-module>=I<s>, B<-m>

Load a scenario from a Bencher::Scenario:: Perl module.

Will try to load module C<< Bencher::Scenario::E<lt>NAMEE<gt> >> and expect to find a package
variable in the module called C<$scenario> which should be a hashref containing
the scenario specification.


=item B<--scenario>=I<s>

Load a scenario from data structure.

=item B<-p>=I<s>

Add a participant.

See C<--participants>.

=back

=head2 Scenario options

=over

=item B<--cpanmodules-module>=I<s>

Load a scenario from an Acme::CPANModules:: Perl module.

An L<Acme::CPANModules> module can also contain benchmarking information, e.g.
L<Acme::CPANModules::TextTable>.


=item B<--scenario-file>=I<s>, B<-f>

Load a scenario from a Perl file.

Perl file will be do()'ed and the last expression should be a hash containing
the scenario specification.


=item B<--scenario-json>=I<s>

Load a scenario from data structure (JSON-encoded).

See C<--scenario>.

=item B<--scenario-module>=I<s>, B<-m>

Load a scenario from a Bencher::Scenario:: Perl module.

Will try to load module C<< Bencher::Scenario::E<lt>NAMEE<gt> >> and expect to find a package
variable in the module called C<$scenario> which should be a hashref containing
the scenario specification.


=item B<--scenario>=I<s>

Load a scenario from data structure.

=back

=head2 Other options

=over

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C bencher bencher

in your bash startup (e.g. F<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install modules using L<cpanm-shcompgen>
which can activate shell completion for scripts immediately.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete bencher 'p/*/`bencher`/'

in your tcsh startup (e.g. F<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install L<shcompgen> (see above).

=head2 other shells

For fish and zsh, install L<shcompgen> as described above.

=head1 CONFIGURATION FILE

This script can read configuration files. Configuration files are in the format of L<IOD>, which is basically INI with some extra features.

By default, these names are searched for configuration filenames (can be changed using C<--config-path>): F</home/u1/.config/bencher.conf>, F</home/u1/bencher.conf>, or F</etc/bencher.conf>.

All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]> or C<[SOMESECTION profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

You can also put configuration for multiple programs inside a single file, and use filter C<program=NAME> in section names, e.g. C<[program=NAME ...]> or C<[SOMESECTION program=NAME]>. The section will then only be used when the reading program matches.

You can also filter a section by environment variable using the filter C<env=CONDITION> in section names. For example if you only want a section to be read if a certain environment variable is true: C<[env=SOMEVAR ...]> or C<[SOMESECTION env=SOMEVAR ...]>. If you only want a section to be read when the value of an environment variable equals some string: C<[env=HOSTNAME=blink ...]> or C<[SOMESECTION env=HOSTNAME=blink ...]>. If you only want a section to be read when the value of an environment variable does not equal some string: C<[env=HOSTNAME!=blink ...]> or C<[SOMESECTION env=HOSTNAME!=blink ...]>. If you only want a section to be read when the value of an environment variable includes some string: C<[env=HOSTNAME*=server ...]> or C<[SOMESECTION env=HOSTNAME*=server ...]>. If you only want a section to be read when the value of an environment variable does not include some string: C<[env=HOSTNAME!*=server ...]> or C<[SOMESECTION env=HOSTNAME!*=server ...]>. Note that currently due to simplistic parsing, there must not be any whitespace in the value being compared because it marks the beginning of a new section filter or section name.

To load and configure plugins, you can use either the C<-plugins> parameter (e.g. C<< -plugins=DumpArgs >> or C<< -plugins=DumpArgs@before_validate_args >>), or use the C<[plugin=NAME ...]> sections, for example:

 [plugin=DumpArgs]
 -event=before_validate_args
 -prio=99
 
 [plugin=Foo]
 -event=after_validate_args
 arg1=val1
 arg2=val2

 

which is equivalent to setting C<< -plugins=-DumpArgs@before_validate_args@99,-Foo@after_validate_args,arg1,val1,arg2,val2 >>.

List of available configuration parameters:

 action (see --action)
 capture_stderr (see --capture-stderr)
 capture_stdout (see --capture-stdout)
 code_startup (see --code-startup)
 cpanmodules_module (see --cpanmodules-module)
 datasets (see --datasets)
 detail (see --detail)
 env_hashes (see --env-hashes)
 exclude_dataset_names (see --exclude-dataset-name)
 exclude_dataset_pattern (see --exclude-dataset-pattern)
 exclude_dataset_seqs (see --exclude-dataset-seq)
 exclude_dataset_tags (see --exclude-dataset-tag)
 exclude_datasets (see --exclude-dataset)
 exclude_function_pattern (see --exclude-function-pattern)
 exclude_functions (see --exclude-function)
 exclude_item_names (see --exclude-item-name)
 exclude_item_pattern (see --exclude-item-pattern)
 exclude_item_seqs (see --exclude-item-seq)
 exclude_items (see --exclude-item)
 exclude_module_pattern (see --exclude-module-pattern)
 exclude_modules (see --exclude-module)
 exclude_participant_names (see --exclude-participant-name)
 exclude_participant_pattern (see --exclude-participant-pattern)
 exclude_participant_seqs (see --exclude-participant-seq)
 exclude_participant_tags (see --exclude-participant-tag)
 exclude_participants (see --exclude-participant)
 exclude_perls (see --exclude-perl)
 exclude_pp_modules (see --exclude-pp-modules)
 exclude_xs_modules (see --exclude-xs-modules)
 format (see --format)
 include_dataset_names (see --include-dataset-name)
 include_dataset_pattern (see --include-dataset-pattern)
 include_dataset_seqs (see --include-dataset-seq)
 include_dataset_tags (see --include-dataset-tag)
 include_datasets (see --include-dataset)
 include_function_pattern (see --include-function-pattern)
 include_functions (see --include-function)
 include_item_names (see --include-item-name)
 include_item_pattern (see --include-item-pattern)
 include_item_seqs (see --include-item-seq)
 include_items (see --include-item)
 include_module_pattern (see --include-module-pattern)
 include_modules (see --include-module)
 include_participant_names (see --include-participant-name)
 include_participant_pattern (see --include-participant-pattern)
 include_participant_seqs (see --include-participant-seq)
 include_participant_tags (see --include-participant-tag)
 include_participants (see --include-participant)
 include_path (see --include-path)
 include_perls (see --include-perl)
 keep_tempdir (see --keep-tempdir)
 log_level (see --log-level)
 module_startup (see --module-startup)
 multimodver (see --multimodver)
 multiperl (see --multiperl)
 naked_res (see --naked-res)
 note (see --note)
 on_failure (see --on-failure)
 on_result_failure (see --on-result-failure)
 participants (see --participants)
 precision (see --precision)
 precision_limit (see --precision-limit)
 raw (see --raw)
 render_as_benchmark_pm (see --render-as-benchmark-pm)
 result_dir (see --result-dir)
 result_filename (see --result-filename)
 return_meta (see --return-meta)
 runner (see --runner)
 save_result (see --save-result)
 scenario (see --scenario)
 scenario_file (see --scenario-file)
 scenario_module (see --scenario-module)
 scientific_notation (see --scientific-notation)
 sorts (see --sort)
 test (see --test)
 tidy (see --tidy)
 with_args_size (see --with-args-size)
 with_process_size (see --with-process-size)
 with_result_size (see --with-result-size)

=head1 ENVIRONMENT

=head2 BENCHER_OPT

String. Specify additional command-line options.

=head2 BENCHER_RESULT_DIR => str

Set default for C<--results-dir>.

=head1 FILES

=head2 /home/u1/.config/bencher.conf

=head2 /home/u1/bencher.conf

=head2 /etc/bencher.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/Bencher>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-Bencher>.

=head1 SEE ALSO

L<bencher-tiny> if you want a simpler CLI with no non-core dependencies.

L<Bencher>

L<Bencher::Backend>

C<Bencher::Manual::*>

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=Bencher>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut
