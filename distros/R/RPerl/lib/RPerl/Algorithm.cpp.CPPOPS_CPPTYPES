// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm_cpp
#define __CPP__INCLUDED__RPerl__Algorithm_cpp 0.010_000

// [[[ INCLUDES ]]]
#include "RPerl/Algorithm.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void RPerl__Algorithm::inherited__Algorithm(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Algorithm->inherited__Algorithm(), have ::class($self) = " + classname(this) + (const string) " and $person = " + person + (const string) ", FNORD" + (const string) "\n");
}

string RPerl__Algorithm::inherited__Algorithm_foo_get() {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Algorithm->inherited__Algorithm_foo_get(), have ::class($self) = " + classname(this) + (const string) ", FNORD" + (const string) "\n");
    return this->foo;
}

void RPerl__Algorithm::inherited__Algorithm_foo_set(string foo_new) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Algorithm->inherited__Algorithm_foo_set(), have ::class($self) = " + classname(this) + (const string) " and $foo_new = " + foo_new + (const string) ", FNORD" + (const string) "\n");
    this->foo = foo_new;
}

string RPerl__Algorithm__uninherited__Algorithm(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Algorithm::uninherited__Algorithm(), received $person = " + person + (const string) ", MYSTIC" + (const string) "\n");
    return (const string) "Algorithm::uninherited__Algorithm() RULES! CPPOPS_CPPTYPES";
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
