// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_cpp
#define __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_cpp 0.010_000

// [[[ INCLUDES ]]]
#include "RPerl/Algorithm/Sort/Bubble.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void RPerl__Algorithm__Sort__Bubble::integer_sort() {
    this->integer_data = RPerl__Algorithm__Sort__Bubble__integer_bubblesort(this->integer_data);
    return;
}

void RPerl__Algorithm__Sort__Bubble::number_sort() {
    this->number_data = RPerl__Algorithm__Sort__Bubble__number_bubblesort(this->number_data);
    return;
}

void RPerl__Algorithm__Sort__Bubble::inherited_Bubble(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Bubble->inherited_Bubble(), have ::class($self) = " + classname(this) + (const string) " and $person = " + person + (const string) ", FRIED" + (const string) "\n");
    return;
}

string RPerl__Algorithm__Sort__Bubble::inherited_Bubble_foo_get() {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Bubble->inherited_Bubble_foo_get(), have ::class($self) = " + classname(this) + (const string) ", FRIED" + (const string) "\n");
    return this->foo;
}

void RPerl__Algorithm__Sort__Bubble::inherited_Bubble_foo_set(string foo_new) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Bubble->inherited_Bubble_foo_set(), have ::class($self) = " + classname(this) + (const string) " and $foo_new = " + foo_new + (const string) ", FRIED" + (const string) "\n");
    this->foo = foo_new;
    return;
}

void RPerl__Algorithm__Sort__Bubble::inherited(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Bubble->inherited(), have ::class($self) = " + classname(this) + (const string) " and $person = " + person + (const string) ", ILLOGICAL" + (const string) "\n");
    return;
}

integer_arrayref RPerl__Algorithm__Sort__Bubble__integer_bubblesort(integer_arrayref integer_data) {
    integer i;
    integer is_sorted = 0;
    integer integer_data_length = integer_data.size();
    integer integer_data_i;
    integer integer_data_i_plus_1;
    while ( not is_sorted ) {
        is_sorted = 1;
        for ( i = 0; i < (integer_data_length - 1); i++ ) {
            integer_data_i = integer_data[i];
            integer_data_i_plus_1 = integer_data[(i + 1)];
            if ( integer_data_i > integer_data_i_plus_1 ) {
                is_sorted = 0;
                integer_data[i] = integer_data_i_plus_1;
                integer_data[(i + 1)] = integer_data_i;
            }
        }
    }
    return integer_data;
}

number_arrayref RPerl__Algorithm__Sort__Bubble__number_bubblesort(number_arrayref number_data) {
    integer i;
    integer is_sorted = 0;
    integer number_data_length = number_data.size();
    number number_data_i;
    number number_data_i_plus_1;
    while ( not is_sorted ) {
        is_sorted = 1;
        for ( i = 0; i < (number_data_length - 1); i++ ) {
            number_data_i = number_data[i];
            number_data_i_plus_1 = number_data[(i + 1)];
            if ( number_data_i > number_data_i_plus_1 ) {
                is_sorted = 0;
                number_data[i] = number_data_i_plus_1;
                number_data[(i + 1)] = number_data_i;
            }
        }
    }
    return number_data;
}

string RPerl__Algorithm__Sort__Bubble__uninherited_Bubble(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Bubble::uninherited_Bubble(), received $person = " + person + (const string) ", MITOCHONDRIAL" + (const string) "\n");
    return (const string) "Bubble::uninherited_Bubble() RULES! CPPOPS_CPPTYPES";
}

string RPerl__Algorithm__Sort__Bubble__uninherited(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Bubble::uninherited(), received $person = " + person + (const string) ", TETRAHEDRON" + (const string) "\n");
    return (const string) "Bubble::uninherited() ROCKS! CPPOPS_CPPTYPES";
}

string RPerl__Algorithm__Sort__Bubble__integer_bubblesort_typetest0(integer_arrayref lucky_integers) {
    return (integer_arrayref_to_string(RPerl__Algorithm__Sort__Bubble__integer_bubblesort(lucky_integers)) + (const string) "CPPOPS_CPPTYPES");
}

string RPerl__Algorithm__Sort__Bubble__number_bubblesort_typetest0(number_arrayref lucky_numbers) {
    return (number_arrayref_to_string(RPerl__Algorithm__Sort__Bubble__number_bubblesort(lucky_numbers)) + (const string) "CPPOPS_CPPTYPES");
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
