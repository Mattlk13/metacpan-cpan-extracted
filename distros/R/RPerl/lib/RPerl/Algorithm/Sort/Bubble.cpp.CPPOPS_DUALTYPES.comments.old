// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_cpp
#define __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_cpp 0.005_100

// [[[ INCLUDES ]]]
#include <RPerl/Algorithm/Sort/Bubble.h>  // -> HelperFunctions.cpp && Sort.cpp && NOT Inefficient.cpp  // NEED UPGRADE, CORRELATION #rp023: Inline::CPP support for multiple inheritance

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

// call out to sort integer_data, return nothing
void RPerl__Algorithm__Sort__Bubble::integer_sort() {
    this->integer_data = integer_bubblesort(this->integer_data);
    SvREFCNT_dec(this->integer_data);
}

void RPerl__Algorithm__Sort__Bubble::number_sort() {
    this->number_data = number_bubblesort(this->number_data);
    SvREFCNT_dec(this->number_data);
}

// OO INHERITANCE TESTING

void RPerl__Algorithm__Sort__Bubble::inherited__Bubble(SV* person) {
    cout << "in CPPOPS_PERLTYPES Bubble->inherited__Bubble(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $person = " << SvPV_nolen(person) << ", FRIED\n";
}

void RPerl__Algorithm__Sort__Bubble::inherited(SV* person) {
    cout << "in CPPOPS_PERLTYPES Bubble->inherited(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $person = " << SvPV_nolen(person) << ", ILLOGICAL\n";
}

// original algorithm: comparison-based and stable [O(n**2) average time, O(1) worst-case extra space]
// sort data, return sorted data
SV* integer_bubblesort(SV* integer_data) {  // DEV NOTE: properly creates local-to-function SV* integer_data here, does not get confused with this->integer_data object property, even though they share a name
    RPerl_object_property_init(integer_data); // NEED ANSWER: why do we need to do property init?
    SvREFCNT_inc(integer_data);

    integer_arrayref_CHECKTRACE(integer_data, "integer_data", "integer_bubblesort()");

    integer is_sorted = 0;
    AV* integer_data_av = (AV*) SvRV(integer_data);  // OPTIMIZE, LONG FORM: integer_data dereferenced to integer_data_av more than once, declare integer_data_av and re-use, MUST REFRESH integer_data_av for every assignment directly to integer_data (none in this algorithm)
    integer integer_data_length = av_len(integer_data_av) + 1;  // OPTIMIZE, LONG FORM: use integer_data_av
    SV* integer_data_i = newSV(0);  // OPTIMIZE, LONG FORM: integer_data element i accessed more than once, declare integer_data_i and re-use;  all new SV*'s given initial undef newSV(0) value to avoid fprintf(stderr, ) errors during debugging
    SV* integer_data_i_plus_1 = newSV(0);  // OPTIMIZE, LONG FORM

    SV* swap = newSV(0);

    // iterate through the length-n list up to n times (n * n == n**2), larger elements "bubble to the top" (end) of the list
    while ( not is_sorted ) {
        is_sorted = 1;
        for ( integer i = 0; i <= (integer_data_length - 2); i++ ) {
            // compare elements and swap if out-of-order, this is the core sort comparison
            integer_data_i = AV_ELEMENT(integer_data_av, i);  // OPTIMIZE, LONG FORM: use integer_data_i and integer_data_av
            integer_data_i_plus_1 = AV_ELEMENT(integer_data_av, (i + 1));  // OPTIMIZE, LONG FORM: use integer_data_i_plus_1 and integer_data_av

            // DEV NOTE: using C++ numeric greater-than comparator operator as direct replacement for equivalent Perl builtin operator
            if ( SvIV(integer_data_i) > SvIV(integer_data_i_plus_1) ) {  // OPTIMIZE, LONG FORM: use integer_data_i and integer_data_i_plus_1
                is_sorted = 0;
                integer_data_i = AV_ELEMENT(integer_data_av, i);  // OPTIMIZE, LONG FORM: use integer_data_i and integer_data_av
                swap = integer_data_i;  // OPTIMIZE, LONG FORM: use integer_data_i
                integer_data_i_plus_1 = AV_ELEMENT(integer_data_av, (i + 1));  // OPTIMIZE, LONG FORM: use integer_data_i_plus_1 and integer_data_av
                av_store(integer_data_av, i, SvREFCNT_inc(integer_data_i_plus_1));  // OPTIMIZE, LONG FORM: use integer_data_av and integer_data_i_plus_1
                av_store(integer_data_av, (i + 1), SvREFCNT_inc(swap));  // OPTIMIZE, LONG FORM: use integer_data_av
            }
        }
    }

    return integer_data;
}

SV* number_bubblesort(SV* number_data) {
    RPerl_object_property_init(number_data);
    SvREFCNT_inc(number_data);
//  fprintf(stderr, "in CPPOPS_PERLTYPES number_bubblesort(), top of subroutine...\n");

//  number_arrayref_CHECK(number_data);
    number_arrayref_CHECKTRACE(number_data, "number_data", "number_bubblesort()");

    integer is_sorted = 0;
    AV* number_data_av = (AV*) SvRV(number_data);
    integer number_data_length = av_len(number_data_av) + 1;
    SV* number_data_i = newSV(0);
    SV* number_data_i_plus_1 = newSV(0);

    SV* swap = newSV(0);
    while ( not is_sorted ) {
        is_sorted = 1;
        for ( integer i = 0; i <= (number_data_length - 2); i++ ) {
            number_data_i = AV_ELEMENT(number_data_av, i);
            number_data_i_plus_1 = AV_ELEMENT(number_data_av, (i + 1));

            if ( SvNV(number_data_i) > SvNV(number_data_i_plus_1) ) {
                is_sorted = 0;
                number_data_i = AV_ELEMENT(number_data_av, i);
                swap = number_data_i;
                number_data_i_plus_1 = AV_ELEMENT(number_data_av, (i + 1));
                av_store(number_data_av, i, SvREFCNT_inc(number_data_i_plus_1));
                av_store(number_data_av, (i + 1), SvREFCNT_inc(swap));
            }
        }
    }
    return number_data;
}

// OO INHERITANCE TESTING, CONTINUED


SV* uninherited__Bubble(SV* person) {
    cout << "in CPPOPS_PERLTYPES Bubble::uninherited__Bubble(), received person = " << SvPV_nolen(person) << ", MITOCHONDRIAL\n";
    return (newSVpv("Bubble::uninherited__Bubble() RULES! CPPOPS_PERLTYPES", 0));
}

// DEV NOTE, CORRELATION #rp004: inheritance testing, manually enable uninherited() in exactly one of Algorithm.*, Inefficient.*, Sort.*, or Bubble.*
SV* uninherited(SV* person) {
    cout << "in CPPOPS_PERLTYPES Bubble::uninherited(), received person = " << SvPV_nolen(person) << ", TETRAHEDRON\n";
    return (newSVpv("Bubble::uninherited() ROCKS! CPPOPS_PERLTYPES", 0));
}

// TYPE TESTING

SV* integer_bubblesort__typetest0(SV* lucky_integers) {
    integer_arrayref_CHECKTRACE(lucky_integers, "lucky_integers", "integer_bubblesort__typetest0()");
    return (newSVpvf("%s%s", SvPV_nolen(integer_arrayref_to_string(integer_bubblesort(lucky_integers))), "CPPOPS_PERLTYPES"));
}

SV* number_bubblesort__typetest0(SV* lucky_numbers) {
    number_arrayref_CHECKTRACE(lucky_numbers, "lucky_numbers", "number_bubblesort__typetest0()");
    return (newSVpvf("%s%s", SvPV_nolen(number_arrayref_to_string(number_bubblesort(lucky_numbers))), "CPPOPS_PERLTYPES"));
}

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

// call out to sort integer_data, return nothing
void RPerl__Algorithm__Sort__Bubble::integer_sort() {
    this->integer_data = integer_bubblesort(this->integer_data);
}

void RPerl__Algorithm__Sort__Bubble::number_sort() {
    this->number_data = number_bubblesort(this->number_data);
}

// OO INHERITANCE TESTING

void RPerl__Algorithm__Sort__Bubble::inherited__Bubble(string person) {
    RPerl::diag((const string) "in CPPOPS_CPPTYPES Bubble->inherited__Bubble(), have ::class($self) = " + classname(this) + (const string) " and $person = " + person + (const string) ", FRIED" + (const string) "\n");
}

void RPerl__Algorithm__Sort__Bubble::inherited(string person) {
    RPerl::diag((const string) "in CPPOPS_CPPTYPES Bubble->inherited(), have ::class($self) = " + classname(this) + (const string) " and $person = " + person + (const string) ", ILLOGICAL" + (const string) "\n");
}

// original algorithm: comparison-based and stable [O(n**2) average time, O(1) worst-case extra space]
// sort integer_data, return sorted integer_data
integer_arrayref integer_bubblesort(integer_arrayref integer_data) {  // DEV NOTE: properly creates local-to-function integer_arrayref integer_data here, does not get confused with this->integer_data object property, even though they share a name
    integer is_sorted = 0;
    integer integer_data_length = integer_data.size();

    integer integer_data_i;  // OPTIMIZE, LONG FORM: integer_data element i accessed more than once, declare integer_data_i and re-use
    integer integer_data_i_plus_1;  // OPTIMIZE, LONG FORM
    integer swap;

    // iterate through the length-n list up to n times (n * n == n**2), larger elements "bubble to the top" (end) of the list
    while ( not is_sorted ) {
        is_sorted = 1;
        for ( integer i = 0; i <= (integer_data_length - 2); i++ ) {
            // compare elements and swap if out-of-order, this is the core sort comparison
            integer_data_i = integer_data[i];  // OPTIMIZE, LONG FORM: use integer_data_i
            integer_data_i_plus_1 = integer_data[(i + 1)];  // OPTIMIZE, LONG FORM: use integer_data_i_plus_1

            // DEV NOTE: integer_data is of type integer_arrayref, assuming numeric values for integer_data elements and using C++ numeric comparator
            if ( integer_data_i > integer_data_i_plus_1 ) {  // OPTIMIZE, LONG FORM: use integer_data_i and integer_data_i_plus_1
                is_sorted = 0;
                swap = integer_data_i;  // OPTIMIZE, LONG FORM: use integer_data_i
                integer_data[i] = integer_data_i_plus_1;  // OPTIMIZE, LONG FORM: use integer_data_i_plus_1
                integer_data[(i + 1)] = swap;
            }
        }
    }

    // integer_data is now sorted via top-level nested iteration [O(n**2) total time, O(1) total extra space]
    return integer_data;
}

number_arrayref number_bubblesort(number_arrayref number_data) {
    integer is_sorted = 0;
    integer number_data_length = number_data.size();
    number number_data_i;
    number number_data_i_plus_1;
    number swap;
    while ( not is_sorted ) {
        is_sorted = 1;
        for ( integer i = 0; i <= (number_data_length - 2); i++ ) {
            number_data_i = number_data[i];
            number_data_i_plus_1 = number_data[(i + 1)];
            if ( number_data_i > number_data_i_plus_1 ) {
                is_sorted = 0;
                swap = number_data_i;
                number_data[i] = number_data_i_plus_1;
                number_data[(i + 1)] = swap;
            }
        }
    }
    return number_data;
}

// OO INHERITANCE TESTING, CONTINUED

string uninherited__Bubble(string person) {
    RPerl::diag((const string) "in CPPOPS_CPPTYPES Bubble::uninherited__Bubble(), received $person = " + person + (const string) ", MITOCHONDRIAL" + (const string) "\n");
    return (const string) "Bubble::uninherited__Bubble() RULES! CPPOPS_CPPTYPES";
}

string uninherited(string person) {
    RPerl::diag((const string) "in CPPOPS_CPPTYPES Bubble::uninherited(), received person = " + person + (const string) ", TETRAHEDRON" + (const string) "\n");
    return (const string) "Bubble::uninherited() ROCKS! CPPOPS_CPPTYPES";
}

// TYPE TESTING

string integer_bubblesort__typetest0(integer_arrayref lucky_integers) {
    return (integer_arrayref_to_string(integer_bubblesort(lucky_integers)) + (const string) "CPPOPS_CPPTYPES");
}

string number_bubblesort__typetest0(number_arrayref lucky_numbers) {
    return (number_arrayref_to_string(number_bubblesort(lucky_numbers)) + (const string) "CPPOPS_CPPTYPES");
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_exactly_one!

# endif

#endif
