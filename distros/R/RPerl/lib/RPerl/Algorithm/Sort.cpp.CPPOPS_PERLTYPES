// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort_cpp
#define __CPP__INCLUDED__RPerl__Algorithm__Sort_cpp 0.010_000

// [[[ INCLUDES ]]]
#include <RPerl/Algorithm/Sort.h>  // -> (RPerl.cpp; Algorithm.cpp)

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void RPerl__Algorithm__Sort::inherited_Sort(SV* person) {
    cout << "in CPPOPS_PERLTYPES Sort->inherited_Sort(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $person = " << SvPV_nolen(person) << ", FISH\n";
}

SV* RPerl__Algorithm__Sort::inherited_Sort_foo_get() {
    cout << "in CPPOPS_PERLTYPES Sort->inherited_Sort_foo_get(), have ::class($self) = " << SvPV_nolen(classname(this)) << ", FISH\n";
    return SvREFCNT_inc(this->foo);
}

void RPerl__Algorithm__Sort::inherited_Sort_foo_set(SV* foo_new) {
    cout << "in CPPOPS_PERLTYPES Sort->inherited_Sort_foo_set(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $foo_new = " << SvPV_nolen(foo_new) << ", FISH\n";
    this->foo = foo_new;
}

SV* RPerl__Algorithm__Sort__uninherited_Sort(SV* person) {
    cout << "in CPPOPS_PERLTYPES Sort::uninherited_Sort(), received $person = " << SvPV_nolen(person) << ", MY\n";
    return newSVpv("Sort::uninherited_Sort() RULES! CPPOPS_PERLTYPES", 0);
}

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____CPP__TYPES_being_defined.__We_need_to_define_only___PERL__TYPES_in_this_file!

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___PERL__TYPES_in_this_file!

# endif

#endif
