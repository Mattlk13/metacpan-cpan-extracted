.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Glib::ParamSpec 3"
.TH Glib::ParamSpec 3 "2019-03-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Glib::ParamSpec \-  encapsulates metadate needed to specify parameters
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Glib::ParamSpec encapsulates the metadata required to specify parameters.
You will see these most often when creating new Glib::Object types; see
\&\f(CW\*(C`Glib::Type\->register\*(C'\fR and Glib::Object::Subclass.
.PP
Parameter specifications allow you to provide limits for validation as 
well as nicknames and blurbs to document the parameters.  Blurbs show up
in reference documentation such as this page or the gtk+ C \s-1API\s0 reference;
i'm not really sure where the nicknames get used.  The Perl bindings for
the most part ignore the difference between dashes and underscores in
the paramspec names, which typically find use as the actual keys for 
object parameters.
.PP
It's worth noting that Glib offers various sizes of integer and floating
point values, while Perl really only deals with full integers and double
precision floating point values.  The size distinction is important for
the underlying C libraries.
.SH "HIERARCHY"
.IX Header "HIERARCHY"
.Vb 1
\&  Glib::ParamSpec
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "paramspec = Glib::ParamSpec\->\fB\s-1IV\s0\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fB\s-1IV\s0\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->IV ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (integer)
.IP "\(bu" 4
\&\f(CW$maximum\fR (integer)
.IP "\(bu" 4
\&\f(CW$default_value\fR (integer)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fB\s-1UV\s0\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fB\s-1UV\s0\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->UV ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$maximum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$default_value\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "string = $pspec\->\fBget_blurb\fP"
.el .SS "string = \f(CW$pspec\fP\->\fBget_blurb\fP"
.IX Subsection "string = $pspec->get_blurb"
.ie n .SS "paramspec = Glib::ParamSpec\->\fBboolean\fP ($name, $nick, $blurb, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBboolean\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->boolean ($name, $nick, $blurb, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$default_value\fR (boolean)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBboxed\fP ($name, $nick, $blurb, $package, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBboxed\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$package\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->boxed ($name, $nick, $blurb, $package, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$package\fR (string) name of the class, derived from Glib::Boxed, of the objects this property will hold.
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBchar\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBchar\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->char ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (integer)
.IP "\(bu" 4
\&\f(CW$maximum\fR (integer)
.IP "\(bu" 4
\&\f(CW$default_value\fR (integer)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "scalar = $pspec\->\fBget_default_value\fP"
.el .SS "scalar = \f(CW$pspec\fP\->\fBget_default_value\fP"
.IX Subsection "scalar = $pspec->get_default_value"
(This is the C level \f(CW\*(C`g_param_value_set_default\*(C'\fR function.)
.PP
Note that on a \f(CW\*(C`Glib::Param::Unichar\*(C'\fR the return is a single-char
string.  This is the same as the constructor
\&\f(CW\*(C`Glib::ParamSpec\->unichar\*(C'\fR, but it's not the same as
\&\f(CW\*(C`Glib::Object\*(C'\fR \f(CW\*(C`get_property\*(C'\fR / \f(CW\*(C`set_property\*(C'\fR, so an
\&\f(CW\*(C`ord()\*(C'\fR conversion is needed if passing the default value to a
unichar \f(CW\*(C`set_property\*(C'\fR.
.ie n .SS "paramspec = Glib::ParamSpec\->\fBdouble\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBdouble\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->double ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (double)
.IP "\(bu" 4
\&\f(CW$maximum\fR (double)
.IP "\(bu" 4
\&\f(CW$default_value\fR (double)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBenum\fP ($name, $nick, $blurb, $enum_type, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBenum\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$enum_type\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->enum ($name, $nick, $blurb, $enum_type, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$enum_type\fR (string)
.IP "\(bu" 4
\&\f(CW$default_value\fR (scalar)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBflags\fP ($name, $nick, $blurb, $flags_type, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBflags\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$flags_type\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->flags ($name, $nick, $blurb, $flags_type, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$flags_type\fR (string)
.IP "\(bu" 4
\&\f(CW$default_value\fR (scalar)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramflags = $pspec\->\fBget_flags\fP"
.el .SS "paramflags = \f(CW$pspec\fP\->\fBget_flags\fP"
.IX Subsection "paramflags = $pspec->get_flags"
.ie n .SS "paramspec = Glib::ParamSpec\->\fBfloat\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBfloat\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->float ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (double)
.IP "\(bu" 4
\&\f(CW$maximum\fR (double)
.IP "\(bu" 4
\&\f(CW$default_value\fR (double)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBgtype\fP ($name, $nick, $blurb, $is_a_type, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBgtype\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$is_a_type\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->gtype ($name, $nick, $blurb, $is_a_type, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$is_a_type\fR (string or undef) The name of a class whose subtypes are allowed as values of the property.  Use \f(CW\*(C`undef\*(C'\fR to allow any type.
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.PP
Since: glib 2.10
.ie n .SS "paramspec = Glib::ParamSpec\->\fBint\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBint\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->int ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (integer)
.IP "\(bu" 4
\&\f(CW$maximum\fR (integer)
.IP "\(bu" 4
\&\f(CW$default_value\fR (integer)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBint64\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBint64\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->int64 ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (64 bit integer)
.IP "\(bu" 4
\&\f(CW$maximum\fR (64 bit integer)
.IP "\(bu" 4
\&\f(CW$default_value\fR (64 bit integer)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBlong\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBlong\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->long ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (integer)
.IP "\(bu" 4
\&\f(CW$maximum\fR (integer)
.IP "\(bu" 4
\&\f(CW$default_value\fR (integer)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "string = $paramspec\->\fBget_name\fP"
.el .SS "string = \f(CW$paramspec\fP\->\fBget_name\fP"
.IX Subsection "string = $paramspec->get_name"
Dashes in the name are converted to underscores.
.ie n .SS "string = $pspec\->\fBget_nick\fP"
.el .SS "string = \f(CW$pspec\fP\->\fBget_nick\fP"
.IX Subsection "string = $pspec->get_nick"
.ie n .SS "paramspec = Glib::ParamSpec\->\fBobject\fP ($name, $nick, $blurb, $package, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBobject\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$package\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->object ($name, $nick, $blurb, $package, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$package\fR (string) name of the class, derived from Glib::Object, of the objects this property will hold.
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBoverride\fP ($name, $overridden)"
.el .SS "paramspec = Glib::ParamSpec\->\fBoverride\fP ($name, \f(CW$overridden\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->override ($name, $overridden)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$overridden\fR (Glib::ParamSpec)
.PP
Since: glib 2.4
.ie n .SS "string = $pspec\->\fBget_owner_type\fP"
.el .SS "string = \f(CW$pspec\fP\->\fBget_owner_type\fP"
.IX Subsection "string = $pspec->get_owner_type"
.ie n .SS "paramspec = Glib::ParamSpec\->\fBparam_spec\fP ($name, $nick, $blurb, $package, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBparam_spec\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$package\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->param_spec ($name, $nick, $blurb, $package, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$package\fR (string) name of the class, derived from Glib::ParamSpec, of the objects this property will hold.
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec or undef = $pspec\->\fBget_redirect_target\fP"
.el .SS "paramspec or undef = \f(CW$pspec\fP\->\fBget_redirect_target\fP"
.IX Subsection "paramspec or undef = $pspec->get_redirect_target"
Since: glib 2.4
.ie n .SS "paramspec = Glib::ParamSpec\->\fBscalar\fP ($name, $nick, $blurb, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBscalar\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->scalar ($name, $nick, $blurb, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.PP
ParamSpec to be used for any generic perl scalar, including references to
complex objects.
.PP
Currently \f(CW\*(C`Gtk2::Builder\*(C'\fR cannot set object properties of this type
(there's no hooks for property value parsing, as of Gtk 2.20), so
prefer the builtin types if buildable support for an object matters.
A \f(CW\*(C`boxed\*(C'\fR of \f(CW\*(C`Glib::Strv\*(C'\fR can give an array of strings.  A signal
handler callback can do most of what a coderef might.
.ie n .SS "paramspec = Glib::ParamSpec\->\fBstring\fP ($name, $nick, $blurb, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBstring\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->string ($name, $nick, $blurb, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$default_value\fR (string or undef)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBuchar\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBuchar\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->uchar ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$maximum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$default_value\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBuint\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBuint\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->uint ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$maximum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$default_value\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBuint64\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBuint64\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->uint64 ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (64 bit unsigned)
.IP "\(bu" 4
\&\f(CW$maximum\fR (64 bit unsigned)
.IP "\(bu" 4
\&\f(CW$default_value\fR (64 bit unsigned)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBulong\fP ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBulong\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$minimum\fP, \f(CW$maximum\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->ulong ($name, $nick, $blurb, $minimum, $maximum, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$minimum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$maximum\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$default_value\fR (unsigned)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "paramspec = Glib::ParamSpec\->\fBunichar\fP ($name, $nick, $blurb, $default_value, $flags)"
.el .SS "paramspec = Glib::ParamSpec\->\fBunichar\fP ($name, \f(CW$nick\fP, \f(CW$blurb\fP, \f(CW$default_value\fP, \f(CW$flags\fP)"
.IX Subsection "paramspec = Glib::ParamSpec->unichar ($name, $nick, $blurb, $default_value, $flags)"
.IP "\(bu" 4
\&\f(CW$name\fR (string)
.IP "\(bu" 4
\&\f(CW$nick\fR (string)
.IP "\(bu" 4
\&\f(CW$blurb\fR (string)
.IP "\(bu" 4
\&\f(CW$default_value\fR (character)
.IP "\(bu" 4
\&\f(CW$flags\fR (Glib::ParamFlags)
.ie n .SS "string = $pspec\->\fBget_value_type\fP"
.el .SS "string = \f(CW$pspec\fP\->\fBget_value_type\fP"
.IX Subsection "string = $pspec->get_value_type"
.ie n .SS "bool = $paramspec\->\fBvalue_validate\fP ($value)"
.el .SS "bool = \f(CW$paramspec\fP\->\fBvalue_validate\fP ($value)"
.IX Subsection "bool = $paramspec->value_validate ($value)"
.ie n .SS "(bool, newval) = $paramspec\->\fBvalue_validate\fP ($value)"
.el .SS "(bool, newval) = \f(CW$paramspec\fP\->\fBvalue_validate\fP ($value)"
.IX Subsection "(bool, newval) = $paramspec->value_validate ($value)"
.IP "\(bu" 4
\&\f(CW$value\fR (scalar)
.PP
In scalar context return true if \f(CW$value\fR must be modified to be valid
for \f(CW$paramspec\fR, or false if it's valid already.  In array context
return also a new value which is \f(CW$value\fR made valid.
.PP
\&\f(CW$value\fR must be the right type for \f(CW$paramspec\fR (with usual stringizing,
numizing, etc).  \f(CW\*(C`value_validate\*(C'\fR checks the further restrictions
such as minimum and maximum for a numeric type or allowed characters
in a string.  The \*(L"made valid\*(R" return is then for instance clamped to
the min/max, or offending chars replaced by a substitutor.
.ie n .SS "integer = $pspec\->\fBvalues_cmp\fP ($value1, $value2)"
.el .SS "integer = \f(CW$pspec\fP\->\fBvalues_cmp\fP ($value1, \f(CW$value2\fP)"
.IX Subsection "integer = $pspec->values_cmp ($value1, $value2)"
.IP "\(bu" 4
\&\f(CW$value1\fR (scalar)
.IP "\(bu" 4
\&\f(CW$value2\fR (scalar)
.PP
Compares \fIvalue1\fR with \fIvalue2\fR according to \fIpspec\fR, and returns \-1, 0 or
+1, if value1 is found to be less than, equal to or greater than value2,
respectively.
.SH "ENUMS AND FLAGS"
.IX Header "ENUMS AND FLAGS"
.SS "flags Glib::ParamFlags"
.IX Subsection "flags Glib::ParamFlags"
.IP "\(bu" 4
\&'readable' / 'G_PARAM_READABLE'
.IP "\(bu" 4
\&'writable' / 'G_PARAM_WRITABLE'
.IP "\(bu" 4
\&'construct' / 'G_PARAM_CONSTRUCT'
.IP "\(bu" 4
\&'construct\-only' / 'G_PARAM_CONSTRUCT_ONLY'
.IP "\(bu" 4
\&'lax\-validation' / 'G_PARAM_LAX_VALIDATION'
.IP "\(bu" 4
\&'private' / 'G_PARAM_PRIVATE'
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Glib
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2011 by the gtk2\-perl team.
.PP
This software is licensed under the \s-1LGPL.\s0  See Glib for a full notice.
