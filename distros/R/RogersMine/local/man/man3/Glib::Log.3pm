.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Glib::Log 3"
.TH Glib::Log 3 "2019-03-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Glib::Log \-  A flexible logging mechanism
.SH "METHODS"
.IX Header "METHODS"
.SS "scalar = Glib::Log\->\fBset_always_fatal\fP ($fatal_mask)"
.IX Subsection "scalar = Glib::Log->set_always_fatal ($fatal_mask)"
.IP "\(bu" 4
\&\f(CW$fatal_mask\fR (scalar)
.ie n .SS "Glib\->\fBcritical\fP ($domain, $message)"
.el .SS "Glib\->\fBcritical\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->critical ($domain, $message)"
.IP "\(bu" 4
\&\f(CW$domain\fR (string or undef)
.IP "\(bu" 4
\&\f(CW$message\fR (string)
.ie n .SS "Glib::Log::default_handler ($log_domain, $log_level, $message, ...)"
.el .SS "Glib::Log::default_handler ($log_domain, \f(CW$log_level\fP, \f(CW$message\fP, ...)"
.IX Subsection "Glib::Log::default_handler ($log_domain, $log_level, $message, ...)"
.IP "\(bu" 4
\&\f(CW$log_domain\fR (string)
.IP "\(bu" 4
\&\f(CW$log_level\fR (scalar)
.IP "\(bu" 4
\&\f(CW$message\fR (string)
.IP "\(bu" 4
\&... (list) possible \*(L"userdata\*(R" argument ignored
.PP
The arguments are the same as taken by the function for set_handler or
set_default_handler.
.ie n .SS "prev_log_func = Glib::Log\->\fBset_default_handler\fP ($log_func, $user_data)"
.el .SS "prev_log_func = Glib::Log\->\fBset_default_handler\fP ($log_func, \f(CW$user_data\fP)"
.IX Subsection "prev_log_func = Glib::Log->set_default_handler ($log_func, $user_data)"
.IP "\(bu" 4
\&\f(CW$log_func\fR (subroutine) handler function or undef
.IP "\(bu" 4
\&\f(CW$user_data\fR (scalar)
.PP
Install log_func as the default log handler.  log_func is called for
anything which doesn't otherwise have a handler (either
Glib::Log\->set_handler, or the Glib::xsapi
gperl_handle_logs_for),
.PP
.Vb 1
\&    &$log_func ($log_domain, $log_levels, $message, $user_data)
.Ve
.PP
where \f(CW$log_domain\fR is a string, and \f(CW$log_levels\fR is a
Glib::LogLevelFlags of level and flags being reported.
.PP
If log_func is \e&Glib::Log::default_handler or undef then Glib's
default handler is set.
.PP
The return value from \f(CW\*(C`set_default_handler\*(C'\fR is the previous handler.
This is \e&Glib::Log::default_handler for Glib's default, otherwise a
Perl function previously installed.  If the handler is some other
non-Perl function then currently the return is undef, but perhaps that
will change to some wrapped thing, except that without associated
userdata there's very little which could be done with it (it couldn't
be reinstalled later without its userdata).
.PP
Since: glib 2.6
.ie n .SS "Glib\->\fBerror\fP ($domain, $message)"
.el .SS "Glib\->\fBerror\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->error ($domain, $message)"
.IP "\(bu" 4
\&\f(CW$domain\fR (string or undef)
.IP "\(bu" 4
\&\f(CW$message\fR (string)
.ie n .SS "scalar = Glib::Log\->\fBset_fatal_mask\fP ($log_domain, $fatal_mask)"
.el .SS "scalar = Glib::Log\->\fBset_fatal_mask\fP ($log_domain, \f(CW$fatal_mask\fP)"
.IX Subsection "scalar = Glib::Log->set_fatal_mask ($log_domain, $fatal_mask)"
.IP "\(bu" 4
\&\f(CW$log_domain\fR (string)
.IP "\(bu" 4
\&\f(CW$fatal_mask\fR (scalar)
.ie n .SS "integer = Glib::Log\->\fBset_handler\fP ($log_domain, $log_levels, $log_func, $user_data=undef)"
.el .SS "integer = Glib::Log\->\fBset_handler\fP ($log_domain, \f(CW$log_levels\fP, \f(CW$log_func\fP, \f(CW$user_data\fP=undef)"
.IX Subsection "integer = Glib::Log->set_handler ($log_domain, $log_levels, $log_func, $user_data=undef)"
.IP "\(bu" 4
\&\f(CW$log_domain\fR (string or undef) name of the domain to handle with this callback.
.IP "\(bu" 4
\&\f(CW$log_levels\fR (Glib::LogLevelFlags) log levels to handle with this callback
.IP "\(bu" 4
\&\f(CW$log_func\fR (subroutine) handler function
.IP "\(bu" 4
\&\f(CW$user_data\fR (scalar)
.PP
\&\f(CW$log_func\fR will be called as
.PP
.Vb 1
\&    &$log_func ($log_domain, $log_levels, $message, $user_data);
.Ve
.PP
where \f(CW$log_domain\fR is the name requested and \f(CW$log_levels\fR is a
Glib::LogLevelFlags of level and flags being reported.
.ie n .SS "Glib\->\fBlog\fP ($log_domain, $log_level, $message)"
.el .SS "Glib\->\fBlog\fP ($log_domain, \f(CW$log_level\fP, \f(CW$message\fP)"
.IX Subsection "Glib->log ($log_domain, $log_level, $message)"
.IP "\(bu" 4
\&\f(CW$log_domain\fR (string or undef)
.IP "\(bu" 4
\&\f(CW$log_level\fR (scalar)
.IP "\(bu" 4
\&\f(CW$message\fR (string)
.ie n .SS "Glib\->\fBmessage\fP ($domain, $message)"
.el .SS "Glib\->\fBmessage\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->message ($domain, $message)"
.IP "\(bu" 4
\&\f(CW$domain\fR (string or undef)
.IP "\(bu" 4
\&\f(CW$message\fR (string)
.ie n .SS "Glib::Log\->\fBremove_handler\fP ($log_domain, $handler_id)"
.el .SS "Glib::Log\->\fBremove_handler\fP ($log_domain, \f(CW$handler_id\fP)"
.IX Subsection "Glib::Log->remove_handler ($log_domain, $handler_id)"
.IP "\(bu" 4
\&\f(CW$log_domain\fR (string or undef)
.IP "\(bu" 4
\&\f(CW$handler_id\fR (integer) as returned by \f(CW\*(C`set_handler\*(C'\fR
.ie n .SS "Glib\->\fBwarning\fP ($domain, $message)"
.el .SS "Glib\->\fBwarning\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->warning ($domain, $message)"
.IP "\(bu" 4
\&\f(CW$domain\fR (string or undef)
.IP "\(bu" 4
\&\f(CW$message\fR (string)
.SH "ENUMS AND FLAGS"
.IX Header "ENUMS AND FLAGS"
.SS "flags Glib::LogLevelFlags"
.IX Subsection "flags Glib::LogLevelFlags"
.IP "\(bu" 4
\&'recursion' / 'G_LOG_FLAG_RECURSION'
.IP "\(bu" 4
\&'fatal' / 'G_LOG_FLAG_FATAL'
.IP "\(bu" 4
\&'error' / 'G_LOG_LEVEL_ERROR'
.IP "\(bu" 4
\&'critical' / 'G_LOG_LEVEL_CRITICAL'
.IP "\(bu" 4
\&'warning' / 'G_LOG_LEVEL_WARNING'
.IP "\(bu" 4
\&'message' / 'G_LOG_LEVEL_MESSAGE'
.IP "\(bu" 4
\&'info' / 'G_LOG_LEVEL_INFO'
.IP "\(bu" 4
\&'debug' / 'G_LOG_LEVEL_DEBUG'
.IP "\(bu" 4
\&'fatal\-mask' / 'G_LOG_FATAL_MASK'
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Glib
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2011 by the gtk2\-perl team.
.PP
This software is licensed under the \s-1LGPL.\s0  See Glib for a full notice.
