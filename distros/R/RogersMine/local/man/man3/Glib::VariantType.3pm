.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Glib::VariantType 3"
.TH Glib::VariantType 3 "2019-03-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Glib::VariantType \-  Utilities for dealing with the GVariant type system
.SH "HIERARCHY"
.IX Header "HIERARCHY"
.Vb 2
\&  Glib::Boxed
\&  +\-\-\-\-Glib::VariantType
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "varianttype = Glib::VariantType\->\fBnew\fP ($type_string)"
.IX Subsection "varianttype = Glib::VariantType->new ($type_string)"
.IP "\(bu" 4
\&\f(CW$type_string\fR (string)
.SS "varianttype = Glib::VariantType\->\fBnew_array\fP ($element)"
.IX Subsection "varianttype = Glib::VariantType->new_array ($element)"
.IP "\(bu" 4
\&\f(CW$element\fR (Glib::VariantType)
.ie n .SS "varianttype = Glib::VariantType\->\fBnew_dict_entry\fP ($key, $value)"
.el .SS "varianttype = Glib::VariantType\->\fBnew_dict_entry\fP ($key, \f(CW$value\fP)"
.IX Subsection "varianttype = Glib::VariantType->new_dict_entry ($key, $value)"
.IP "\(bu" 4
\&\f(CW$key\fR (Glib::VariantType)
.IP "\(bu" 4
\&\f(CW$value\fR (Glib::VariantType)
.SS "varianttype = Glib::VariantType\->\fBnew_maybe\fP ($element)"
.IX Subsection "varianttype = Glib::VariantType->new_maybe ($element)"
.IP "\(bu" 4
\&\f(CW$element\fR (Glib::VariantType)
.SS "varianttype = Glib::VariantType\->\fBnew_tuple\fP ($items)"
.IX Subsection "varianttype = Glib::VariantType->new_tuple ($items)"
.IP "\(bu" 4
\&\f(CW$items\fR (scalar)
.ie n .SS "varianttype = $type\->\fBelement\fP"
.el .SS "varianttype = \f(CW$type\fP\->\fBelement\fP"
.IX Subsection "varianttype = $type->element"
.ie n .SS "boolean = $type1\->\fBequal\fP ($type2)"
.el .SS "boolean = \f(CW$type1\fP\->\fBequal\fP ($type2)"
.IX Subsection "boolean = $type1->equal ($type2)"
.IP "\(bu" 4
\&\f(CW$type2\fR (Glib::VariantType)
.ie n .SS "varianttype = $type\->\fBfirst\fP"
.el .SS "varianttype = \f(CW$type\fP\->\fBfirst\fP"
.IX Subsection "varianttype = $type->first"
.ie n .SS "integer = $type\->\fBhash\fP"
.el .SS "integer = \f(CW$type\fP\->\fBhash\fP"
.IX Subsection "integer = $type->hash"
.ie n .SS "boolean = $type\->\fBis_array\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_array\fP"
.IX Subsection "boolean = $type->is_array"
.ie n .SS "boolean = $type\->\fBis_basic\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_basic\fP"
.IX Subsection "boolean = $type->is_basic"
.ie n .SS "boolean = $type\->\fBis_container\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_container\fP"
.IX Subsection "boolean = $type->is_container"
.ie n .SS "boolean = $type\->\fBis_definite\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_definite\fP"
.IX Subsection "boolean = $type->is_definite"
.ie n .SS "boolean = $type\->\fBis_dict_entry\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_dict_entry\fP"
.IX Subsection "boolean = $type->is_dict_entry"
.ie n .SS "boolean = $type\->\fBis_maybe\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_maybe\fP"
.IX Subsection "boolean = $type->is_maybe"
.ie n .SS "boolean = $type\->\fBis_subtype_of\fP ($supertype)"
.el .SS "boolean = \f(CW$type\fP\->\fBis_subtype_of\fP ($supertype)"
.IX Subsection "boolean = $type->is_subtype_of ($supertype)"
.IP "\(bu" 4
\&\f(CW$supertype\fR (Glib::VariantType)
.ie n .SS "boolean = $type\->\fBis_tuple\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_tuple\fP"
.IX Subsection "boolean = $type->is_tuple"
.ie n .SS "boolean = $type\->\fBis_variant\fP"
.el .SS "boolean = \f(CW$type\fP\->\fBis_variant\fP"
.IX Subsection "boolean = $type->is_variant"
.ie n .SS "varianttype = $type\->\fBkey\fP"
.el .SS "varianttype = \f(CW$type\fP\->\fBkey\fP"
.IX Subsection "varianttype = $type->key"
.ie n .SS "unsigned = $type\->\fBn_items\fP"
.el .SS "unsigned = \f(CW$type\fP\->\fBn_items\fP"
.IX Subsection "unsigned = $type->n_items"
.ie n .SS "varianttype = $type\->\fBnext\fP"
.el .SS "varianttype = \f(CW$type\fP\->\fBnext\fP"
.IX Subsection "varianttype = $type->next"
.ie n .SS "scalar = $type\->\fBget_string\fP"
.el .SS "scalar = \f(CW$type\fP\->\fBget_string\fP"
.IX Subsection "scalar = $type->get_string"
.SS "boolean = Glib::VariantType::string_is_valid ($type_string)"
.IX Subsection "boolean = Glib::VariantType::string_is_valid ($type_string)"
.IP "\(bu" 4
\&\f(CW$type_string\fR (string)
.SS "(type_string, rest) = Glib::VariantType::string_scan ($string)"
.IX Subsection "(type_string, rest) = Glib::VariantType::string_scan ($string)"
Scans the start of \f(CW$string\fR for a complete type string and extracts it.  If
no type string can be found, an exception is thrown.
.ie n .SS "varianttype = $type\->\fBvalue\fP"
.el .SS "varianttype = \f(CW$type\fP\->\fBvalue\fP"
.IX Subsection "varianttype = $type->value"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Glib, Glib::Boxed, Glib::Variant
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2011 by the gtk2\-perl team.
.PP
This software is licensed under the \s-1LGPL.\s0  See Glib for a full notice.
