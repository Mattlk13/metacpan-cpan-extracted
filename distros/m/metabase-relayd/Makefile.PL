# This file was automatically generated by Dist::Zilla::Plugin::MakeMaker v6.012.
use strict;
use warnings;

use 5.006;

use ExtUtils::MakeMaker;

my %WriteMakefileArgs = (
  "ABSTRACT" => "the guts of the metabase-relayd command",
  "AUTHOR" => "Chris Williams <chris\@bingosnet.co.uk>",
  "CONFIGURE_REQUIRES" => {
    "Config" => 0,
    "ExtUtils::MakeMaker" => 0,
    "File::Spec" => 0
  },
  "DISTNAME" => "metabase-relayd",
  "EXE_FILES" => [
    "bin/metabase-relayd"
  ],
  "LICENSE" => "perl",
  "MIN_PERL_VERSION" => "5.006",
  "NAME" => "metabase::relayd",
  "PREREQ_PM" => {
    "Config::Tiny" => "2.12",
    "File::Path" => 0,
    "File::Spec" => 0,
    "Module::Load::Conditional" => "0.38",
    "Module::Pluggable" => 0,
    "POE" => "1.310",
    "POE::Component::Metabase::Relay::Server" => "0.34",
    "Pod::Usage" => "1.00",
    "unless" => 0
  },
  "TEST_REQUIRES" => {
    "File::Spec" => 0,
    "IO::Handle" => 0,
    "IPC::Open3" => 0,
    "Test::More" => "0.47"
  },
  "VERSION" => "0.42",
  "test" => {
    "TESTS" => "t/*.t"
  }
);


my %FallbackPrereqs = (
  "Config::Tiny" => "2.12",
  "File::Path" => 0,
  "File::Spec" => 0,
  "IO::Handle" => 0,
  "IPC::Open3" => 0,
  "Module::Load::Conditional" => "0.38",
  "Module::Pluggable" => 0,
  "POE" => "1.310",
  "POE::Component::Metabase::Relay::Server" => "0.34",
  "Pod::Usage" => "1.00",
  "Test::More" => "0.47",
  "unless" => 0
);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.034
if (can_cc()) {
requires( 'POE::XS::Queue::Array' => 0.005 );
if ( $^O eq 'linux' ) {
requires( 'POE::XS::Loop::EPoll' => 1.001 );
}
elsif ( $^O =~ /^(MSWin32|darwin)$/ ) {
requires( 'Event' => 0 );
requires( 'POE::Loop::Event' => 0 );
}
else {
requires( 'POE::XS::Loop::Poll' => 1.000 );
}
}



unless ( eval { ExtUtils::MakeMaker->VERSION(6.63_03) } ) {
  delete $WriteMakefileArgs{TEST_REQUIRES};
  delete $WriteMakefileArgs{BUILD_REQUIRES};
  $WriteMakefileArgs{PREREQ_PM} = \%FallbackPrereqs;
}

delete $WriteMakefileArgs{CONFIGURE_REQUIRES}
  unless eval { ExtUtils::MakeMaker->VERSION(6.52) };

WriteMakefile(%WriteMakefileArgs);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.034
sub _add_prereq {
  my ($mm_key, $module, $version_or_range) = @_;
  $version_or_range ||= 0;
  warn "$module already exists in $mm_key (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $WriteMakefileArgs{$mm_key}{$module}
      and $WriteMakefileArgs{$mm_key}{$module} ne '0'
      and $WriteMakefileArgs{$mm_key}{$module} ne $version_or_range;
  warn "$module already exists in FallbackPrereqs (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $FallbackPrereqs{$module} and $FallbackPrereqs{$module} ne '0'
        and $FallbackPrereqs{$module} ne $version_or_range;
  $WriteMakefileArgs{$mm_key}{$module} = $FallbackPrereqs{$module} = $version_or_range;
  return;
}

sub can_cc {
  if ($^O eq 'VMS') {
    require ExtUtils::CBuilder;
    my $builder = ExtUtils::CBuilder->new(quiet => 1);
    return $builder->have_compiler;
  }

  my @chunks = split(/ /, $Config::Config{cc});

  # $Config{cc} may contain args; try to find out the program part
  while (@chunks) {
    return can_run("@chunks") || (pop(@chunks), next);
  }

  return 0;
}

sub can_run {
  my ($cmd) = @_;

  return $cmd if -x $cmd;
  if (my $found_cmd = MM->maybe_command($cmd)) {
    return $found_cmd;
  }

  for my $dir ((split /$Config::Config{path_sep}/, $ENV{PATH}), '.') {
    next if $dir eq '';
    require File::Spec;
    my $abs = File::Spec->catfile($dir, $cmd);
    return $abs if (-x $abs or $abs = MM->maybe_command($abs));
  }

  return;
}

# Fix Cygwin bug on maybe_command(), fixed in EUMM 6.69_04
BEGIN { if ( $^O eq 'cygwin' ) {
  require ExtUtils::MM_Cygwin;
  require ExtUtils::MM_Win32;
  {
    no warnings 'redefine';
    package ExtUtils::MM_Cygwin;
    sub maybe_command {
      my ($self, $file) = @_;
      my $cygpath = Cygwin::posix_to_win_path('/', 1);
      my $filepath = Cygwin::posix_to_win_path($file, 1);
      return (substr($filepath,0,length($cygpath)) eq $cygpath)
        ? $self->SUPER::maybe_command($file) # Unix
        : ExtUtils::MM_Win32->maybe_command($file); # Win32
    }
  }
} }

sub requires { goto &runtime_requires }

sub runtime_requires {
  my ($module, $version_or_range) = @_;
  _add_prereq(PREREQ_PM => $module, $version_or_range);
}
