#line 2 "VPreLex_pretmp.cpp"

#line 4 "VPreLex_pretmp.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

#define yy_create_buffer VPreLex_create_buffer
#define yy_delete_buffer VPreLex_delete_buffer
#define yy_flex_debug VPreLex_flex_debug
#define yy_init_buffer VPreLex_init_buffer
#define yy_flush_buffer VPreLex_flush_buffer
#define yy_load_buffer_state VPreLex_load_buffer_state
#define yy_switch_to_buffer VPreLex_switch_to_buffer
#define yyin VPreLexin
#define yyleng VPreLexleng
#define yylex VPreLexlex
#define yylineno VPreLexlineno
#define yyout VPreLexout
#define yyrestart VPreLexrestart
#define yytext VPreLextext
#define yywrap VPreLexwrap
#define yyalloc VPreLexalloc
#define yyrealloc VPreLexrealloc
#define yyfree VPreLexfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE VPreLexrestart(VPreLexin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t VPreLexleng;

extern FILE *VPreLexin, *VPreLexout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up VPreLextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up VPreLextext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via VPreLexrestart()), so that the user can continue scanning by
	 * just pointing VPreLexin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when VPreLextext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t VPreLexleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow VPreLexwrap()'s to do buffer switches
 * instead of setting up a fresh VPreLexin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void VPreLexrestart (FILE *input_file  );
void VPreLex_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE VPreLex_create_buffer (FILE *file,int size  );
void VPreLex_delete_buffer (YY_BUFFER_STATE b  );
void VPreLex_flush_buffer (YY_BUFFER_STATE b  );
void VPreLexpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void VPreLexpop_buffer_state (void );

static void VPreLexensure_buffer_stack (void );
static void VPreLex_load_buffer_state (void );
static void VPreLex_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER VPreLex_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE VPreLex_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE VPreLex_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE VPreLex_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *VPreLexalloc (yy_size_t  );
void *VPreLexrealloc (void *,yy_size_t  );
void VPreLexfree (void *  );

#define yy_new_buffer VPreLex_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        VPreLexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            VPreLex_create_buffer(VPreLexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        VPreLexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            VPreLex_create_buffer(VPreLexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define VPreLexwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *VPreLexin = (FILE *) 0, *VPreLexout = (FILE *) 0;

typedef int yy_state_type;

extern int VPreLexlineno;

int VPreLexlineno = 1;

extern char *VPreLextext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr VPreLextext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up VPreLextext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	VPreLexleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int32_t yy_accept[600] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  119,  116,  114,  109,  113,  115,
       14,  116,  110,  116,  116,  114,  113,  116,  105,  103,
      105,  105,  104,   17,   15,   17,   20,   16,  117,   47,
       46,   47,   45,   60,   53,   62,   52,   55,   48,   49,
       62,   62,   58,   62,   59,   60,   70,   67,   72,   66,
       69,   72,   72,   72,   77,   75,   77,   77,   76,   77,
       34,   31,   30,   33,   32,   23,   25,   34,   34,   31,
       33,   34,   93,   81,   94,   80,   82,   87,   88,   94,

       89,   94,   85,   86,   94,   42,   41,   42,   44,  117,
       38,   37,   38,   38,   99,   97,   99,   99,   98,  114,
      109,    0,  101,  100,  110,    0,  110,   21,  106,    0,
      106,  108,  106,  106,  106,  106,  106,  114,    0,    0,
        0,  106,  103,    0,  102,  104,   15,    0,   16,   19,
       18,   19,   46,    0,   60,   53,    0,   50,   51,   61,
       54,    0,   57,    0,   70,   67,    0,   63,   65,   71,
       68,    0,   75,    0,   73,   76,   74,    0,   31,   30,
        0,   25,    0,   25,   24,   27,    0,   27,   29,   31,
        0,   27,   93,   81,    0,   78,   79,   84,   90,    0,

       92,   41,    0,   43,   37,    0,    0,    0,   97,    0,
        0,    0,   98,    0,    0,    0,    0,  100,  100,    0,
      100,  100,  100,  111,  110,  106,    0,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,    0,  106,    0,
       51,    0,   65,   65,   26,   27,    0,   27,    0,   27,
       27,   79,   90,    0,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  100,  100,  100,  110,  107,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,    0,
      106,   56,   64,    0,   28,   22,   27,   27,   27,   91,

       83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  100,  100,  100,  106,  106,
      106,    3,  106,  106,  106,  106,  106,  106,  106,  106,
      106,    0,  106,   27,   27,   27,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  100,  100,  100,  100,  106,  106,  106,    4,    5,
       11,    6,  106,  106,  106,  106,    9,    0,    0,   27,
       27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
      100,  100,  100,  106,  106,    2,    7,  106,  106,  106,

      106,    0,    0,    1,    0,   27,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,    0,  100,  100,  106,  106,
        8,    0,  106,  106,    0,   27,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      100,    0,  100,  100,   12,   13,    0,  106,  106,   12,
       13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,    0,  100,    0,   35,  106,    0,
        0,    0,    0,    0,    0,    0,    0,  100,    0,    0,
      106,    0,    0,    0,    0,    0,  100,    0,    0,   10,

        0,    0,    0,    0,    0,  100,    0,    0,   39,    0,
        0,    0,    0,  100,    0,    0,    0,    0,    0,    0,
      100,    0,    0,    0,    0,    0,    0,  100,    0,    0,
        0,    0,    0,    0,  100,    0,    0,    0,    0,    0,
        0,  100,    0,    0,    0,    0,    0,    0,  100,    0,
        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
       96,    0,   95,   95,    0,    0,    0,    0,   96,   96,
       96,    0,    0,   95,   95,   95,   95,   95,    0,    0,
       96,   95,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   40,    0,   36,    0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    2,    1,    6,    1,    7,    1,    1,    1,    8,
        9,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
        1,   14,    1,    1,   15,   16,   17,   17,   18,   19,
       20,   21,   22,   17,   17,   23,   24,   25,   26,   27,
       17,   28,   29,   30,   17,   17,   17,   17,   31,   17,
       32,   33,   34,    1,   35,   36,   37,   38,   39,   40,

       41,   42,   43,   21,   44,   17,   17,   45,   46,   47,
       48,   49,   17,   50,   51,   52,   53,   17,   17,   17,
       31,   17,   32,    1,   34,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[54] =
    {   0,
        1,    2,    3,    4,    1,    5,    6,    7,    7,    8,
        9,    8,   10,    1,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    7,    5,    7,   11,   12,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11
    } ;

static yyconst flex_uint32_t yy_base[644] =
    {   0,
        0,   36,   72,  108,  144,  180,   12,   14,  214,  248,
       52,   88,  284,  320,  356,  392,  426,  460,   21,   57,
       23,   27,  496,  532, 1585, 1586, 1582, 1586,   25, 1586,
     1586,    9, 1547,    0,  563,   63,   93,  611, 1586, 1586,
       48, 1570,    0, 1586, 1586,   84, 1586,    0,   98, 1586,
     1586,  120, 1586,    0, 1586,  122,    0, 1586, 1586, 1586,
     1586,  118, 1586,  128, 1586,  101,    0, 1586,  132,    0,
     1586, 1586,  127,  156, 1586, 1586,  158, 1569,    0,  160,
     1586, 1578, 1586,  162, 1586, 1586, 1543,    0,  137,  165,
      193,  192,    0, 1586,  171,    0, 1586, 1586, 1586, 1586,

     1586,  190, 1586, 1586,  173, 1586, 1586,  200, 1586,    0,
     1586, 1586,  204,  189, 1586, 1586,  207,  221,    0, 1576,
     1586,  231,  663,  713, 1541, 1540, 1539, 1586, 1538,    0,
      204, 1586,   97,  219,  223,   53,  121,  239,  240, 1528,
      269,  263, 1586,  258, 1586,    0, 1586,  264,    0, 1586,
     1586,  274, 1586,  297,    0, 1586,  299, 1586,    0, 1586,
     1586,  305, 1586, 1536,    0, 1586,  307, 1586, 1538, 1586,
     1586,  309, 1586,  311, 1586,    0, 1586,  332, 1568, 1586,
      334, 1533, 1532, 1531, 1586, 1530, 1529,  304, 1586,  339,
      342,  306,    0, 1586,  344, 1586,    0, 1586, 1528, 1527,

     1586, 1586,  368, 1586, 1586,  370, 1515, 1511, 1586,  373,
      763,  813,    0,    0,  147,  171, 1529, 1555,  863,  913,
      387,  411,  201, 1586, 1522, 1521, 1520, 1519,  391,  313,
      268,  209,  247,  372,  343,  404,  344, 1510,  227,  382,
        0, 1547, 1519,  413, 1586, 1515, 1514, 1513, 1542,  431,
      371,    0, 1511, 1510, 1509, 1538, 1503, 1505,    0,  363,
      392, 1501,    0,  397,  394, 1489,  407,  436,  428,  431,
      428, 1477,  475,  472,  470, 1449, 1586,  489,  490,  413,
      444,  445,  479,  478,  446,  486,  447,  509,  480, 1437,
      482, 1586, 1586,  444, 1586, 1586,  526,  527,  511, 1586,

     1586, 1434, 1435,  534,  536,  528,  538,  540,  531,  535,
      538,  541,  544,  555,  555,  579,  570,  580,   30,  561,
      558, 1441,  549,  572,  559,  579,  583,  582,  584,  586,
      589, 1435,  632,  564,  601,  636, 1416, 1419,  589,  619,
      623,  619,  623,  628,  618,  633,  632, 1433,  639,  630,
      656,  673,  665,  670,  680,  315,  669,  652, 1417, 1416,
     1411, 1410,  649,  484,  658,  606,  662,  379,  718,  691,
      695, 1397, 1398,  666,  678,  680, 1413,  680,  692,  696,
     1402,  731,  711,  701,  716,  706,  713,  712, 1401,  739,
      740,  742,  745,  718,  733, 1376, 1375,  715,  745,  724,

      736,  770,  785, 1586,  792,  744,  749, 1358, 1403,  795,
      767,  762,  757,  799,  787,  776,  788,  805, 1373,  779,
      814,  795,  782,  802,  817,  821,  275,  830,  801,  803,
     1367,  839,  790,  808,  842,  817,  819, 1351,  846,  854,
     1347,  831,  859, 1342,  842,  844,  845,  853, 1341,  847,
      873,  852,  862,  864, 1335, 1334, 1319,  730,  867, 1329,
     1328, 1324, 1311,  855,  856,  865,  871,  881,  894,  904,
      893,  895,  903,  914,  911,  916, 1312, 1323,  834, 1302,
     1305,  912,  901,  916,  904,  909,  906,  933,  914, 1300,
      918, 1310, 1298,  918,  934,  931,  962,  939, 1300, 1304,

     1299, 1293,  941,  942,  949,  965,  950, 1294, 1586, 1293,
      951,  952,  961,  974,  962, 1260, 1257,  964,  968,  954,
      982,  955, 1306, 1305,  957,  970,  984,  999,  986, 1006,
     1012,  997,  998, 1253, 1014, 1252, 1244, 1237, 1248, 1227,
      993, 1016,  995, 1218, 1220,  997,  998, 1009, 1028, 1010,
     1215, 1223, 1001, 1008, 1012, 1031, 1017, 1201, 1198, 1056,
     1059, 1065, 1070, 1074, 1211, 1191, 1075, 1228, 1235, 1078,
     1079, 1082, 1059, 1064, 1085, 1086, 1061, 1089, 1013, 1009,
     1586, 1586, 1006,  985,  982,  895,  770,  660,  588,  536,
      520,  443,  361,  196,  174, 1586,   87, 1586, 1586, 1093,

     1105, 1117, 1129, 1141, 1153, 1165, 1177, 1189, 1201, 1213,
     1225, 1232, 1244, 1252, 1255, 1257, 1268, 1280, 1292, 1304,
     1316, 1319, 1325, 1337, 1344, 1356, 1363, 1375, 1378, 1389,
     1396, 1408, 1419, 1431, 1438, 1450, 1462, 1469, 1481, 1493,
     1505, 1517, 1529
    } ;

static yyconst flex_int32_t yy_def[644] =
    {   0,
      600,  600,  601,  601,  602,  602,  603,  603,  604,  604,
      605,  605,  606,  606,  607,  607,  608,  608,  609,  609,
      610,  610,  611,  611,  599,  599,  599,  599,  599,  599,
      599,  599,  612,  613,  614,  599,  599,  614,  599,  599,
      599,  599,  615,  599,  599,  599,  599,  616,  617,  599,
      599,  599,  599,  618,  599,  599,  618,  599,  599,  599,
      599,  599,  599,  619,  599,  618,  620,  599,  599,  620,
      599,  599,  599,  621,  599,  599,  599,  599,  622,  599,
      599,  599,  599,  599,  599,  599,  623,  624,  625,  599,
      599,  625,  626,  599,  599,  626,  599,  599,  599,  599,

      599,  599,  599,  599,  627,  599,  599,  599,  599,  628,
      599,  599,  599,  599,  599,  599,  599,  599,  629,  599,
      599,  599,  599,  630,  612,  599,  613,  599,  631,  632,
      631,  599,  631,  631,  631,  631,  631,  599,  599,  599,
      599,  631,  599,  599,  599,  615,  599,  599,  616,  599,
      599,  599,  599,  599,  618,  599,  599,  599,  633,  599,
      599,  599,  599,  599,  620,  599,  599,  599,  634,  599,
      599,  599,  599,  599,  599,  622,  599,  599,  599,  599,
      599,  623,  599,  624,  599,  635,  636,  635,  599,  599,
      599,  635,  626,  599,  599,  599,  637,  599,  638,  639,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  629,  123,  599,  599,  599,  630,  630,  599,
      630,  630,  630,  599,  613,  631,  599,  632,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  599,  631,  599,
      633,  599,  634,  634,  599,  635,  599,  636,  599,  635,
      635,  637,  638,  599,  639,  599,  599,  599,  211,  599,
      599,  599,  212,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  630,  630,  630,  613,  599,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  599,
      631,  599,  599,  599,  599,  599,  635,  635,  635,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  630,  630,  630,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  599,  631,  635,  635,  635,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  630,  630,  630,  630,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  599,  640,  635,
      635,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  630,
      630,  630,  630,  631,  631,  631,  631,  631,  631,  631,

      631,  640,  640,  599,  640,  635,  635,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  630,  599,  630,  630,  631,  631,
      631,  599,  631,  631,  640,  635,  635,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      630,  599,  630,  630,  631,  631,  599,  631,  631,  635,
      635,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  630,  599,  630,  599,  631,  631,  599,
      599,  599,  599,  599,  599,  599,  599,  630,  599,  599,
      631,  599,  599,  599,  599,  599,  630,  599,  599,  631,

      599,  599,  599,  599,  599,  630,  599,  599,  599,  599,
      599,  599,  599,  630,  599,  599,  599,  599,  599,  599,
      630,  599,  599,  599,  599,  599,  599,  630,  599,  599,
      599,  599,  599,  599,  630,  599,  599,  599,  599,  599,
      599,  630,  599,  599,  599,  599,  599,  599,  630,  599,
      599,  599,  599,  599,  599,  630,  599,  599,  599,  599,
      641,  599,  642,  643,  599,  599,  599,  599,  641,  641,
      641,  599,  599,  642,  642,  643,  643,  643,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,    0,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599
    } ;

static yyconst flex_uint32_t yy_nxt[1640] =
    {   0,
       26,   27,   28,   29,   30,   31,   26,   26,   26,   26,
       26,   32,   26,   26,   51,   52,   51,   52,  123,   53,
      124,   53,  599,  107,  108,  112,  113,  121,  122,  112,
      113,   26,   34,   26,  109,   35,   26,   36,   28,   37,
       30,   31,   26,   26,   26,   26,   26,   32,   26,   26,
      143,  144,  356,  110,   68,   69,   70,   71,  114,  107,
      108,   72,  114,   73,  138,  227,  139,   26,   34,   26,
      109,   38,   39,   39,   40,   41,   39,   39,   39,   39,
       39,   42,   39,   39,   74,   39,  147,  148,  227,  110,
       68,   69,   70,   71,  139,  121,  141,   72,  140,   73,

      151,  152,  236,   39,   39,   39,  163,   39,   39,   39,
       40,   41,   39,   39,   39,   39,   39,   42,   39,   39,
       74,   39,  153,  154,  156,  157,  598,  158,  140,  159,
      161,  162,  227,  164,  166,  167,  168,  230,  169,   39,
       39,   39,  185,   39,   44,   44,   45,   46,   44,   47,
       44,   44,   44,   44,   44,   44,  227,   44,  171,  172,
      173,  174,  177,  178,  180,  181,  190,  237,  139,  187,
      267,  188,  189,  194,  195,   44,   49,   44,  198,   44,
       44,   44,   45,   46,   44,   47,   44,   44,   44,   44,
       44,   44,  267,   44,  139,  180,  191,  185,  268,  196,

      140,  197,  202,  203,  599,  200,  205,  206,  201,  209,
      210,   44,   49,   44,  597,   44,   55,   56,   57,   58,
      268,   59,   60,   61,  187,   62,  188,  189,  140,  207,
      211,  275,  212,  121,  122,  596,  192,  208,  229,  227,
      138,  139,  139,  139,  227,   63,   64,   65,  282,   66,
       55,   56,   57,   58,  227,   59,   60,   61,  227,   62,
      143,  144,  227,  231,  234,  232,  147,  148,  233,  235,
      139,  121,  141,  291,  140,  140,  151,  240,  599,   63,
       64,   65,  227,   66,   75,   75,   76,   77,   75,   75,
       75,   75,   75,   78,   75,   75,  283,   75,  227,  153,

      154,  156,  157,  227,  140,  453,  239,  161,  162,  166,
      167,  171,  172,  173,  174,   75,   80,   75,  281,   75,
       75,   75,   76,   77,   75,   75,   75,   75,   75,   78,
       75,   75,  394,   75,  177,  178,  180,  181,  250,  247,
      190,  247,  139,  139,  180,  191,  194,  195,  227,  251,
      227,   75,   80,   75,  280,   75,   81,   82,   83,   84,
       85,   86,   81,   81,   81,   81,   81,   81,   81,   81,
      202,  203,  205,  206,  140,  209,  210,  140,  227,  227,
      369,  286,  369,  289,  151,  240,  304,   81,   88,   81,
      599,   89,   81,   90,   83,   91,   85,   86,   81,   81,

       81,   81,   81,   81,   81,   81,  247,  227,  304,  278,
      273,  284,  595,  279,  599,  293,  294,  299,  285,  305,
      307,  308,  310,   81,   88,   81,  227,   92,   94,   95,
       96,   97,  273,   98,   99,  100,  101,  102,  274,  227,
      287,  305,  307,  308,  310,  244,  293,  294,  227,  297,
      311,  288,  312,  298,  313,  314,  321,  103,  100,  104,
      274,  105,   94,   95,   96,   97,  247,   98,   99,  100,
      101,  102,  311,  599,  312,  599,  313,  314,  599,  227,
      227,  227,  227,  594,  322,  327,  317,  323,  324,  329,
      316,  103,  100,  104,  318,  105,  115,  115,  116,  117,

      115,  115,  115,  115,  115,  115,  115,  118,  317,  115,
      319,  320,  316,  227,  227,  227,  318,  227,  326,  227,
      331,  227,  333,  398,  227,  227,  325,  115,  115,  115,
      328,  115,  115,  115,  116,  117,  115,  115,  115,  115,
      115,  115,  115,  118,  227,  115,  247,  334,  335,  339,
      340,  336,  341,  342,  343,  344,  345,  346,  593,  349,
      330,  247,  247,  115,  115,  115,  347,  115,  128,  350,
      348,  339,  340,  599,  341,  342,  343,  344,  345,  351,
      346,  349,  599,  599,  227,  357,  370,  592,  347,  353,
      359,  350,  348,  227,  227,  130,  227,  131,  132,  247,

      352,  351,  133,  134,  358,  354,  135,  227,  361,  355,
      374,  136,  353,  360,  227,  137,  128,  227,  227,  227,
      362,  227,  352,  363,  227,  371,  366,  354,  591,  365,
      367,  355,  374,  369,  364,  369,  247,  369,  375,  369,
      378,  227,  379,  130,  400,  131,  132,  382,  376,  387,
      133,  134,  377,  380,  135,  142,  383,  381,  384,  136,
      386,  375,  378,  137,  214,  379,  214,  227,  599,  382,
      376,  247,  387,  599,  377,  380,  599,  215,  383,  381,
      384,  388,  386,  599,  227,  389,  395,  227,  391,  216,
      397,  217,  396,  227,  399,  410,  392,  227,  590,  215,

      393,  411,  390,  388,  227,  401,  412,  389,  406,  414,
      391,  216,  407,  217,  219,  415,  220,  410,  392,  403,
      404,  405,  416,  411,  390,  382,  247,  221,  412,  419,
      247,  414,  418,  420,  418,  421,  422,  415,  423,  222,
      425,  223,  426,  599,  416,  599,  432,  382,  599,  221,
      227,  419,  429,  227,  390,  431,  420,  421,  422,  227,
      423,  222,  428,  223,  259,  227,  259,  430,  227,  478,
      427,  227,  404,  435,  442,  433,  390,  260,  436,  247,
      227,  410,  434,  437,  247,  428,  403,  404,  405,  261,
      441,  262,  427,  403,  404,  405,  440,  442,  440,  260,

      443,  414,  443,  410,  444,  445,  418,  448,  418,  421,
      449,  261,  441,  262,  263,  426,  263,  426,  425,  450,
      426,  589,  426,  414,  426,  227,  444,  264,  445,  448,
      458,  421,  449,  599,  446,  455,  227,  456,  227,  265,
      432,  266,  450,  227,  404,  435,  451,  439,  459,  264,
      452,  460,  247,  461,  247,  440,  446,  440,  454,  466,
      443,  265,  443,  266,  219,  599,  220,  599,  451,  227,
      469,  470,  452,  382,  471,  473,  599,  221,  491,  475,
      454,  466,  482,  464,  410,  476,  483,  457,  467,  222,
      390,  223,  469,  470,  463,  382,  471,  473,  484,  221,

      474,  475,  227,  479,  482,  464,  410,  476,  483,  414,
      467,  222,  390,  223,  220,  485,  220,  599,  486,  599,
      484,  382,  474,  421,  487,  489,  494,  270,  488,  410,
      495,  414,  414,  496,  421,  588,  599,  485,  498,  271,
      486,  272,  503,  382,  390,  421,  487,  489,  494,  270,
      488,  410,  495,  227,  414,  496,  421,  497,  504,  505,
      498,  271,  500,  272,  503,  599,  390,  507,  599,  511,
      512,  513,  515,  518,  519,  520,  522,  599,  525,  497,
      504,  505,  526,  527,  529,  599,  532,  514,  521,  507,
      506,  511,  512,  513,  515,  518,  519,  520,  522,  533,

      525,  534,  599,  536,  526,  527,  529,  530,  532,  514,
      521,  528,  506,  531,  539,  540,  535,  599,  548,  599,
      550,  533,  553,  554,  534,  560,  536,  555,  557,  587,
      562,  599,  561,  528,  599,  564,  586,  539,  540,  535,
      548,  549,  550,  537,  553,  554,  556,  560,  542,  563,
      555,  557,  538,  562,  561,  585,  584,  567,  564,  567,
      570,  583,  571,  549,  599,  568,  572,  599,  572,  556,
      582,  575,  563,  576,  573,  578,  567,  576,  567,  570,
      570,  571,  571,  572,  568,  572,  575,  578,  576,  576,
      578,  573,  576,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  125,  599,  581,
      580,  125,  125,  125,  127,  579,  566,  565,  127,  127,
      127,  127,  127,  127,  127,  127,  129,  559,  558,  552,
      551,  547,  129,  129,  146,  146,  149,  149,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      155,  155,  546,  545,  544,  155,  543,  541,  155,  155,
      155,  155,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  165,  165,  531,  530,  524,  165,
      165,  523,  165,  165,  165,  165,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  176,  176,
      182,  517,  516,  510,  182,  182,  182,  184,  509,  227,
      508,  184,  184,  184,  184,  184,  184,  184,  186,  502,
      501,  499,  493,  492,  186,  186,  193,  193,  227,  490,
      481,  193,  480,  247,  247,  193,  193,  199,  477,  227,
      227,  472,  468,  199,  199,  204,  204,  465,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  213,  213,  218,
      218,  462,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  226,  227,  447,  439,  226,  226,  226,  228,  438,
      227,  227,  228,  228,  228,  228,  228,  228,  228,  241,
      241,  424,  417,  241,  241,  241,  241,  241,  241,  241,
      241,  243,  243,  413,  409,  243,  243,  243,  243,  243,
      243,  243,  243,  246,  408,  227,  227,  246,  246,  246,
      248,  227,  227,  385,  248,  248,  248,  248,  248,  248,
      248,  248,  252,  252,  373,  372,  252,  252,  252,  252,
      252,  252,  252,  252,  253,  368,  227,  338,  253,  253,
      253,  255,  337,  332,  276,  255,  255,  255,  255,  255,
      255,  255,  255,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  569,  569,  315,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  574,  574,  309,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  577,
      577,  306,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  303,  302,  301,  254,  300,  254,  296,  247,  295,
      247,  244,  292,  290,  227,  277,  227,  276,  599,  269,
      258,  257,  256,  254,  249,  247,  183,  245,  183,  179,
      244,  242,  238,  227,  225,  224,  126,  120,  183,  179,
      175,  145,  126,  120,  599,   25,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599
    } ;

static yyconst flex_int32_t yy_chk[1640] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    7,    8,    8,   32,    7,
       32,    8,    0,   19,   19,   21,   21,   29,   29,   22,
       22,    1,    1,    1,   19,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       41,   41,  319,   19,   11,   11,   11,   11,   21,   20,
       20,   11,   22,   11,   36,  319,   36,    2,    2,    2,
       20,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   11,    3,   46,   46,  136,   20,
       12,   12,   12,   12,   37,   37,   37,   12,   36,   12,

       49,   49,  136,    3,    3,    3,   66,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
       12,    4,   52,   52,   56,   56,  597,   62,   37,   62,
       64,   64,  133,   66,   69,   69,   73,  133,   73,    4,
        4,    4,   89,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,  137,    5,   74,   74,
       77,   77,   80,   80,   84,   84,   90,  137,   90,   89,
      215,   89,   89,   95,   95,    5,    5,    5,  105,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,  215,    6,   91,   91,   91,   92,  216,  102,

       90,  102,  108,  108,  223,  105,  113,  113,  105,  117,
      117,    6,    6,    6,  595,    6,    9,    9,    9,    9,
      216,    9,    9,    9,   92,    9,   92,   92,   91,  114,
      118,  223,  118,  122,  122,  594,   92,  114,  131,  131,
      138,  139,  138,  139,  232,    9,    9,    9,  232,    9,
       10,   10,   10,   10,  134,   10,   10,   10,  135,   10,
      144,  144,  239,  134,  135,  134,  148,  148,  134,  135,
      141,  141,  141,  239,  138,  139,  152,  152,  427,   10,
       10,   10,  233,   10,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,  233,   13,  142,  154,

      154,  157,  157,  231,  141,  427,  142,  162,  162,  167,
      167,  172,  172,  174,  174,   13,   13,   13,  231,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,  356,   14,  178,  178,  181,  181,  188,  188,
      190,  192,  190,  191,  191,  191,  195,  195,  230,  192,
      356,   14,   14,   14,  230,   14,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
      203,  203,  206,  206,  190,  210,  210,  191,  235,  237,
      368,  235,  368,  237,  240,  240,  260,   15,   15,   15,
      221,   15,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,  251,  234,  260,  229,
      221,  234,  593,  229,  222,  244,  244,  251,  234,  261,
      264,  265,  267,   16,   16,   16,  229,   16,   17,   17,
       17,   17,  221,   17,   17,   17,   17,   17,  222,  236,
      236,  261,  264,  265,  267,  244,  294,  294,  280,  250,
      268,  236,  269,  250,  270,  271,  280,   17,   17,   17,
      222,   17,   18,   18,   18,   18,  250,   18,   18,   18,
       18,   18,  268,  275,  269,  274,  270,  271,  273,  281,
      282,  285,  287,  592,  281,  285,  274,  281,  282,  287,
      273,   18,   18,   18,  275,   18,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,  274,   23,
      278,  279,  273,  284,  283,  289,  275,  291,  284,  364,
      289,  286,  291,  364,  278,  279,  283,   23,   23,   23,
      286,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  288,   24,  299,  297,  298,  304,
      305,  299,  306,  307,  308,  309,  310,  311,  591,  313,
      288,  297,  298,   24,   24,   24,  312,   24,   35,  314,
      312,  304,  305,  317,  306,  307,  308,  309,  310,  315,
      311,  313,  316,  318,  323,  320,  334,  590,  312,  317,
      323,  314,  312,  321,  325,   35,  320,   35,   35,  334,

      316,  315,   35,   35,  321,  318,   35,  324,  325,  318,
      339,   35,  317,  324,  326,   35,   38,  328,  327,  329,
      326,  330,  316,  327,  331,  335,  330,  318,  589,  329,
      331,  318,  339,  333,  328,  333,  335,  336,  340,  336,
      342,  366,  343,   38,  366,   38,   38,  345,  341,  350,
       38,   38,  341,  344,   38,   38,  346,  344,  347,   38,
      349,  340,  342,   38,  123,  343,  123,  333,  353,  345,
      341,  336,  350,  354,  341,  344,  352,  123,  346,  344,
      347,  351,  349,  355,  363,  351,  357,  358,  353,  123,
      363,  123,  358,  365,  365,  374,  354,  367,  588,  123,

      355,  375,  352,  351,  357,  367,  376,  351,  370,  378,
      353,  123,  371,  123,  124,  379,  124,  374,  354,  369,
      369,  369,  380,  375,  352,  383,  370,  124,  376,  384,
      371,  378,  382,  385,  382,  386,  387,  379,  388,  124,
      390,  124,  390,  391,  380,  392,  399,  383,  393,  124,
      398,  384,  394,  394,  391,  398,  385,  386,  387,  400,
      388,  124,  393,  124,  211,  458,  211,  395,  395,  458,
      392,  401,  402,  402,  413,  400,  391,  211,  406,  406,
      399,  411,  401,  407,  407,  393,  403,  403,  403,  211,
      412,  211,  392,  405,  405,  405,  410,  413,  410,  211,

      414,  415,  414,  411,  416,  417,  418,  420,  418,  422,
      423,  211,  412,  211,  212,  421,  212,  421,  425,  424,
      425,  587,  426,  415,  426,  433,  416,  212,  417,  420,
      433,  422,  423,  428,  418,  429,  429,  430,  430,  212,
      432,  212,  424,  434,  435,  435,  425,  439,  434,  212,
      426,  436,  436,  437,  437,  440,  418,  440,  428,  442,
      443,  212,  443,  212,  219,  453,  219,  454,  425,  479,
      445,  446,  426,  447,  448,  450,  451,  219,  479,  452,
      428,  442,  464,  440,  465,  454,  466,  432,  443,  219,
      453,  219,  445,  446,  439,  447,  448,  450,  467,  219,

      451,  452,  459,  459,  464,  440,  465,  454,  466,  468,
      443,  219,  453,  219,  220,  469,  220,  474,  470,  476,
      467,  471,  451,  472,  473,  475,  482,  220,  474,  483,
      484,  468,  485,  486,  487,  586,  488,  469,  489,  220,
      470,  220,  494,  471,  476,  472,  473,  475,  482,  220,
      474,  483,  484,  491,  485,  486,  487,  488,  495,  496,
      489,  220,  491,  220,  494,  497,  476,  498,  506,  503,
      504,  505,  507,  511,  512,  513,  515,  514,  518,  488,
      495,  496,  519,  520,  522,  521,  525,  506,  514,  498,
      497,  503,  504,  505,  507,  511,  512,  513,  515,  526,

      518,  527,  528,  529,  519,  520,  522,  530,  525,  506,
      514,  521,  497,  531,  532,  533,  528,  535,  541,  542,
      543,  526,  546,  547,  527,  553,  529,  548,  550,  585,
      555,  549,  554,  521,  556,  557,  584,  532,  533,  528,
      541,  542,  543,  530,  546,  547,  549,  553,  535,  556,
      548,  550,  531,  555,  554,  583,  580,  560,  557,  560,
      561,  579,  561,  542,  577,  560,  562,  574,  562,  549,
      573,  563,  556,  563,  562,  564,  567,  564,  567,  570,
      571,  570,  571,  572,  567,  572,  575,  576,  575,  576,
      578,  572,  578,  600,  600,  600,  600,  600,  600,  600,

      600,  600,  600,  600,  600,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  612,  569,  568,
      566,  612,  612,  612,  613,  565,  559,  558,  613,  613,
      613,  613,  613,  613,  613,  613,  614,  552,  551,  545,
      544,  540,  614,  614,  615,  615,  616,  616,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      618,  618,  539,  538,  537,  618,  536,  534,  618,  618,
      618,  618,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  620,  620,  524,  523,  517,  620,
      620,  516,  620,  620,  620,  620,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  622,  622,
      623,  510,  508,  502,  623,  623,  623,  624,  501,  500,
      499,  624,  624,  624,  624,  624,  624,  624,  625,  493,
      492,  490,  481,  480,  625,  625,  626,  626,  478,  477,
      463,  626,  462,  461,  460,  626,  626,  627,  457,  456,
      455,  449,  444,  627,  627,  628,  628,  441,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  629,  629,  630,
      630,  438,  630,  630,  630,  630,  630,  630,  630,  630,

      630,  631,  431,  419,  409,  631,  631,  631,  632,  408,
      397,  396,  632,  632,  632,  632,  632,  632,  632,  633,
      633,  389,  381,  633,  633,  633,  633,  633,  633,  633,
      633,  634,  634,  377,  373,  634,  634,  634,  634,  634,
      634,  634,  634,  635,  372,  362,  361,  635,  635,  635,
      636,  360,  359,  348,  636,  636,  636,  636,  636,  636,
      636,  636,  637,  637,  338,  337,  637,  637,  637,  637,
      637,  637,  637,  637,  638,  332,  322,  303,  638,  638,
      638,  639,  302,  290,  276,  639,  639,  639,  639,  639,
      639,  639,  639,  640,  640,  640,  640,  640,  640,  640,

      640,  640,  640,  640,  640,  641,  641,  272,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  642,  642,  266,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  643,
      643,  262,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  258,  257,  256,  255,  254,  253,  249,  248,  247,
      246,  243,  242,  238,  228,  227,  226,  225,  218,  217,
      208,  207,  200,  199,  187,  186,  184,  183,  182,  179,
      169,  164,  140,  129,  127,  126,  125,  120,   87,   82,
       78,   42,   33,   27,   25,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int VPreLex_flex_debug;
int VPreLex_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *VPreLextext;
#line 1 "VPreLex.l"
#line 6 "VPreLex.l"
/******************************************************************************
 * DESCRIPTION: Verilog Preprocessor Lexer
 *
 * This file is part of Verilog-Perl.
 *
 * Author: Wilson Snyder <wsnyder@wsnyder.org>
 *
 * Code available from: http://www.veripool.org/systemperl
 *
 ******************************************************************************
 *
 * Copyright 2000-2018 by Wilson Snyder.  This program is free software;
 * you can redistribute it and/or modify it under the terms of either the GNU
 * Lesser General Public License Version 3 or the Perl Artistic License Version 2.0.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 *****************************************************************************
 * Do not use Flex in C++ mode.  It has bugs with yyunput() which result in
 * lost characters.
 *****************************************************************************/

#include "VPreProc.h"
#include "VPreLex.h"
#include <cstdio>
#include <cstdarg>
#include <cstring>
#include <iostream>

// Flex 2.5.35 has compile warning in ECHO, so we'll default our own rule
#define ECHO yyerrorf("Missing VPreLex.l rule: ECHO rule invoked in state %d: %s", YY_START, VPreLextext);

VPreLex* VPreLex::s_currentLexp = NULL;	// Current lexing point

#define LEXP VPreLex::s_currentLexp

#define linenoInc()  { LEXP->linenoInc(); }
static bool pedantic() { return LEXP->m_pedantic; }
static bool keepWhitespace() { return LEXP->m_keepWhitespace; }
static void appendDefValue(const char* t, size_t l) { LEXP->appendDefValue(t,l); }
void yyerror(char* msg) { LEXP->curFilelinep()->error(msg); }

#define YY_INPUT(buf,result,max_size) \
    result = LEXP->inputToLex(buf,max_size);

// Accessors, because flex keeps changing the type of VPreLexleng
char* yyourtext() { return VPreLextext; }
size_t yyourleng() { return (size_t)VPreLexleng; }
void yyourtext(const char* textp, size_t size) { VPreLextext=(char*)textp; VPreLexleng=size; }

void yyerrorf(const char* format, ...) {
    char msg[1024];

    va_list ap;
    va_start(ap,format);
    vsprintf(msg,format,ap);
    va_end(ap);

    yyerror(msg);
}

/**********************************************************************/











/* drop: Drop Ctrl-Z - can't pass thru or may EOF the output too soon */
/* Where we use symb/symbdef, we must also look for a `` join */
/* Note in the preprocessor \ESCaped is *not* always special; mantis1537/bug441 */
/* Case insensitive; unfortunately ?i: isn't in flex 2.5.4 which is popular */
/**************************************************************/
#line 1141 "VPreLex_pretmp.cpp"

#define INITIAL 0
#define CMTMODE 1
#define STRMODE 2
#define DEFFPAR 3
#define DEFFORM 4
#define DEFVAL 5
#define DEFCMT 6
#define STRIFY 7
#define ARGMODE 8
#define INCMODE 9
#define PRTMODE 10
#define OFFMODE 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int VPreLexlex_destroy (void );

int VPreLexget_debug (void );

void VPreLexset_debug (int debug_flag  );

YY_EXTRA_TYPE VPreLexget_extra (void );

void VPreLexset_extra (YY_EXTRA_TYPE user_defined  );

FILE *VPreLexget_in (void );

void VPreLexset_in  (FILE * _in_str  );

FILE *VPreLexget_out (void );

void VPreLexset_out  (FILE * _out_str  );

yy_size_t VPreLexget_leng (void );

char *VPreLexget_text (void );

int VPreLexget_lineno (void );

void VPreLexset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int VPreLexwrap (void );
#else
extern int VPreLexwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int _new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( VPreLextext, VPreLexleng, 1, VPreLexout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( VPreLexin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( VPreLexin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, VPreLexin))==0 && ferror(VPreLexin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(VPreLexin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int VPreLexlex (void);

#define YY_DECL int VPreLexlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after VPreLextext and VPreLexleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( VPreLexleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(VPreLextext[VPreLexleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! VPreLexin )
			VPreLexin = stdin;

		if ( ! VPreLexout )
			VPreLexout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			VPreLexensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				VPreLex_create_buffer(VPreLexin,YY_BUF_SIZE );
		}

		VPreLex_load_buffer_state( );
		}

	{
#line 111 "VPreLex.l"


#line 1386 "VPreLex_pretmp.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of VPreLextext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 600 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1586 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "VPreLex.l"
{ LEXP->lineDirective(VPreLextext);
						  return(VP_LINE); }
	YY_BREAK
/* Special directives we recognize */
case 2:
YY_RULE_SETUP
#line 117 "VPreLex.l"
{ return(VP_DEFINE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "VPreLex.l"
{ return(VP_ELSE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 119 "VPreLex.l"
{ return(VP_ELSIF); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 "VPreLex.l"
{ return(VP_ENDIF); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 121 "VPreLex.l"
{ return(VP_IFDEF); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 122 "VPreLex.l"
{ return(VP_IFNDEF); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 123 "VPreLex.l"
{ return(VP_INCLUDE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 124 "VPreLex.l"
{ return(VP_UNDEF); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 125 "VPreLex.l"
{ return(VP_UNDEFINEALL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 126 "VPreLex.l"
{ if (!pedantic()) return (VP_ERROR); else return(VP_DEFREF); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 127 "VPreLex.l"
{ static string rtnfile;
			  rtnfile = '"'; rtnfile += LEXP->curFilelinep()->filename();
			  rtnfile += '"'; VPreLextext=(char*)rtnfile.c_str(); VPreLexleng = rtnfile.length();
			  return (VP_STRING); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 131 "VPreLex.l"
{ static char buf[10];
			  sprintf(buf, "%d",LEXP->curFilelinep()->lineno());
	                  VPreLextext = buf; VPreLexleng = strlen(VPreLextext);
			  return (VP_TEXT); }
	YY_BREAK
/* Pass-through strings */
case 14:
YY_RULE_SETUP
#line 137 "VPreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(STRMODE):
#line 138 "VPreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated string"); VPreLexleng=0; yyterminate(); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 139 "VPreLex.l"
{ linenoInc(); yyerrorf("Unterminated string"); BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 140 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 141 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 142 "VPreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 143 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 144 "VPreLex.l"
{ yy_pop_state();
			  if (LEXP->m_parenLevel || LEXP->m_defQuote) { LEXP->m_defQuote=false; appendDefValue(VPreLextext,VPreLexleng); VPreLexleng=0; }
			  else return (VP_STRING); }
	YY_BREAK
/* Stringification */
case 21:
YY_RULE_SETUP
#line 149 "VPreLex.l"
{ yy_push_state(STRIFY); return VP_STRIFY; }
	YY_BREAK
case YY_STATE_EOF(STRIFY):
#line 150 "VPreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated '\""); VPreLexleng=0; yyterminate(); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 151 "VPreLex.l"
{ return VP_BACKQUOTE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 152 "VPreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 153 "VPreLex.l"
{ yy_pop_state(); return VP_STRIFY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "VPreLex.l"
{ return (VP_SYMBOL); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 155 "VPreLex.l"
{ VPreLexleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 156 "VPreLex.l"
{ return (VP_DEFREF); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 157 "VPreLex.l"
{ VPreLexleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 158 "VPreLex.l"
{ VPreLexleng-=2; return (VP_JOIN); }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 159 "VPreLex.l"
{ linenoInc(); VPreLextext=(char*)"\n"; VPreLexleng=1; return(VP_WHITE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 160 "VPreLex.l"
{ return (VP_WHITE); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 161 "VPreLex.l"
{ }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 162 "VPreLex.l"
{ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 163 "VPreLex.l"
{ return (VP_TEXT); }
	YY_BREAK
/* Protected blocks */
case 35:
YY_RULE_SETUP
#line 166 "VPreLex.l"
{ yy_push_state(PRTMODE); yymore(); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "VPreLex.l"
{ yy_push_state(PRTMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(PRTMODE):
#line 168 "VPreLex.l"
{ linenoInc(); yyerrorf("EOF in `protected"); VPreLexleng=0; yyterminate(); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 169 "VPreLex.l"
{ linenoInc(); return VP_TEXT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 170 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 171 "VPreLex.l"
{ yy_pop_state(); return VP_TEXT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 172 "VPreLex.l"
{ yy_pop_state(); return VP_TEXT; }
	YY_BREAK
/* Pass-through include <> filenames */
case YY_STATE_EOF(INCMODE):
#line 175 "VPreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated include filename"); VPreLexleng=0; yyterminate(); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 176 "VPreLex.l"
{ linenoInc(); yyerrorf("Unterminated include filename"); BEGIN(INITIAL); }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 177 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 178 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 179 "VPreLex.l"
{ yy_pop_state(); return VP_STRING; }
	YY_BREAK
/* Reading definition formal parenthesis (or not) to begin formal arguments */
/* Note '(' must IMMEDIATELY follow definition name */
case 45:
YY_RULE_SETUP
#line 183 "VPreLex.l"
{ appendDefValue("(",1); LEXP->m_formalLevel=1; BEGIN(DEFFORM); }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 184 "VPreLex.l"
{ yy_pop_state(); unput('\n'); VPreLexleng=0; return VP_DEFFORM; } /* DEFVAL will later grab the return */
	YY_BREAK
case YY_STATE_EOF(DEFFPAR):
#line 185 "VPreLex.l"
{ yy_pop_state(); return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 186 "VPreLex.l"
{ yy_pop_state(); unput(VPreLextext[VPreLexleng-1]); VPreLexleng=0; return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
/* Reading definition formals (declaration of a define) */
case 48:
YY_RULE_SETUP
#line 189 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); VPreLexleng=0; ++LEXP->m_formalLevel; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 190 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); VPreLexleng=0; if ((--LEXP->m_formalLevel)==0) { yy_pop_state(); return VP_DEFFORM; } }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 191 "VPreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 192 "VPreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 193 "VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFFORM):
#line 194 "VPreLex.l"
{ linenoInc(); yy_pop_state(); yyerrorf("Unterminated ( in define formal arguments."); VPreLexleng=0; return VP_DEFFORM; }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 195 "VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); } /* Include return so can maintain output line count */
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 196 "VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Include return so can maintain output line count */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 197 "VPreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(STRMODE); yymore(); }  /* Legal only in default values */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 198 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 199 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 200 "VPreLex.l"
{ LEXP->m_formalLevel++; appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 201 "VPreLex.l"
{ LEXP->m_formalLevel--; appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
case 60:
#line 203 "VPreLex.l"
case 61:
#line 204 "VPreLex.l"
case 62:
YY_RULE_SETUP
#line 204 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
/* Reading definition value (declaration of a define's text) */
case 63:
YY_RULE_SETUP
#line 207 "VPreLex.l"
{ LEXP->m_defCmtSlash=false; yy_push_state(DEFCMT); yymore(); }  /* Special comment parser */
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 208 "VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); }  /* Spec says // not part of define value */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 209 "VPreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 210 "VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFVAL):
#line 211 "VPreLex.l"
{ linenoInc(); yy_pop_state(); VPreLextext=(char*)"\n"; VPreLexleng=1; return (VP_DEFVALUE); } /* Technically illegal, but people complained */
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 212 "VPreLex.l"
{ linenoInc(); yy_pop_state(); VPreLextext=(char*)"\n"; VPreLexleng=1; return (VP_DEFVALUE); }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 213 "VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Return, AND \ is part of define value */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 214 "VPreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 70:
#line 216 "VPreLex.l"
case 71:
#line 217 "VPreLex.l"
case 72:
YY_RULE_SETUP
#line 217 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
/* Comments inside define values - if embedded get added to define value per spec */
/* - if no \{crnl} ending then the comment belongs to the next line, as a non-embedded comment */
/* - if all but (say) 3rd line is missing \ then it's indeterminate */
case 73:
YY_RULE_SETUP
#line 222 "VPreLex.l"
{ yy_pop_state(); appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 223 "VPreLex.l"
{ linenoInc(); LEXP->m_defCmtSlash=true;
	 		  appendDefValue(VPreLextext,VPreLexleng-2); appendDefValue((char*)"\n",1); }  /* Return but not \ */
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 225 "VPreLex.l"
{ linenoInc(); yymore(); if (LEXP->m_defCmtSlash) yyerrorf("One line of /* ... */ is missing \\ before newline");
			  BEGIN(CMTMODE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 227 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 228 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(DEFCMT):
#line 229 "VPreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); VPreLexleng=0; yyterminate(); }
	YY_BREAK
/* Define arguments (use of a define) */
case 78:
YY_RULE_SETUP
#line 232 "VPreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 233 "VPreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 234 "VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(ARGMODE):
#line 235 "VPreLex.l"
{ yyerrorf("EOF in define argument list\n"); VPreLexleng = 0; yyterminate(); }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 236 "VPreLex.l"
{ linenoInc(); VPreLextext=(char*)"\n"; VPreLexleng=1; return(VP_WHITE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 237 "VPreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 238 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }  /* Literal text */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 239 "VPreLex.l"
{ return(VP_STRIFY); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 240 "VPreLex.l"
{ LEXP->m_parenLevel++; appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 241 "VPreLex.l"
{ LEXP->m_parenLevel--; appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 242 "VPreLex.l"
{ LEXP->m_parenLevel++;
			  // Note paren level 0 means before "(" of starting args
			  // Level 1 means "," between arguments
			  // Level 2+ means one argument's internal ()
			  if (LEXP->m_parenLevel>1) {
			      appendDefValue(VPreLextext,VPreLexleng);
			  } else {
			      return (VP_TEXT);
			}}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 251 "VPreLex.l"
{ LEXP->m_parenLevel--;
			  if (LEXP->m_parenLevel>0) {
			      appendDefValue(VPreLextext,VPreLexleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 257 "VPreLex.l"
{ if (LEXP->m_parenLevel>1) {
			      appendDefValue(VPreLextext,VPreLexleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 262 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 263 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 264 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 93:
#line 266 "VPreLex.l"
case 94:
YY_RULE_SETUP
#line 266 "VPreLex.l"
{ appendDefValue(VPreLextext,VPreLexleng); }
	YY_BREAK
/* Translate offs.  Note final newline not included */
case 95:
YY_RULE_SETUP
#line 269 "VPreLex.l"
{
			  if (LEXP->m_synthesis) { yy_push_state(OFFMODE); }
			  return(VP_COMMENT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 272 "VPreLex.l"
{
			  if (LEXP->m_synthesis) { yy_pop_state(); }
			  return(VP_COMMENT); }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 275 "VPreLex.l"
{ linenoInc(); yymore(); }  /* Need to end the / / */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 276 "VPreLex.l"
{ }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 277 "VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(OFFMODE):
#line 278 "VPreLex.l"
{ yyerrorf("EOF in '/*synthesis translate_off*/' region\n"); VPreLexleng=0; yyterminate(); }
	YY_BREAK
/* One line comments. Note final newline not included */
case 100:
YY_RULE_SETUP
#line 281 "VPreLex.l"
{ return (VP_COMMENT); }
	YY_BREAK
/* C-style comments. */
/**** See also DEFCMT */
case 101:
YY_RULE_SETUP
#line 285 "VPreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 286 "VPreLex.l"
{ yy_pop_state(); return(VP_COMMENT); }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 287 "VPreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 288 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 289 "VPreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(CMTMODE):
#line 290 "VPreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); VPreLexleng=0; yyterminate(); }
	YY_BREAK
/* Define calls */
/* symbdef prevents normal lex rules from making `\`"foo a symbol {`"foo} instead of a BACKQUOTE */
case 106:
YY_RULE_SETUP
#line 294 "VPreLex.l"
{ return (VP_DEFREF); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 295 "VPreLex.l"
{ VPreLexleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 296 "VPreLex.l"
{ VPreLexleng-=2; return (VP_JOIN); }
	YY_BREAK
/* Generics */
case YY_STATE_EOF(INITIAL):
#line 299 "VPreLex.l"
{ yyterminate(); }  /* A "normal" EOF */
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 300 "VPreLex.l"
{ linenoInc(); VPreLextext=(char*)"\n"; VPreLexleng=1; return(VP_WHITE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 301 "VPreLex.l"
{ return (VP_SYMBOL); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 302 "VPreLex.l"
{ VPreLexleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 303 "VPreLex.l"
{ VPreLexleng-=2; return (VP_JOIN); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 304 "VPreLex.l"
{ }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 305 "VPreLex.l"
{ if (!keepWhitespace()) { VPreLextext=(char*)" "; VPreLexleng=1; } return VP_WHITE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 306 "VPreLex.l"
{ }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 307 "VPreLex.l"
{ return (VP_TEXT); }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 309 "VPreLex.l"
{ yymore(); }	/* Prevent hitting ECHO; */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 310 "VPreLex.l"
ECHO;
	YY_BREAK
#line 2146 "VPreLex_pretmp.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed VPreLexin at a new source and called
			 * VPreLexlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = VPreLexin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( VPreLexwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * VPreLextext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of VPreLexlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					VPreLexrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			VPreLexrestart(VPreLexin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) VPreLexrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 600 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 600 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 599);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up VPreLextext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					VPreLexrestart(VPreLexin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( VPreLexwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve VPreLextext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void VPreLexrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        VPreLexensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            VPreLex_create_buffer(VPreLexin,YY_BUF_SIZE );
	}

	VPreLex_init_buffer(YY_CURRENT_BUFFER,input_file );
	VPreLex_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void VPreLex_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		VPreLexpop_buffer_state();
	 *		VPreLexpush_buffer_state(new_buffer);
     */
	VPreLexensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	VPreLex_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (VPreLexwrap()) processing, but the only time this flag
	 * is looked at is after VPreLexwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void VPreLex_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	VPreLexin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE VPreLex_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) VPreLexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in VPreLex_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) VPreLexalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in VPreLex_create_buffer()" );

	b->yy_is_our_buffer = 1;

	VPreLex_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with VPreLex_create_buffer()
 * 
 */
    void VPreLex_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		VPreLexfree((void *) b->yy_ch_buf  );

	VPreLexfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a VPreLexrestart() or at EOF.
 */
    static void VPreLex_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	VPreLex_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then VPreLex_init_buffer was _probably_
     * called from VPreLexrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void VPreLex_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		VPreLex_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void VPreLexpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	VPreLexensure_buffer_stack();

	/* This block is copied from VPreLex_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from VPreLex_switch_to_buffer. */
	VPreLex_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void VPreLexpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	VPreLex_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		VPreLex_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void VPreLexensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)VPreLexalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in VPreLexensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)VPreLexrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in VPreLexensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE VPreLex_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) VPreLexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in VPreLex_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	VPreLex_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to VPreLexlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       VPreLex_scan_bytes() instead.
 */
YY_BUFFER_STATE VPreLex_scan_string (yyconst char * yystr )
{
    
	return VPreLex_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to VPreLexlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE VPreLex_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) VPreLexalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in VPreLex_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = VPreLex_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in VPreLex_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) VPreLexalloc(new_size  );

		else
			(yy_start_stack) = (int *) VPreLexrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up VPreLextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		VPreLextext[VPreLexleng] = (yy_hold_char); \
		(yy_c_buf_p) = VPreLextext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		VPreLexleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int VPreLexget_lineno  (void)
{
        
    return VPreLexlineno;
}

/** Get the input stream.
 * 
 */
FILE *VPreLexget_in  (void)
{
        return VPreLexin;
}

/** Get the output stream.
 * 
 */
FILE *VPreLexget_out  (void)
{
        return VPreLexout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t VPreLexget_leng  (void)
{
        return VPreLexleng;
}

/** Get the current token.
 * 
 */

char *VPreLexget_text  (void)
{
        return VPreLextext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void VPreLexset_lineno (int  _line_number )
{
    
    VPreLexlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see VPreLex_switch_to_buffer
 */
void VPreLexset_in (FILE *  _in_str )
{
        VPreLexin = _in_str ;
}

void VPreLexset_out (FILE *  _out_str )
{
        VPreLexout = _out_str ;
}

int VPreLexget_debug  (void)
{
        return VPreLex_flex_debug;
}

void VPreLexset_debug (int  _bdebug )
{
        VPreLex_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from VPreLexlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    VPreLexin = stdin;
    VPreLexout = stdout;
#else
    VPreLexin = (FILE *) 0;
    VPreLexout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * VPreLexlex_init()
     */
    return 0;
}

/* VPreLexlex_destroy is for both reentrant and non-reentrant scanners. */
int VPreLexlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		VPreLex_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		VPreLexpop_buffer_state();
	}

	/* Destroy the stack itself. */
	VPreLexfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        VPreLexfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * VPreLexlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *VPreLexalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *VPreLexrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void VPreLexfree (void * ptr )
{
			free( (char *) ptr );	/* see VPreLexrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 310 "VPreLex.l"



void VPreLex::pushStateDefArg(int level) {
    // Enter define substitution argument state
    yy_push_state(ARGMODE);
    m_parenLevel = level;
    m_defValue = "";
}

void VPreLex::pushStateDefForm() {
    // Enter define formal arguments state
    yy_push_state(DEFFPAR);  // First is an optional ( to begin args
    m_parenLevel = 0;
    m_defValue = "";
}

void VPreLex::pushStateDefValue() {
    // Enter define value state
    yy_push_state(DEFVAL);
    m_parenLevel = 0;
    m_defValue = "";
}

void VPreLex::pushStateIncFilename() {
    // Enter include <> filename state
    yy_push_state(INCMODE);
    yymore();
}

void VPreLex::debug(int level) {
#ifdef FLEX_DEBUG
    VPreLex_flex_debug=level;
#endif
}
int VPreLex::debug() {
#ifdef FLEX_DEBUG
    return VPreLex_flex_debug;
#else
    return 0;
#endif
}

int VPreLex::lex() {
    VPreLex::s_currentLexp = this;  // Tell parser where to get/put data
    m_tokFilelinep = curFilelinep();  // Remember token start location, may be updated by the lexer later
    return VPreLexlex();
}

size_t VPreLex::inputToLex(char* buf, size_t max_size) {
    // We need a custom YY_INPUT because we can't use flex buffers.
    // Flex buffers are limited to 2GB, and we can't chop into 2G pieces
    // because buffers can't end in the middle of tokens.
    // Note if we switched streams here (which we don't) "buf" would be
    // become a stale invalid pointer.
    //
    VPreStream* streamp = curStreamp();
    if (debug()>=10) { cout<<"-  pp:inputToLex ITL s="<<max_size<<" bs="<<streamp->m_buffers.size()<<endl;  dumpStack(); }
    // For testing, use really small chunks
    //if (max_size > 13) max_size=13;
  again:
    size_t got = 0;
    // Get from this stream
    while (got < max_size	// Haven't got enough
	   && !streamp->m_buffers.empty()) {	// And something buffered
	string front = curStreamp()->m_buffers.front(); streamp->m_buffers.pop_front();
	size_t len = front.length();
	if (len > (max_size-got)) {  // Front string too big
	    len = (max_size-got);
	    string remainder = front.substr(len);
	    front = front.substr(0, len);
	    streamp->m_buffers.push_front(remainder);  // Put back remainder for next time
	}
	strncpy(buf+got, front.c_str(), len);
	got += len;
    }
    if (!got) { // end of stream; try "above" file
	bool again=false;
	string forceOut = endOfStream(again/*ref*/);
	streamp = curStreamp();  // May have been updated
	if (forceOut != "") {
	    if (forceOut.length() > max_size) {
		yyerrorf("Output buffer too small for a `line");
	    } else {
		got = forceOut.length();
		strncpy(buf, forceOut.c_str(), got);
	    }
	} else {
	    if (streamp->m_eof) {
		if (debug()) cout<<"-  EOF\n";
	    }
	    got = 0;  // 0=EOF/EOS - although got was already 0.
	    if (again) goto again;
	}
    }
    if (debug()>=10) { cout<<"-  pp::inputToLex  got="<<got<<" '"<<string(buf,got)<<"'"<<endl; }
    return got;
}

string VPreLex::endOfStream(bool& againr) {
    // Switch to file or next unputString
    againr = false;
    if (debug()) cout<<"-EOS state="<<curStreamp()->m_termState<<" at "<<curFilelinep()<<endl;
    if (curStreamp()->m_eof) return "";   // Don't delete the final "EOF" stream
    bool exited_file = curStreamp()->m_file;
    if (!exited_file) {
	// Midpoint of stream, just change buffers
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	againr = true;
	return "";
    }
    // Multiple steps because we need FLEX to see ending \n and EOS to end
    // any illegal states, like an unterminated `protected region
    else if (!curStreamp()->m_termState) {
	// First shutdown phase for a file
	// Terminate all files with a newline.  This prevents problems if
	// the user had a define without a terminating newline,
	// otherwise the resumed file's next line would get tacked on.
	// Also makes it likely the `line that changes files comes out
	// immediately.
	curStreamp()->m_termState = 1;
	return "\n";  // Exit old file
    }
    else if (curStreamp()->m_termState == 1) {
	// Now the EOF - can't be sent with other characters
	curStreamp()->m_termState = 2;
	return "";  // End of file
    }
    else if (curStreamp()->m_termState == 2) {
	// Now ending `line
	curStreamp()->m_termState = 3;
	return curFilelinep()->lineDirectiveStrg(2);  // Exit old file
    }
    else {
	// Final shutdown phase for a stream, we can finally change the
	// current fileline to the new stream
	curStreamp()->m_termState = 0;
	VFileLine* filelinep = curFilelinep();
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	if (curStreamp()->m_eof) {
	    // EOF doesn't have a "real" fileline, but a linenumber of 0 from init time
	    // Inherit whatever we last parsed so it's more obvious.
	    curFilelinep(filelinep);
	}
	// The caller parser remembered the start location for the text we are parsing,
	// but we've discovered there was a file switch along the way, so update it.
	m_tokFilelinep = curFilelinep();
	//
	if (curStreamp()->m_eof) {
	    return "";
	} else {
	    return curFilelinep()->lineDirectiveStrg(0);  // Reenter resumed file
	}
    }
}

void VPreLex::initFirstBuffer(VFileLine* filelinep) {
    // Called from constructor to make first buffer
    // VPreLex_create_buffer also sets yy_fill_buffer=1 so reads from YY_INPUT
    VPreStream* streamp = new VPreStream(filelinep, this);
    streamp->m_eof = true;
    m_streampStack.push(streamp);
    //
    m_bufferState = VPreLex_create_buffer(NULL,YY_BUF_SIZE);
    VPreLex_switch_to_buffer(m_bufferState);
    VPreLexrestart(NULL);
}

void VPreLex::scanNewFile(VFileLine* filelinep) {
    // Called on new open file.  scanBytesBack will be called next.
    if (streamDepth() > VPreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// The recursive `include in VPreProcImp should trigger first
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(filelinep, this);
	m_tokFilelinep = curFilelinep();
	streamp->m_file = true;
	scanSwitchStream(streamp);
    }
}

void VPreLex::scanBytes(const string& str) {
    // Note buffers also appended in ::scanBytesBack
    // Not "m_buffers.push_front(string(strp,len))" as we need a `define
    // to take effect immediately, in the middle of the current buffer
    // Also we don't use scan_bytes that would set yy_fill_buffer
    // which would force Flex to bypass our YY_INPUT routine.
    if (streamDepth() > VPreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// More streams if recursive `define with complex insertion
	// More buffers mostly if something internal goes funky
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(curFilelinep(), this);
	streamp->m_buffers.push_front(str);
	scanSwitchStream(streamp);
    }
}

void VPreLex::scanSwitchStream(VPreStream* streamp) {
    curStreamp()->m_buffers.push_front(currentUnreadChars());
    m_streampStack.push(streamp);
    VPreLexrestart(NULL);
}

void VPreLex::scanBytesBack(const string& str) {
    // Initial creation, that will pull from YY_INPUT==inputToLex
    // Note buffers also appended in ::scanBytes
    if (curStreamp()->m_eof) yyerrorf("scanBytesBack without being under scanNewFile");
    curStreamp()->m_buffers.push_back(str);
}

string VPreLex::currentUnreadChars() {
    // WARNING - Peeking at internals
    if (!currentBuffer()) return "";
    ssize_t left = (yy_n_chars - (yy_c_buf_p - currentBuffer()->yy_ch_buf));
    if (left > 0) {  // left may be -1 at EOS
	*(yy_c_buf_p) = (yy_hold_char);
	return string(yy_c_buf_p, left);
    } else {
	return "";
    }
}

YY_BUFFER_STATE VPreLex::currentBuffer() {
    return YY_CURRENT_BUFFER;
}

int VPreLex::currentStartState() {
    return YY_START;
}

void VPreLex::dumpSummary() {
    cout<<"-  pp::dumpSummary  curBuf="<<(void*)(currentBuffer());
#ifdef FLEX_DEBUG  // Else peeking at internals may cause portability issues
    ssize_t left = (yy_n_chars
		    - (yy_c_buf_p
		       -currentBuffer()->yy_ch_buf));
    cout<<" left="<<dec<<left;
#endif
    cout<<endl;
}

void VPreLex::dumpStack() {
    // For debug use
    dumpSummary();
    stack<VPreStream*> tmpstack = LEXP->m_streampStack;
    while (!tmpstack.empty()) {
	VPreStream* streamp = tmpstack.top();
	cout<<"-    bufferStack["<<(void*)(streamp)<<"]: "
	    <<" at="<<streamp->m_curFilelinep
	    <<" nBuf="<<streamp->m_buffers.size()
	    <<" size0="<<(streamp->m_buffers.empty() ? 0 : streamp->m_buffers.front().length())
	    <<(streamp->m_eof?" [EOF]":"")
	    <<(streamp->m_file?" [FILE]":"");
	cout<<endl;
	tmpstack.pop();
    }
}

string VPreLex::cleanDbgStrg(const string& in) {
    string out = in;
    string::size_type pos;
    while ((pos=out.find("\n")) != string::npos) { out.replace(pos, 1, "\\n"); }
    while ((pos=out.find("\r")) != string::npos) { out.replace(pos, 1, "\\r"); }
    return out;
}

void VPreLex::unused() {
    if (0) {
	// Prevent unused warnings
	yy_top_state();
    }
}

/*###################################################################
 * Local Variables:
 * mode: C++
 * End:
 */

