NAME
    File::Trash::Undoable - Trash files, with undo/redo capability

VERSION
    This document describes version 0.231 of File::Trash::Undoable (from
    Perl distribution File-Trash-Undoable), released on 2023-11-21.

SYNOPSIS
     # use the trash-u script

DESCRIPTION
    This module provides routines to trash files, with undo/redo support.
    Actual trashing/untrashing is provided by File::Trash::FreeDesktop.

    Screenshots:

FUNCTIONS
  empty_trash
    Usage:

     empty_trash() -> [$status_code, $reason, $payload, \%result_meta]

    Empty trash.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  list_trash_contents
    Usage:

     list_trash_contents() -> [$status_code, $reason, $payload, \%result_meta]

    List contents of trash directory.

    This function is not exported.

    No arguments.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  trash
    Usage:

     trash(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Trash a file.

    Fixed state: path does not exist.

    Fixable state: path exists.

    This function is not exported.

    This function is idempotent (repeated invocations with same arguments
    has the same effect as single invocation). This function supports
    transactions.

    Arguments ('*' denotes required arguments):

    *   path* => *str*

        (No description)

    *   suffix => *str*

        (No description)

    Special arguments:

    *   -tx_action => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_action_id => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_recovery => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_rollback => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_v => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  trash_files
    Usage:

     trash_files(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Trash files (with undo support).

    This function is not exported.

    This function is idempotent (repeated invocations with same arguments
    has the same effect as single invocation). This function supports
    transactions.

    Arguments ('*' denotes required arguments):

    *   files* => *array[str]*

        Files/dirs to delete.

        Files must exist.

    Special arguments:

    *   -tx_action => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_action_id => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_recovery => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_rollback => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_v => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

  untrash
    Usage:

     untrash(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Untrash a file.

    Fixed state: path exists.

    Fixable state: Path does not exist (and exists in trash, and if suffix
    is specified, has the same suffix).

    This function is not exported.

    This function is idempotent (repeated invocations with same arguments
    has the same effect as single invocation). This function supports
    transactions.

    Arguments ('*' denotes required arguments):

    *   path* => *str*

        (No description)

    *   suffix => *str*

        (No description)

    Special arguments:

    *   -tx_action => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_action_id => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_recovery => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_rollback => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    *   -tx_v => *str*

        For more information on transaction, see L<Rinci::Transaction>.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/File-Trash-Undoable>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-File-Trash-Undoable>.

SEE ALSO
    *   gvfs-trash

        A command-line utility, part of the GNOME project.

    *   trash-cli, https://github.com/andreafrancia/trash-cli

        A Python-based command-line application. Also follows
        freedesktop.org trash specification.

    *   rmv, http://code.google.com/p/rmv/

        A bash script. Features undo ("rollback"). At the time of this
        writing, does not support per-filesystem trash (everything goes into
        home trash).

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTOR
    Steven Haryanto <stevenharyanto@gmail.com>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2023, 2020, 2017, 2016, 2015, 2014, 2013,
    2012 by perlancar <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=File-Trash-Undoable>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

