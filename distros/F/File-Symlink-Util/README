NAME
    File::Symlink::Util - Utilities related to symbolic links

VERSION
    This document describes version 0.003 of File::Symlink::Util (from Perl
    distribution File-Symlink-Util), released on 2023-06-30.

SYNOPSIS
     use File::Symlink::Util qw(
                           symlink_rel
                           symlink_abs
                           adjust_rel_symlink
                           check_symlink
     );

     chdir "/home/ujang";

     # create a relative path symlink
     symlink_rel "/etc/passwd", "symlink1";      # symlink1 -> ../../etc/passwd
     symlink_rel "../../etc/passwd", "symlink1"; # symlink1 -> ../../etc/passwd

     # create an absolute path symlink
     symlink_abs "/etc/passwd", "symlink1";      # symlink1 -> ../../etc/passwd
     symlink_abs "../../etc/passwd", "symlink1"; # symlink1 -> ../../etc/passwd

     # adjust second symlink to be relative to the second path
     symlink "dir1/target", "symlink1";
     % cp -a  "symlink1", "dir2/symlink2";           # dir2/symlink2 points to dir1/target, which is now broken
     adjust_rel_symlink "symlink1", "dir2/symlink2"; # dir2/symlink2 is now fixed, points to ../dir1/target

     # check various aspects of a symlink
     my $res = check_symlink(symlink => "symlink1");                                     # => [200, "OK", []]
     my $res = check_symlink(symlink => "not-a-symlink");                                # => [500, "Errors", ["File is not a symlink"]]
     my $res = check_symlink(symlink => "link-to-a-pic.txt", is_abs=>1, ext_matches=>1); # => [500, "Errors", ["Symlink target is not absolute path", "Extension of symlink does not match target's (jpg)"]]

DESCRIPTION
FUNCTIONS
  symlink_rel
    Usage:

     symlink_rel($dest_path, $link_path);

    Create a relative path symlink. Basically perform
    "File::Spec->abs2rel($dest_path)" before "symlink()".

  symlink_abs
    Usage:

     symlink_rel($dest_path, $link_path);

    Create an absolute path symlink. Basically perform
    "File::Spec->rel2abs($dest_path)" before "symlink()".

  adjust_rel_symlink
    Usage:

     adjust_rel_symlink($link_path1, $link_path2);

    Adjust relative symlink in $link_path2 (that used to be relative to
    $link_path1) so that its target now becomes relative to $link_path2.

    This is useful if you copy a relative symlink e.g. $link_path1 to
    $link_path2. Because the target is not adjusted, and you want the new
    symlink to point to the original target. See example in Synopsis for
    illustration.

    Both $link_path1 and $link_path2 must be symlink.

  check_symlink
    Usage:

     check_symlink(%args) -> [$status_code, $reason, $payload, \%result_meta]

    Perform various checks on a symlink.

    This function is not exported by default, but exportable.

    Arguments ('*' denotes required arguments):

    *   content_matches => *bool*

        Whether content should match extension.

        If set to true, will guess media type from content and check that
        file extension exists nd matches the media type. Requires
        File::MimeInfo::Magic, which is only specified as a "Recommends"
        dependency by File-Symlink-Util distribution.

    *   ext_matches => *bool*

        Whether extension should match.

        If set to true, then if both symlink name and target filename
        contain filename extension (e.g. "jpg") then they must match. Case
        variation is allowed (e.g. "JPG") but other variation is not (e.g.
        "jpeg").

    *   is_abs => *bool*

        Whether we should check that symlink target is an absolute path.

        If set to true, then symlink target must be an absolute path. If set
        to false, then symlink target must be a relative path.

    *   symlink* => *filename*

        Path to the symlink to be checked.

    *   target => *filename*

        Expected target path.

        If specified, then target of symlink (after normalized to absolute
        path) will be checked and must point to this target.

    Returns an enveloped result (an array).

    First element ($status_code) is an integer containing HTTP-like status
    code (200 means OK, 4xx caller error, 5xx function error). Second
    element ($reason) is a string containing error message, or something
    like "OK" if status is 200. Third element ($payload) is the actual
    result, but usually not present when enveloped result is an error
    response ($status_code is not 2xx). Fourth element (%result_meta) is
    called result metadata and is optional, a hash that contains extra
    information, much like how HTTP response headers provide additional
    metadata.

    Return value: (any)

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/File-Symlink-Util>.

SOURCE
    Source repository is at
    <https://github.com/perlancar/perl-File-Symlink-Util>.

SEE ALSO
  Other symlink-related routines
    File::Symlink::Relative provides "symlink_r" to create relative
    symlinks, which is the same as "symlink_rel".

    File::MoreUtil provides "file_exists" and "l_abs_path".

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR,
    Pod::Weaver::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps
    required beyond that are considered a bug and can be reported to me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2023, 2021 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=File-Symlink-Util>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

