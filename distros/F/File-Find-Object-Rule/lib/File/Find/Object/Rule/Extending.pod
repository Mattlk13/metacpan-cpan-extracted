

__END__

=pod

=encoding UTF-8

=head1 VERSION

version 0.0311

=head1 SYNOPSIS

    package File::Find::Object::Rule::Random;

    use strict;
    use warnings;

    # take useful things from File::Find::Object::Rule
    use base 'File::Find::Object::Rule';

    # and force our crack into the main namespace
    sub File::Find::Object::Rule::random () {
        my $self = shift()->_force_object;
        $self->exec( sub { rand > 0.5 } );
    }

    1;

=head1 DESCRIPTION

L<File::Find::Object::Rule> inherits L<File::Find::Rule>'s extensibility. It
is now possible to extend it, using the following conventions.

=head2 Declare your package

    package File::Find::Object::Rule::Random;

    use strict;
    use warnings;

=head2 Inherit methods from File::Find::Object::Rule

    # take useful things from File::Find::Object::Rule
    use base 'File::Find::Object::Rule';

=head3 Force your madness into the main package

    # and force our crack into the main namespace
    sub File::Find::Object::Rule::random () {
        my $self = shift()->_force_object;
        $self->exec( sub { rand > 0.5 } );
    }

Yes, we're being very cavalier here and defining things into the main
File::Find::Object::Rule namespace.  This is due to lack of imaginiation on my
part - I simply can't find a way for the functional and oo interface
to work without doing this or some kind of inheritance, and
inheritance stops you using two File::Find::Object::Rule::Foo modules
together.

For this reason try and pick distinct names for your extensions.  If
this becomes a problem then I may institute a semi-official registry
of taken names.

=head2 Taking no arguments.

Note the null prototype on random.  This is a cheat for the procedural
interface to know that your sub takes no arguments, and so allows this
to happen:

 find( random => in => '.' );

If you hadn't declared C<random> with a null prototype it would have
consumed C<in> as a parameter to it, then got all confused as it
doesn't know about a C<'.'> rule.

=head1 NAME

File::Find::Object::Rule::Extending - the mini-guide to extending File::Find::Object::Rule

=head1 NOTES ABOUT THE CALLBACK

The callback can access the L<File::Find::Object::Result> using
C<<< $self->finder->item_obj() >>>.

=head1 AUTHOR

Richard Clamp <richardc@unixbeard.net>

=head1 COPYRIGHT

Copyright (C) 2002 Richard Clamp.  All Rights Reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 SEE ALSO

L<File::Find::Object::Rule>

L<File::Find::::Rule::MMagic> was the first extension module for
L<File::Find::Rule>, so maybe check that out.

=for :stopwords cpan testmatrix url annocpan anno bugtracker rt cpants kwalitee diff irc mailto metadata placeholders metacpan

=head1 SUPPORT

=head2 Websites

The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.

=over 4

=item *

MetaCPAN

A modern, open-source CPAN search engine, useful to view POD in HTML format.

L<https://metacpan.org/release/File-Find-Object-Rule>

=item *

Search CPAN

The default CPAN search engine, useful to view POD in HTML format.

L<http://search.cpan.org/dist/File-Find-Object-Rule>

=item *

RT: CPAN's Bug Tracker

The RT ( Request Tracker ) website is the default bug/issue tracking system for CPAN.

L<https://rt.cpan.org/Public/Dist/Display.html?Name=File-Find-Object-Rule>

=item *

AnnoCPAN

The AnnoCPAN is a website that allows community annotations of Perl module documentation.

L<http://annocpan.org/dist/File-Find-Object-Rule>

=item *

CPAN Ratings

The CPAN Ratings is a website that allows community ratings and reviews of Perl modules.

L<http://cpanratings.perl.org/d/File-Find-Object-Rule>

=item *

CPANTS

The CPANTS is a website that analyzes the Kwalitee ( code metrics ) of a distribution.

L<http://cpants.cpanauthors.org/dist/File-Find-Object-Rule>

=item *

CPAN Testers

The CPAN Testers is a network of smoke testers who run automated tests on uploaded CPAN distributions.

L<http://www.cpantesters.org/distro/F/File-Find-Object-Rule>

=item *

CPAN Testers Matrix

The CPAN Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.

L<http://matrix.cpantesters.org/?dist=File-Find-Object-Rule>

=item *

CPAN Testers Dependencies

The CPAN Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.

L<http://deps.cpantesters.org/?module=File::Find::Object::Rule>

=back

=head2 Bugs / Feature Requests

Please report any bugs or feature requests by email to C<bug-file-find-object-rule at rt.cpan.org>, or through
the web interface at L<https://rt.cpan.org/Public/Bug/Report.html?Queue=File-Find-Object-Rule>. You will be automatically notified of any
progress on the request by the system.

=head2 Source Code

The code is open to the world, and available for you to hack on. Please feel free to browse it and play
with it, or whatever. If you want to contribute patches, please send me a diff or prod me to pull
from your repository :)

L<https://github.com/shlomif/http://bitbucket.org/shlomif/perl-file-find-object-rule>

  git clone git://github.com/shlomif/http://bitbucket.org/shlomif/perl-file-find-object-rule.git

=head1 AUTHORS

=over 4

=item *

Richard Clamp <richardc@unixbeard.net>

=item *

Andy Lester andy@petdance.com.

=back

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website
L<https://github.com/shlomif/http://bitbucket.org/shlomif/perl-file-find-object-rule/issues>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2019 by Richard Clamp.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
