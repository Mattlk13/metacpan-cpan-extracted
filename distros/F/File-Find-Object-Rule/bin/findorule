#!/usr/bin/env perl

use strict;
use warnings;

use File::Find::Object::Rule;
use File::Spec::Functions qw(catdir);

# bootstrap extensions
for (@INC)
{
    my $dir = catdir( $_, qw( File Find Rule ) );
    next unless -d $dir;
    my @pm = find(
        name     => '*.pm',
        maxdepth => 1,
        exec     => sub {
            my $name = $_[0];
            $name =~ s/\.pm$//;
            eval "require File::Find::Object::Rule::$name";
        },
        in => $dir
    );
}

# what directories are we searching in?
my @where;
while (@ARGV)
{
    local $_ = shift @ARGV;
    if (/^-/)
    {
        unshift @ARGV, $_;
        last;
    }
    push @where, $_;
}

# parse arguments, build a rule object
my $rule = new File::Find::Object::Rule;
while (@ARGV)
{
    my $clause = shift @ARGV;

    unless ( $clause =~ s/^-// && $rule->can($clause) )
    {
        # not a known rule - complain about this
        die "unknown option '$clause'\n";
    }

    # it was the last switch
    unless (@ARGV)
    {
        $rule->$clause();
        next;
    }

    # consume the parameters
    my $param = shift @ARGV;

    if ( $param =~ /^-/ )
    {
        # it's the next switch - put it back, and add one with no params
        unshift @ARGV, $param;
        $rule->$clause();
        next;
    }

    if ( $param eq '(' )
    {
        # multiple values - just look for the closing parenthesis
        my @p;
        while (@ARGV)
        {
            my $val = shift @ARGV;
            last if $val eq ')';
            push @p, $val;
        }
        $rule->$clause(@p);
        next;
    }

    # a single argument
    $rule->$clause($param);
}

# add a print rule so things happen faster
$rule->exec( sub { print "$_[2]\n"; return; } );

# profit
$rule->in( @where ? @where : '.' );
exit 0;

__END__

=pod

=encoding UTF-8

=head1 VERSION

version 0.0311

=head1 DESCRIPTION

C<findorule> mostly borrows the interface from GNU find(1) to provide a
command-line interface onto the File::Find::Object::Rule hierarchy of modules.

The syntax for expressions is the rule name, preceded by a dash,
followed by an optional argument.  If the argument is an opening
parenthesis it is taken as a list of arguments, terminated by a
closing parenthesis.

Some examples:

 find -file -name ( foo bar )

files named C<foo> or C<bar>, below the current directory.

 find -file -name foo -bar

files named C<foo>, that have pubs (for this is what our fictitious
C<bar> clause specifies), below the current directory.

 find -file -name ( -bar )

files named C<-bar>, below the current directory.  In this case if
we'd have omitted the parenthesis it would have parsed as a call to
name with no arguments, followed by a call to -bar.

=head2 Supported switches

I'm very slack.  Please consult the File::Find::Object::Rule manpage for now,
and prepend - to the commands that you want.

=head2 Extra bonus switches

findorule automatically loads all of your installed File::Find::Object::Rule::*
extension modules, so check the documentation to see what those would be.

=head1 USAGE

  findorule [path...] [expression]

=head1 NAME

findorule - command line wrapper to File::Find::Object::Rule

=head1 AUTHOR

Richard Clamp <richardc@unixbeard.net> from a suggestion by Tatsuhiko Miyagawa

Adapted to L<File::Find::Object::Rule> by Shlomi Fish (all copyrights
disclaimed).

=head1 COPYRIGHT

Copyright (C) 2002 Richard Clamp.  All Rights Reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 SEE ALSO

L<File::Find::Object::Rule>

=for :stopwords cpan testmatrix url annocpan anno bugtracker rt cpants kwalitee diff irc mailto metadata placeholders metacpan

=head1 SUPPORT

=head2 Websites

The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.

=over 4

=item *

MetaCPAN

A modern, open-source CPAN search engine, useful to view POD in HTML format.

L<https://metacpan.org/release/File-Find-Object-Rule>

=item *

Search CPAN

The default CPAN search engine, useful to view POD in HTML format.

L<http://search.cpan.org/dist/File-Find-Object-Rule>

=item *

RT: CPAN's Bug Tracker

The RT ( Request Tracker ) website is the default bug/issue tracking system for CPAN.

L<https://rt.cpan.org/Public/Dist/Display.html?Name=File-Find-Object-Rule>

=item *

AnnoCPAN

The AnnoCPAN is a website that allows community annotations of Perl module documentation.

L<http://annocpan.org/dist/File-Find-Object-Rule>

=item *

CPAN Ratings

The CPAN Ratings is a website that allows community ratings and reviews of Perl modules.

L<http://cpanratings.perl.org/d/File-Find-Object-Rule>

=item *

CPANTS

The CPANTS is a website that analyzes the Kwalitee ( code metrics ) of a distribution.

L<http://cpants.cpanauthors.org/dist/File-Find-Object-Rule>

=item *

CPAN Testers

The CPAN Testers is a network of smoke testers who run automated tests on uploaded CPAN distributions.

L<http://www.cpantesters.org/distro/F/File-Find-Object-Rule>

=item *

CPAN Testers Matrix

The CPAN Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.

L<http://matrix.cpantesters.org/?dist=File-Find-Object-Rule>

=item *

CPAN Testers Dependencies

The CPAN Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.

L<http://deps.cpantesters.org/?module=File::Find::Object::Rule>

=back

=head2 Bugs / Feature Requests

Please report any bugs or feature requests by email to C<bug-file-find-object-rule at rt.cpan.org>, or through
the web interface at L<https://rt.cpan.org/Public/Bug/Report.html?Queue=File-Find-Object-Rule>. You will be automatically notified of any
progress on the request by the system.

=head2 Source Code

The code is open to the world, and available for you to hack on. Please feel free to browse it and play
with it, or whatever. If you want to contribute patches, please send me a diff or prod me to pull
from your repository :)

L<https://github.com/shlomif/http://bitbucket.org/shlomif/perl-file-find-object-rule>

  git clone git://github.com/shlomif/http://bitbucket.org/shlomif/perl-file-find-object-rule.git

=head1 AUTHORS

=over 4

=item *

Richard Clamp <richardc@unixbeard.net>

=item *

Andy Lester andy@petdance.com.

=back

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website
L<https://github.com/shlomif/http://bitbucket.org/shlomif/perl-file-find-object-rule/issues>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2019 by Richard Clamp.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
