package main;

use strict;
use warnings;

use Mac::Pasteboard qw{:all};
use Test::More 0.88;

use lib qw{ inc };

use My::Module::Test;

set_test_output_encoding;

use constant REGEXP_REF	=> ref qr{};

no if "$]" >= 5.020, feature => qw{ signatures };

sub test_paste (@);	## no critic (ProhibitSubroutinePrototypes)

check_testable;

foreach my $args (
    [],
    [ undef, undef, kPasteboardClipboard ],
    [ 'pbcopy_find', 'pbpaste_find', kPasteboardFind ],
) {
    ( my $putter, my $getter, my $name, my @args ) = @$args;
    my $putsub = __PACKAGE__->can ($putter ||= 'pbcopy');
    my $getsub = __PACKAGE__->can ($getter ||= 'pbpaste');

    my $where = $name || 'the default pasteboard';

    my $pb = defined $name ?
	Mac::Pasteboard->new( $name ) :
	Mac::Pasteboard->new();
    @args
	and $pb->set( @args );
    my $flavor = $pb->get( 'default_flavor' );

    $pb->clear();
    my $data = '    She set out one day';
    $pb->copy ($data);
    test_paste scalar $pb->paste(), $data,
	"Retrieve $flavor data from $where with copy.";

    $data = '    In a relative way';
    flavorize( $putter, $pb->get( 'default_flavor' ) );
    $putsub->($data);
    test_paste scalar $pb->paste(), $data,
	"Retrieve $flavor data from $where with $putter.";

    $data = 'And returned the previous night.';
    $pb->clear();
    $pb->copy ($data);
    flavorize( $getter, $pb->get( 'default_flavor' ) );
    test_paste scalar $getsub->(), $data,
	"Retrieve $flavor data from $where with $getter.";

    CAN_USE_UNICODE
	or next;

    # NON-ASCII BELOW HERE

    note <<'EOD';

The following tests with LATIN SMALL LETTER E WITH ACUTE were added as
a result of reading Felipe Gasper's blog entry "Perl's SvPV Menace" at
https://dev.to/fgasper/perl-s-svpv-menace-5515
EOD

    $data = chr 0xC3;	# LATIN SMALL LETTER E WITH ACUTE

    $pb->clear();
    utf8::downgrade( $data );
    $pb->copy( $data );
    test_paste scalar $pb->paste(), $data,
	"Retrieve downgraded LATIN SMALL LETTER E WITH ACUTE from $where with copy.";

    $pb->clear();
    utf8::upgrade( $data );
    $pb->copy( $data );
    test_paste scalar $pb->paste(), $data,
	"Retrieve upgraded LATIN SMALL LETTER E WITH ACUTE from $where with copy.";

    $pb->clear();
    $data = chr 0x3a3;	# GREEK CAPITAL LETTER SIGMA
    $pb->copy ($data);
    test_paste scalar $pb->paste(), $data,
	"Retrieve $flavor GREEK CAPITAL LETTER SIGMA from $where with copy.";
}

done_testing;

sub test_paste (@) {	## no critic (ProhibitSubroutinePrototypes, RequireArgUnpacking)
    my $got = shift;
    my $want = shift;
    local $Test::Builder::Level = $Test::Builder::Level + 1;
    my $ref = ref $want;
    if ( REGEXP_REF eq $ref ) {
	like $got, $want, "@_"
	    and return 1;
	return hex_diag( $got, $want );
    } elsif (defined $want) {
	is $got, $want, "@_"
	    and return 1;
	return hex_diag( $got, $want );
    } else {
	ok $got, "@_"
	    and return 1;
	return hex_diag( $got );
    }
}

sub flavorize {
    my ( $target, $flavor ) = @_;
    ( my $sub = $target ) =~
	s/ \A pb ( copy | paste ) (?= \z | _ ) /pbflavor/smx;
    my $code = __PACKAGE__->can( $sub )
	or die "Unable to find $sub()";
    $code->( $flavor );
    return;
}

1;

# ex: set filetype=perl textwidth=72 autoindent :
