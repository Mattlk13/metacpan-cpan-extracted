package main;

use strict;
use warnings;

use Mac::Pasteboard qw{:all};
use Test::More 0.88;

use lib qw{ inc };

use My::Module::Test;

set_test_output_encoding;

check_testable 'pbpaste';

my $do_utf = do_utf();

my %pasteboard_info = (
    default	=> {
	putter	=> 'pbcopy',
    },
    general	=> {
	name	=> kPasteboardClipboard,
	pbopt	=> '-pboard general',
	putter	=> 'pbcopy',
    },
    find	=> {
	name	=> kPasteboardFind,
	pbopt	=> '-pboard find',
	putter	=> 'pbcopy_find',
    },
);

foreach my $args (
    [ 'default' ],
    [ 'general' ],
    [ 'general',
	default_flavor	=> 'public.utf16-plain-text',
	encode		=> 1,
    ],
    [ 'find' ],
) {
    my ( $selector, @args ) = @{ $args };
    my $name = pb_name $selector;
    my $putter = pb_putter $selector;
    my $pbopt = pb_opt $selector;
    my $putsub = __PACKAGE__->can( $putter );

    note "\nselector: '$selector'; args: @args";

    my $where = $name || 'the default pasteboard';

    my $pb = defined $name ?
	Mac::Pasteboard->new( $name ) :
	Mac::Pasteboard->new();
    @args
	and $pb->set( @args );
    my $flavor = $pb->get( 'default_flavor' );

    $do_utf
	or not $pb->get( 'encode' )
	or next;

    $pb->clear;
    test_vs_pbpaste $pbopt, '', "Initial clear should leave $where clear.";

    my $data = 'There was a young lady named Bright';
    $pb->copy ($data);
    test_vs_pbpaste $pbopt, $data, "Place text data on $where.";

    $data = {map {$_->{flavor} => $_} $pb->flavors()};
    ok $data->{$flavor},
	"Flavor $flavor should be present on $where";

    $pb->clear;
    test_vs_pbpaste $pbopt, '', "Clear $where again.";

    $data = 'Who could travel much faster than light.';
    $putsub->($data);
    test_vs_pbpaste $pbopt, $data, "Use $putter to put data on $where.";

    $pb->clear;
    test_vs_pbpaste $pbopt, '', "Clear data placed on $where by pbcopy.";

    CAN_USE_UNICODE
	or next;

    # NON-ASCII BELOW HERE

    note <<'EOD';

The following tests with LATIN SMALL LETTER E WITH ACUTE were added as
a result of reading Felipe Gasper's blog entry "Perl's SvPV Menace" at
https://dev.to/fgasper/perl-s-svpv-menace-5515
EOD

    $data = chr 0xC3;	# LATIN SMALL LETTER E WITH ACUTE

    $pb->clear();
    utf8::downgrade( $data );
    $pb->copy( $data );
    test_vs_pbpaste $pbopt, $data,
	"Place downgraded LATIN SMALL LETTER E WITH ACUTE on $where";

    $pb->clear();
    utf8::upgrade( $data );
    $pb->copy( $data );
    test_vs_pbpaste $pbopt, $data,
	"Place upgraded LATIN SMALL LETTER E WITH ACUTE on $where";

    $pb->clear();
    $data = chr 0x3a3;	# GREEK CAPITAL LETTER SIGMA
    $pb->copy( $data );
    test_vs_pbpaste $pbopt, $data,
	"Place GREEK CAPITAL LETTER SIGMA on $where";

    $pb->clear;
    $data = chr 0x3b1;	# GREEK SMALL LETTER ALPHA
    $putsub->($data);
    test_vs_pbpaste $pbopt, $data,
	"Use $putter to put GREEK SMALL LETTER ALPHA on $where.";

##	The following test is bypassed because pbpaste actually finds
##	the data. I am not sure how this can be, since PasteboardPeeker
##	does not, but it leaves me with no way to test.
##
##    $pb->copy ("Able was I, ere I saw Elba", undef,
##	kPasteboardFlavorSenderOnly);
##    test_vs_pbpaste $pbopt, '', "Should fail to find sender-only data on $where.";

}

done_testing;

1;

# ex: set filetype=perl textwidth=72 autoindent :
