## Create by Mylisp::write_mylisp_ast()   
package Mylisp::Ast;

use Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw(get_mylisp_ast);

use Spp::Builtin qw(from_json);

sub get_mylisp_ast {
   return from_json(<<'EOF'
[["mylisp",["Rules",[["Assert","^"],["Rept",["+",["Branch",[["Rtoken","_"],["Ntoken","Expr"]]]]],["Assert","$"]]]],["_",["Rept",["+",["Branch",[["Rept",["+",["Cclass","s"]]],["Rtoken","_comm"]]]]]],["_comm",["Rules",[["Char","#"],["Till",["Assert","$$"]]]]],["Expr",["Rules",[["Char","("],["Rept",["+",["Branch",[["Rtoken","_"],["Ctoken","atom"]]]]],["Char",")"]]]],["atom",["Branch",[["Ntoken","Expr"],["Ntoken","Slist"],["Ntoken","Array"],["Ntoken","Hash"],["Ntoken","Int"],["Ntoken","Keyword"],["Ntoken","Mstr"],["Ntoken","Str"],["Ntoken","String"],["Ntoken","Char"],["Ntoken","Aindex"],["Ntoken","Arange"],["Ntoken","Hkey"],["Ntoken","Ocall"],["Ntoken","Macro"],["Ntoken","Oper"],["Ntoken","Sub"],["Ntoken","Var"]]]],["Int",["Ctoken","number"]],["number",["Branch",[["Group",[["Char","-"],["Rept",["+",["Cclass","d"]]]]],["Rept",["+",["Cclass","d"]]]]]],["Keyword",["Rules",[["Char",":"],["Rept",["+",["Chclass",[["Char","$"],["Char","^"],["Char","+"],["Char","*"],["Char","?"],["Cclass","w"]]]]]]]],["Mstr",["Rules",[["Str","'''"],["Till",["Str","'''"]]]]],["Str",["Rules",[["Char","'"],["Rept",["*",["Branch",[["Ntoken","Schars"],["Ntoken","Char"],["Ntoken","Scalar"]]]]],["Char","'"]]]],["Schars",["Rept",["+",["Nchclass",[["Char","\\"],["Char","'"],["Char","$"]]]]]],["String",["Rules",[["Char","\""],["Rept",["*",["Branch",[["Ntoken","Chars"],["Ntoken","Char"],["Ntoken","Scalar"]]]]],["Char","\""]]]],["Chars",["Rept",["+",["Nchclass",[["Char","\\"],["Char","\""],["Char","$"]]]]]],["Char",["Rules",[["Char","\\"],["Any","."]]]],["Scalar",["Rules",[["Char","$"],["Rept",["+",["Chclass",[["Cclass","a"],["Char","-"]]]]]]]],["Macro",["Branch",[["Str","package"],["Str","class"],["Str","const"],["Str","use"],["Str","import"],["Str","func"],["Str","fn"],["Str","def"],["Str","given"],["Str","else"],["Str","case"],["Str","if"],["Str","while"],["Str","for"],["Str","my"],["Str","set"],["Str","end"],["Str","return"]]]],["Oper",["Rept",["+",["Chclass",[["Char","-"],["Char","+"],["Char","="],["Char",">"],["Char","<"],["Char","!"],["Char","~"],["Char","|"],["Char","&"]]]]]],["Sub",["Rules",[["Cclass","a"],["Rept",["*",["Chclass",[["Char","-"],["Cclass","w"],["Char",":"]]]]],["Rept",["?",["Chclass",[["Char","!"],["Char","?"]]]]]]]],["Var",["Rules",[["Chclass",[["Char","$"],["Char","@"],["Char","%"]]],["Rept",["+",["Chclass",[["Char","-"],["Cclass","w"],["Char",":"]]]]]]]],["Slist",["Rules",[["Str",":["],["Rept",["+",["Branch",[["Rept",["+",["Cclass","s"]]],["Ntoken","Sub"]]]]],["Char","]"]]]],["Array",["Rules",[["Char","["],["Rept",["*",["Branch",[["Rtoken","_"],["Char",","],["Ctoken","atom"]]]]],["Char","]"]]]],["Hash",["Rules",[["Char","{"],["Rept",["*",["Branch",[["Rtoken","_"],["Char",","],["Ntoken","Pair"]]]]],["Char","}"]]]],["Pair",["Rules",[["Ntoken","Keyword"],["Rept",["*",["Cclass","s"]]],["Str","=>"],["Rept",["*",["Cclass","s"]]],["Ctoken","atom"]]]],["Aindex",["Rules",[["Ntoken","Var"],["Char","["],["Ntoken","Int"],["Char","]"]]]],["Arange",["Rules",[["Ntoken","Var"],["Ntoken","Range"]]]],["Range",["Rules",[["Char","["],["Rept",["?",["Ntoken","From"]]],["Char",":"],["Rept",["?",["Ntoken","To"]]],["Char","]"]]]],["From",["Branch",[["Ctoken","number"],["Group",[["Chclass",[["Char","$"]]],["Rept",["+",["Chclass",[["Cclass","a"],["Char","-"]]]]]]]]]],["To",["Branch",[["Ctoken","number"],["Group",[["Chclass",[["Char","$"]]],["Rept",["+",["Chclass",[["Cclass","a"],["Char","-"]]]]]]]]]],["Hkey",["Rules",[["Ntoken","Var"],["Char","["],["Branch",[["Ntoken","Keyword"],["Ntoken","Scalar"]]],["Char","]"]]]],["Ocall",["Rules",[["Ntoken","Var"],["Char","."],["Ntoken","Sub"]]]]]
EOF
) }
1;