use Test::More;
{
	package Before;
	use Moo::Role;
	
	sub seven { return '7' }
};

{
	package World;
	use Moo::Role;
	with qw/Before/;

	sub six {
		my $caller = caller();
		my @allowed = qw(Hello);
		unless ($caller eq __PACKAGE__ || grep { $_ eq $caller } @allowed) {
			die "cannot call private method six from $caller";
		}
		'six' 
	}
};

{
	package Hello;
	use Moo;
	use MooX::LazierAttributes;
	use MooX::ValidateSubs;
	with qw/World/;
	use Scalar::Util qw/reftype/ ;
	use JSON;

	use Types::Standard qw/Str HashRef ArrayRef Object/;

	attributes
		one => [{ okay => 'one'}],
		[qw/two three/] => [rw, Str, { default => 'the world is flat' }];

	validate_subs
		four => {
			params => {
				message => [Str, sub {'four'}]
			}
		};

	sub four { return $_[1]->{message} }
	sub five {
		my $caller = caller();
		my @allowed = qw(main);
		unless ($caller eq __PACKAGE__ || grep { $_ eq $caller } @allowed) {
			die "cannot call private method five from $caller";
		}
		return $_[0]->six 
	}
	sub ten { reftype bless {}, 'Flat::World' }
	sub eleven { encode_json { flat => "world" } }
	1;
};

{
	package Night;
	use Moo;
	use MooX::LazierAttributes;
	use MooX::ValidateSubs;
	extends qw/Hello/;

	sub nine { return 'nine' }
	1;
};

ok(1);
done_testing();

