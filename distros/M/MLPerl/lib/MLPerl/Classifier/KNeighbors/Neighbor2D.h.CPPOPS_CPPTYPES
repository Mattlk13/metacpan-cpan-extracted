// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__MLPerl__Classifier__KNeighbors__Neighbor2D_h
#define __CPP__INCLUDED__MLPerl__Classifier__KNeighbors__Neighbor2D_h 0.001_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperloperations.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/CompileUnit/Module/Class.cpp>

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class MLPerl__Classifier__KNeighbors__Neighbor2D : public RPerl__CompileUnit__Module__Class__CPP {
public:
    // [[[ OO PROPERTIES ]]]
    number_arrayref data;
    number distance = -1;
    string classification = "";

    // [[[ OO METHODS ]]]

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    integer get_data_size() { return this->data.size(); }  // call from Perl or C++
    number_arrayref get_data() { return data; }
    void set_data(number_arrayref data_new) { data = data_new; }
    number get_data_element(integer i) { return data[i]; }  // call from C++
    void set_data_element(integer i, number value_new) { data[i] = value_new; }  // call from C++

    number get_distance() { return distance; }
    void set_distance(number distance_new) { distance = distance_new; }

    string get_classification() { return classification; }
    void set_classification(string classification_new) { classification = classification_new; }


    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    MLPerl__Classifier__KNeighbors__Neighbor2D() {
        this->data.resize(2);
    }
    ~MLPerl__Classifier__KNeighbors__Neighbor2D() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "MLPerl::Classifier::KNeighbors::Neighbor2D"; }
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define MLPerl__Classifier__KNeighbors__Neighbor2D_rawptr MLPerl__Classifier__KNeighbors__Neighbor2D*
typedef std::unique_ptr<MLPerl__Classifier__KNeighbors__Neighbor2D> MLPerl__Classifier__KNeighbors__Neighbor2D_ptr;
typedef std::vector<MLPerl__Classifier__KNeighbors__Neighbor2D_ptr> MLPerl__Classifier__KNeighbors__Neighbor2D_arrayref;
typedef std::unordered_map<string, MLPerl__Classifier__KNeighbors__Neighbor2D_ptr> MLPerl__Classifier__KNeighbors__Neighbor2D_hashref;
typedef std::unordered_map<string, MLPerl__Classifier__KNeighbors__Neighbor2D_ptr>::iterator MLPerl__Classifier__KNeighbors__Neighbor2D_hashref_iterator;

// [[[ OO CONSTRUCTOR WRAPPER CLASS ]]]
class NEW_MLPerl__Classifier__KNeighbors__Neighbor2D {
public:
    MLPerl__Classifier__KNeighbors__Neighbor2D_ptr wrapped_object;
    NEW_MLPerl__Classifier__KNeighbors__Neighbor2D() : wrapped_object{new MLPerl__Classifier__KNeighbors__Neighbor2D()} {}
    MLPerl__Classifier__KNeighbors__Neighbor2D_ptr&& NEW() { return std::move(wrapped_object); }

    // <<< OO PROPERTIES, INITIALIZERS >>>
    NEW_MLPerl__Classifier__KNeighbors__Neighbor2D& data(number_arrayref data_init) { wrapped_object->data = data_init; return *this; }
    NEW_MLPerl__Classifier__KNeighbors__Neighbor2D& distance(number distance_init) { wrapped_object->distance = distance_init; return *this; }
    NEW_MLPerl__Classifier__KNeighbors__Neighbor2D& classification(string classification_init) { wrapped_object->classification = classification_init; return *this; }
};

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer MLPerl__Classifier__KNeighbors__Neighbor2D__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
