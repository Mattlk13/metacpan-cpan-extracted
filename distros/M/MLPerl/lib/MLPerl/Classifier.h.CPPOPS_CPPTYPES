// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__MLPerl__Classifier_h
#define __CPP__INCLUDED__MLPerl__Classifier_h 0.001_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperloperations.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/CompileUnit/Module/Class.cpp>

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class MLPerl__Classifier : public RPerl__CompileUnit__Module__Class__CPP {
public:
    // [[[ OO METHODS ]]]

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    MLPerl__Classifier() {}
    ~MLPerl__Classifier() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "MLPerl::Classifier"; }
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define MLPerl__Classifier_rawptr MLPerl__Classifier*
typedef std::unique_ptr<MLPerl__Classifier> MLPerl__Classifier_ptr;
typedef std::vector<MLPerl__Classifier_ptr> MLPerl__Classifier_arrayref;
typedef std::unordered_map<string, MLPerl__Classifier_ptr> MLPerl__Classifier_hashref;
typedef std::unordered_map<string, MLPerl__Classifier_ptr>::iterator MLPerl__Classifier_hashref_iterator;

// [[[ OO CONSTRUCTOR WRAPPER CLASS ]]]
class NEW_MLPerl__Classifier {
public:
    MLPerl__Classifier_ptr wrapped_object;
    NEW_MLPerl__Classifier() : wrapped_object{new MLPerl__Classifier()} {}
    MLPerl__Classifier_ptr&& NEW() { return std::move(wrapped_object); }

};

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer MLPerl__Classifier__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
