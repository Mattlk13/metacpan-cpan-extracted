NAME

    Mojo::Reactor::POE - POE backend for Mojo::Reactor

SYNOPSIS

      use Mojo::Reactor::POE;
    
      # Watch if handle becomes readable or writable
      my $reactor = Mojo::Reactor::POE->new;
      $reactor->io($first => sub {
        my ($reactor, $writable) = @_;
        say $writable ? 'First handle is writable' : 'First handle is readable';
      });
    
      # Change to watching only if handle becomes writable
      $reactor->watch($first, 0, 1);
    
      # Turn file descriptor into handle and watch if it becomes readable
      my $second = IO::Handle->new_from_fd($fd, 'r');
      $reactor->io($second => sub {
        my ($reactor, $writable) = @_;
        say $writable ? 'Second handle is writable' : 'Second handle is readable';
      })->watch($second, 1, 0);
    
      # Add a timer
      $reactor->timer(15 => sub {
        my $reactor = shift;
        $reactor->remove($first);
        $reactor->remove($second);
        say 'Timeout!';
      });
    
      # Start reactor if necessary
      $reactor->start unless $reactor->is_running;
    
      # Or in an application using Mojo::IOLoop
      use POE qw(Loop::IO_Poll);
      use Mojo::Reactor::POE;
      use Mojo::IOLoop;
      
      # Or in a Mojolicious application
      $ MOJO_REACTOR=Mojo::Reactor::POE POE_EVENT_LOOP=POE::Loop::IO_Poll hypnotoad script/myapp

DESCRIPTION

    Mojo::Reactor::POE is an event reactor for Mojo::IOLoop that uses POE.
    The usage is exactly the same as other Mojo::Reactor implementations
    such as Mojo::Reactor::Poll. Mojo::Reactor::POE will be used as the
    default backend for Mojo::IOLoop if it is loaded before Mojo::IOLoop or
    any module using the loop. However, when invoking a Mojolicious
    application through morbo or hypnotoad, the reactor must be set as the
    default by setting the MOJO_REACTOR environment variable to
    Mojo::Reactor::POE.

    Note that if POE detects multiple potential event loops it will fail.
    This includes IO::Poll and Mojo::IOLoop (loaded by Mojolicious) if the
    appropriate POE::Loop modules are installed. To avoid this, load POE
    before any Mojolicious module, or specify the POE event loop
    explicitly. This means that for Mojolicious applications invoked
    through morbo or hypnotoad, the POE event loop may also need to be set
    in the environment. See "Using POE with Other Event Loops" in
    POE::Kernel.

EVENTS

    Mojo::Reactor::POE inherits all events from Mojo::Reactor::Poll.

METHODS

    Mojo::Reactor::POE inherits all methods from Mojo::Reactor::Poll and
    implements the following new ones.

 new

      my $reactor = Mojo::Reactor::POE->new;

    Construct a new Mojo::Reactor::POE object.

 again

      $reactor->again($id);
      $reactor->again($id, 0.5);

    Restart timer and optionally change the invocation time. Note that this
    method requires an active timer.

 one_tick

      $reactor->one_tick;

    Run reactor until an event occurs or no events are being watched
    anymore. Note that this method can recurse back into the reactor, so
    you need to be careful.

      # Don't block longer than 0.5 seconds
      my $id = $reactor->timer(0.5 => sub {});
      $reactor->one_tick;
      $reactor->remove($id);

 recurring

      my $id = $reactor->recurring(0.25 => sub {...});

    Create a new recurring timer, invoking the callback repeatedly after a
    given amount of time in seconds.

 remove

      my $bool = $reactor->remove($handle);
      my $bool = $reactor->remove($id);

    Remove handle or timer.

 reset

      $reactor->reset;

    Remove all handles and timers.

 timer

      my $id = $reactor->timer(0.5 => sub {...});

    Create a new timer, invoking the callback after a given amount of time
    in seconds.

 watch

      $reactor = $reactor->watch($handle, $readable, $writable);

    Change I/O events to watch handle for with true and false values. Note
    that this method requires an active I/O watcher.

      # Watch only for readable events
      $reactor->watch($handle, 1, 0);
    
      # Watch only for writable events
      $reactor->watch($handle, 0, 1);
    
      # Watch for readable and writable events
      $reactor->watch($handle, 1, 1);
    
      # Pause watching for events
      $reactor->watch($handle, 0, 0);

CAVEATS

    When using Mojo::IOLoop with POE, the event loop must be controlled by
    Mojo::IOLoop or Mojo::Reactor::POE, such as with the methods "start" in
    Mojo::Reactor::Poll, "stop" in Mojo::Reactor::Poll, and "one_tick".
    Starting or stopping the event loop through POE will not provide
    required functionality to Mojo::IOLoop applications.

    Externally-added sessions will not keep the Mojo::IOLoop running if
    Mojo::Reactor::POE has nothing left to watch. This can be worked around
    by adding a recurring timer for the reactor to watch.

BUGS

    POE has a complex session system which may lead to bugs when used in
    this manner. Report any issues on the public bugtracker.

AUTHOR

    Dan Book, dbook@cpan.org

COPYRIGHT AND LICENSE

    Copyright 2015, Dan Book.

    This library is free software; you may redistribute it and/or modify it
    under the terms of the Artistic License version 2.0.

SEE ALSO

    Mojolicious, Mojo::IOLoop, POE

