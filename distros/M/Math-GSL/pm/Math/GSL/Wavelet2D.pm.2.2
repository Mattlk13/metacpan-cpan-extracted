# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Math::GSL::Wavelet2D;
use base qw(Exporter);
use base qw(DynaLoader);
package Math::GSL::Wavelet2Dc;
bootstrap Math::GSL::Wavelet2D;
package Math::GSL::Wavelet2D;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Math::GSL::Wavelet2D;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Math::GSL::Wavelet2D;

*gsl_error = *Math::GSL::Wavelet2Dc::gsl_error;
*gsl_stream_printf = *Math::GSL::Wavelet2Dc::gsl_stream_printf;
*gsl_strerror = *Math::GSL::Wavelet2Dc::gsl_strerror;
*gsl_set_error_handler = *Math::GSL::Wavelet2Dc::gsl_set_error_handler;
*gsl_set_error_handler_off = *Math::GSL::Wavelet2Dc::gsl_set_error_handler_off;
*gsl_set_stream_handler = *Math::GSL::Wavelet2Dc::gsl_set_stream_handler;
*gsl_set_stream = *Math::GSL::Wavelet2Dc::gsl_set_stream;
*gsl_wavelet2d_transform = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_transform;
*gsl_wavelet2d_transform_forward = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_transform_forward;
*gsl_wavelet2d_transform_inverse = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_transform_inverse;
*gsl_wavelet2d_nstransform = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_nstransform;
*gsl_wavelet2d_nstransform_forward = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_nstransform_forward;
*gsl_wavelet2d_nstransform_inverse = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_nstransform_inverse;
*gsl_wavelet2d_transform_matrix = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_transform_matrix;
*gsl_wavelet2d_transform_matrix_forward = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_transform_matrix_forward;
*gsl_wavelet2d_transform_matrix_inverse = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_transform_matrix_inverse;
*gsl_wavelet2d_nstransform_matrix = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_nstransform_matrix;
*gsl_wavelet2d_nstransform_matrix_forward = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_nstransform_matrix_forward;
*gsl_wavelet2d_nstransform_matrix_inverse = *Math::GSL::Wavelet2Dc::gsl_wavelet2d_nstransform_matrix_inverse;

# ------- VARIABLE STUBS --------

package Math::GSL::Wavelet2D;

*GSL_VERSION = *Math::GSL::Wavelet2Dc::GSL_VERSION;
*GSL_MAJOR_VERSION = *Math::GSL::Wavelet2Dc::GSL_MAJOR_VERSION;
*GSL_MINOR_VERSION = *Math::GSL::Wavelet2Dc::GSL_MINOR_VERSION;
*GSL_POSZERO = *Math::GSL::Wavelet2Dc::GSL_POSZERO;
*GSL_NEGZERO = *Math::GSL::Wavelet2Dc::GSL_NEGZERO;
*GSL_SUCCESS = *Math::GSL::Wavelet2Dc::GSL_SUCCESS;
*GSL_FAILURE = *Math::GSL::Wavelet2Dc::GSL_FAILURE;
*GSL_CONTINUE = *Math::GSL::Wavelet2Dc::GSL_CONTINUE;
*GSL_EDOM = *Math::GSL::Wavelet2Dc::GSL_EDOM;
*GSL_ERANGE = *Math::GSL::Wavelet2Dc::GSL_ERANGE;
*GSL_EFAULT = *Math::GSL::Wavelet2Dc::GSL_EFAULT;
*GSL_EINVAL = *Math::GSL::Wavelet2Dc::GSL_EINVAL;
*GSL_EFAILED = *Math::GSL::Wavelet2Dc::GSL_EFAILED;
*GSL_EFACTOR = *Math::GSL::Wavelet2Dc::GSL_EFACTOR;
*GSL_ESANITY = *Math::GSL::Wavelet2Dc::GSL_ESANITY;
*GSL_ENOMEM = *Math::GSL::Wavelet2Dc::GSL_ENOMEM;
*GSL_EBADFUNC = *Math::GSL::Wavelet2Dc::GSL_EBADFUNC;
*GSL_ERUNAWAY = *Math::GSL::Wavelet2Dc::GSL_ERUNAWAY;
*GSL_EMAXITER = *Math::GSL::Wavelet2Dc::GSL_EMAXITER;
*GSL_EZERODIV = *Math::GSL::Wavelet2Dc::GSL_EZERODIV;
*GSL_EBADTOL = *Math::GSL::Wavelet2Dc::GSL_EBADTOL;
*GSL_ETOL = *Math::GSL::Wavelet2Dc::GSL_ETOL;
*GSL_EUNDRFLW = *Math::GSL::Wavelet2Dc::GSL_EUNDRFLW;
*GSL_EOVRFLW = *Math::GSL::Wavelet2Dc::GSL_EOVRFLW;
*GSL_ELOSS = *Math::GSL::Wavelet2Dc::GSL_ELOSS;
*GSL_EROUND = *Math::GSL::Wavelet2Dc::GSL_EROUND;
*GSL_EBADLEN = *Math::GSL::Wavelet2Dc::GSL_EBADLEN;
*GSL_ENOTSQR = *Math::GSL::Wavelet2Dc::GSL_ENOTSQR;
*GSL_ESING = *Math::GSL::Wavelet2Dc::GSL_ESING;
*GSL_EDIVERGE = *Math::GSL::Wavelet2Dc::GSL_EDIVERGE;
*GSL_EUNSUP = *Math::GSL::Wavelet2Dc::GSL_EUNSUP;
*GSL_EUNIMPL = *Math::GSL::Wavelet2Dc::GSL_EUNIMPL;
*GSL_ECACHE = *Math::GSL::Wavelet2Dc::GSL_ECACHE;
*GSL_ETABLE = *Math::GSL::Wavelet2Dc::GSL_ETABLE;
*GSL_ENOPROG = *Math::GSL::Wavelet2Dc::GSL_ENOPROG;
*GSL_ENOPROGJ = *Math::GSL::Wavelet2Dc::GSL_ENOPROGJ;
*GSL_ETOLF = *Math::GSL::Wavelet2Dc::GSL_ETOLF;
*GSL_ETOLX = *Math::GSL::Wavelet2Dc::GSL_ETOLX;
*GSL_ETOLG = *Math::GSL::Wavelet2Dc::GSL_ETOLG;
*GSL_EOF = *Math::GSL::Wavelet2Dc::GSL_EOF;


@EXPORT_OK = qw/
    gsl_wavelet2d_transform
    gsl_wavelet2d_transform_forward
    gsl_wavelet2d_transform_inverse
    gsl_wavelet2d_nstransform
    gsl_wavelet2d_nstransform_forward
    gsl_wavelet2d_nstransform_inverse
    gsl_wavelet2d_transform_matrix
    gsl_wavelet2d_transform_matrix_forward
    gsl_wavelet2d_transform_matrix_inverse
    gsl_wavelet2d_nstransform_matrix
    gsl_wavelet2d_nstransform_matrix_forward
    gsl_wavelet2d_nstransform_matrix_inverse

/;

%EXPORT_TAGS = ( all => [ @EXPORT_OK ] );

=encoding utf8

=head1 NAME

Math::GSL::Wavelet2D - 2-D Wavelets

=head1 SYNOPSIS

    use Math::GSL::Wavelet2D qw/:all/;

=head1 DESCRIPTION

=head1 AUTHORS

Jonathan "Duke" Leto <jonathan@leto.net> and Thierry Moisan
<thierry.moisan@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2008-2020 Jonathan "Duke" Leto and Thierry Moisan

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

1;
