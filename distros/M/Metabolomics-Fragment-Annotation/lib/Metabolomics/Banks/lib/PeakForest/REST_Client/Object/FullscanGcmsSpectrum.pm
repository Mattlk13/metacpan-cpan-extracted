=begin comment

PeakForest REST API

API specification to support \"PeakForest - REST API\" operations

The version of the OpenAPI document: 2.1.0
Contact: contact@peakforest.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package PeakForest::REST_Client::Object::FullscanGcmsSpectrum;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use PeakForest::REST_Client::Object::FullscanGcmsSpectrumAllOf;
use PeakForest::REST_Client::Object::MassPeak;
use PeakForest::REST_Client::Object::MassSpectrum;

use base ("Class::Accessor", "Class::Data::Inheritable", "PeakForest::REST_Client::Object::MassSpectrum");

#
#A representation of a fullscan GCMS spectrum
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

PeakForest REST API

API specification to support \"PeakForest - REST API\" operations

The version of the OpenAPI document: 2.1.0
Contact: contact@peakforest.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }

    # initialize parent object MassSpectrum
    $self->PeakForest::REST_Client::Object::MassSpectrum::init(%args);
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    # call MassSpectrum to_hash and then combine hash
    $_hash = { %$_hash, %$self->PeakForest::REST_Client::Object::MassSpectrum::to_hash };

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    # combine parent (MassSpectrum) TO_JSON
    $_data = { %$_data, %$self->PeakForest::REST_Client::Object::MassSpectrum::TO_JSON };

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    # call parent (MassSpectrum) from_hash
    $self->PeakForest::REST_Client::Object::MassSpectrum::from_hash($hash);
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "PeakForest::REST_Client::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'A representation of a fullscan GCMS spectrum',
                                  class => 'FullscanGcmsSpectrum',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'manufacturer_brand' => {
        datatype => 'string',
        base_name => 'manufacturerBrand',
        description => 'The manufacturer brand',
        format => '',
        read_only => '',
            },
    'ionisation_method' => {
        datatype => 'string',
        base_name => 'ionisationMethod',
        description => 'The spectrum ionisation method',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'manufacturer_brand' => 'string',
    'ionisation_method' => 'string'
} );

__PACKAGE__->attribute_map( {
    'manufacturer_brand' => 'manufacturerBrand',
    'ionisation_method' => 'ionisationMethod'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
