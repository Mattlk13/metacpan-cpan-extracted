=begin comment

PeakForest REST API

API specification to support \"PeakForest - REST API\" operations

The version of the OpenAPI document: 2.3.4
Contact: contact@peakforest.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package PeakForest::REST_Client::Object::NewSpectrumPeaklist;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use PeakForest::REST_Client::Object::NewSpectrumPeakItem;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

PeakForest REST API

API specification to support \"PeakForest - REST API\" operations

The version of the OpenAPI document: 2.3.4
Contact: contact@peakforest.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "PeakForest::REST_Client::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => '',
                                  class => 'NewSpectrumPeaklist',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'scan_type' => {
        datatype => 'string',
        base_name => 'scan_type',
        description => 'the MS level',
        format => '',
        read_only => '',
            },
    'polarity' => {
        datatype => 'string',
        base_name => 'polarity',
        description => 'the specturm acquisition polarity mode',
        format => '',
        read_only => '',
            },
    'resolution' => {
        datatype => 'string',
        base_name => 'resolution',
        description => 'the spectrum acquisition resolution mode',
        format => '',
        read_only => '',
            },
    'curation' => {
        datatype => 'string',
        base_name => 'curation',
        description => 'the spectrum peaklist selection filter',
        format => '',
        read_only => '',
            },
    'resolution_fwhm' => {
        datatype => 'string',
        base_name => 'resolution_FWHM',
        description => 'the spectrum acquisition FWHM resolution value',
        format => '',
        read_only => '',
            },
    'mz_from' => {
        datatype => 'double',
        base_name => 'mz_from',
        description => '-',
        format => '',
        read_only => '',
            },
    'mz_to' => {
        datatype => 'double',
        base_name => 'mz_to',
        description => '-',
        format => '',
        read_only => '',
            },
    'retention_min_time_from' => {
        datatype => 'double',
        base_name => 'retention_min_time_from',
        description => '-',
        format => '',
        read_only => '',
            },
    'retention_min_time_to' => {
        datatype => 'double',
        base_name => 'retention_min_time_to',
        description => '-',
        format => '',
        read_only => '',
            },
    'retention_percent_solvent_time_from' => {
        datatype => 'double',
        base_name => 'retention_percent_solvent_time_from',
        description => '-',
        format => '',
        read_only => '',
            },
    'retention_percent_solvent_time_to' => {
        datatype => 'double',
        base_name => 'retention_percent_solvent_time_to',
        description => '-',
        format => '',
        read_only => '',
            },
    'acquisition_id' => {
        datatype => 'string',
        base_name => 'acquisition_id',
        description => 'An unic identifier for this acquisition; this filed will be used  to recover parent/children spectra from an acquisition (rebuild  fragmentation tree in the database datamodel)  ',
        format => '',
        read_only => '',
            },
    'precursor_spectrum_id' => {
        datatype => 'string',
        base_name => 'precursor_spectrum_id',
        description => 'This filed is used to recover parent/children spectra from an  acquisition (rebuild fragmentation tree in the database  datamodel). See field \&quot;acquisition_id\&quot; for further informations. ',
        format => '',
        read_only => '',
            },
    'precursor_ion' => {
        datatype => 'double',
        base_name => 'precursor_ion',
        description => 'The precursor ion M/Z value; two digits precision.',
        format => '',
        read_only => '',
            },
    'isolation_mode' => {
        datatype => 'string',
        base_name => 'isolation_mode',
        description => '',
        format => '',
        read_only => '',
            },
    'isolation_window' => {
        datatype => 'double',
        base_name => 'isolation_window',
        description => '',
        format => '',
        read_only => '',
            },
    'qz_isolation_activation' => {
        datatype => 'double',
        base_name => 'qz_isolation_activation',
        description => 'Only if IT; no unit.',
        format => '',
        read_only => '',
            },
    'activation_time' => {
        datatype => 'double',
        base_name => 'activation_time',
        description => 'Only if FT-ICR (SORI-CID) or IT; in milliseconds (ms).',
        format => '',
        read_only => '',
            },
    'mode' => {
        datatype => 'string',
        base_name => 'mode',
        description => '',
        format => '',
        read_only => '',
            },
    'fragmentation_energy' => {
        datatype => 'double',
        base_name => 'fragmentation_energy',
        description => 'The fragmentation energy value; without unit.',
        format => '',
        read_only => '',
            },
    'peaklist' => {
        datatype => 'ARRAY[NewSpectrumPeakItem]',
        base_name => 'peaklist',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'scan_type' => 'string',
    'polarity' => 'string',
    'resolution' => 'string',
    'curation' => 'string',
    'resolution_fwhm' => 'string',
    'mz_from' => 'double',
    'mz_to' => 'double',
    'retention_min_time_from' => 'double',
    'retention_min_time_to' => 'double',
    'retention_percent_solvent_time_from' => 'double',
    'retention_percent_solvent_time_to' => 'double',
    'acquisition_id' => 'string',
    'precursor_spectrum_id' => 'string',
    'precursor_ion' => 'double',
    'isolation_mode' => 'string',
    'isolation_window' => 'double',
    'qz_isolation_activation' => 'double',
    'activation_time' => 'double',
    'mode' => 'string',
    'fragmentation_energy' => 'double',
    'peaklist' => 'ARRAY[NewSpectrumPeakItem]'
} );

__PACKAGE__->attribute_map( {
    'scan_type' => 'scan_type',
    'polarity' => 'polarity',
    'resolution' => 'resolution',
    'curation' => 'curation',
    'resolution_fwhm' => 'resolution_FWHM',
    'mz_from' => 'mz_from',
    'mz_to' => 'mz_to',
    'retention_min_time_from' => 'retention_min_time_from',
    'retention_min_time_to' => 'retention_min_time_to',
    'retention_percent_solvent_time_from' => 'retention_percent_solvent_time_from',
    'retention_percent_solvent_time_to' => 'retention_percent_solvent_time_to',
    'acquisition_id' => 'acquisition_id',
    'precursor_spectrum_id' => 'precursor_spectrum_id',
    'precursor_ion' => 'precursor_ion',
    'isolation_mode' => 'isolation_mode',
    'isolation_window' => 'isolation_window',
    'qz_isolation_activation' => 'qz_isolation_activation',
    'activation_time' => 'activation_time',
    'mode' => 'mode',
    'fragmentation_energy' => 'fragmentation_energy',
    'peaklist' => 'peaklist'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
