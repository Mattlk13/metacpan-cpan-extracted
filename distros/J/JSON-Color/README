NAME
    JSON::Color - Encode to colored JSON

VERSION
    This document describes version 0.133 of JSON::Color (from Perl
    distribution JSON-Color), released on 2021-11-24.

SYNOPSIS
     use JSON::Color qw(encode_json);
     say encode_json([1, "two", {three => 4}]);

DESCRIPTION
    This module generates JSON, colorized with ANSI escape sequences.

    To change the color, see the %theme in the source code. In theory you
    can also modify it to colorize using HTML.

FUNCTIONS
  encode_json($data, \%opts) => STR
    Encode to JSON. Will die on error (e.g. when encountering non-encodeable
    data like Regexp or file handle).

    Known options:

    *   color_theme => STR

        Pick a color theme, which is a ColorTheme-confirming color theme
        module. The default is JSON::Color::ColorTheme::default. For
        example: ColorTheme::Lens::Lighten

    *   pretty => BOOL (default: 0)

        Pretty-print.

    *   linum => BOOL (default: 0)

        Show line number.

    *   sort_by => CODE

        If specified, then sorting of hash keys will be done using this sort
        subroutine. This is similar to the "sort_by" option in the JSON
        module. Note that code is executed in "JSON::Color" namespace,
        example:

         # reverse sort
         encode_json(..., {sort_by => sub { $JSON::Color::b cmp $JSON::Color::a }});

        Another example, using Sort::ByExample:

         use Sort::ByExample cmp => {-as => 'by_eg', example => [qw/foo bar baz/]};
         encode_json(..., {sort_by => sub { by_eg($JSON::Color::a, $JSON::Color::b) }});

FAQ
  What about loading?
    Use JSON.

  How to handle non-encodeable data?
    Use Data::Clean::JSON.

  Why do numbers become strings?
    Example:

     % perl -MJSON::Color=encode_json -E'say encode_json([1, "1"])'
     ["1","1"]

    To detect whether a scalar is a number (e.g. differentiate between "1"
    and 1), the XS module Scalar::Util::LooksLikeNumber is used. This is set
    as an optional prerequisite, so you'll need to install it separately.
    After the prerequisite is installed:

     % perl -MJSON::Color=encode_json -E'say encode_json([1, "1"])'
     [1,"1"]

ENVIRONMENT
  NO_COLOR
    If defined, will set default color theme to ColorTheme::NoColor. See
    <https://no-color.org/> for more details.

  JSON_COLOR_COLOR_THEME
    Set default color theme. Has precedence over "COLOR_THEME".

  COLOR_THEME
    Set default color theme.

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/JSON-Color>.

SOURCE
    Source repository is at <https://github.com/perlancar/perl-JSON-Color>.

SEE ALSO
    To colorize with HTML, you can try Syntax::Highlight::JSON.

    Syntax::SourceHighlight can also colorize JSON/JavaScript to HTML or
    ANSI escape. It requires the GNU Source-highlight library.

AUTHOR
    perlancar <perlancar@cpan.org>

CONTRIBUTOR
    Steven Haryanto <stevenharyanto@gmail.com>

CONTRIBUTING
    To contribute, you can send patches by email/via RT, or send pull
    requests on GitHub.

    Most of the time, you don't need to build the distribution yourself. You
    can simply modify the code, then test via:

     % prove -l

    If you want to build the distribution (e.g. to try to install it locally
    on your system), you can install Dist::Zilla,
    Dist::Zilla::PluginBundle::Author::PERLANCAR, and sometimes one or two
    other Dist::Zilla plugin and/or Pod::Weaver::Plugin. Any additional
    steps required beyond that are considered a bug and can be reported to
    me.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2021, 2016, 2015, 2014, 2012 by perlancar
    <perlancar@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=JSON-Color>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

