{"digest":"5ae590e9395cb4524aaca55e210f5d46","condition":[[37,{"op":"or","type":"or_3","left":"$slurpy->is_a_type_of(ArrayRef())","right":"$slurpy->is_a_type_of(HashRef())"}],[94,{"op":"or","type":"or_3","left":"/^No arguments allowed after a slurpy type constraint/ms","right":"/^Slurpy argument must be a type of ArrayRef or HashRef/ms"}]],"statement":[4,4,4,5,5,5,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,28,30,31,32,33,36,37,41,43,49,50,51,57,59,60,61,62,64,69,71,72,74,74,75,77,87,98,90,94,100,102,105,106,109,110,111,111,115,115,117],"branch":[[33,{"text":"if $i < $#args"}],[37,{"text":"unless $slurpy->is_a_type_of(ArrayRef()) or $slurpy->is_a_type_of(HashRef())"}],[32,{"text":"if (Slurpy->check($_))"}],[62,{"text":"if $package ne 'UNIVERSAL::ref'"}],[72,{"text":"unless defined $$stubs{$method_call->name}"}],[75,{"text":"if $stub->satisfied_by($method_call)"}],[94,{"text":"if /^No arguments allowed after a slurpy type constraint/ms or /^Slurpy argument must be a type of ArrayRef or HashRef/ms"}],[100,{"text":"if $Test::Mocha::Mock::num_method_calls == 0"}],[102,{"text":"if $Test::Mocha::Mock::num_method_calls > 1"}],[109,{"text":"if (defined $Test::Mocha::Mock::last_response)"}]],"subroutine":[[4,"BEGIN"],[5,"BEGIN"],[7,"BEGIN"],[8,"BEGIN"],[9,"BEGIN"],[10,"BEGIN"],[11,"BEGIN"],[28,"check_slurpy_arg"],[49,"extract_method_name"],[57,"find_caller"],[69,"find_stub"],[87,"get_method_call"],[90,"__ANON__"],[94,"__ANON__"]],"file":"blib/lib/Test/Mocha/Util.pm","pod":[[28,"check_slurpy_arg"],[49,"extract_method_name"],[57,"find_caller"],[69,"find_stub"],[87,"get_method_call"]],"start":{"8":{"BEGIN":[{"branch":null,"time":null,"statement":9,"condition":null,"pod":null,"subroutine":3}]},"87":{"get_method_call":[{"branch":6,"time":null,"statement":46,"pod":4,"condition":1,"subroutine":11}]},"10":{"BEGIN":[{"subroutine":5,"condition":null,"pod":null,"statement":15,"time":null,"branch":null}]},"-1":{"__COVER__":[{"time":null,"statement":61,"branch":10,"subroutine":14,"condition":2,"pod":5}]},"4":{"BEGIN":[{"branch":null,"statement":null,"time":null,"pod":null,"condition":null,"subroutine":null}]},"11":{"BEGIN":[{"branch":null,"time":null,"statement":18,"pod":null,"condition":null,"subroutine":6}]},"90":{"__ANON__":[{"statement":61,"time":null,"branch":10,"subroutine":12,"pod":5,"condition":2}]},"57":{"find_caller":[{"condition":1,"pod":2,"subroutine":9,"branch":3,"statement":33,"time":null}]},"7":{"BEGIN":[{"statement":6,"time":null,"branch":null,"subroutine":2,"condition":null,"pod":null}]},"94":{"__ANON__":[{"condition":2,"pod":5,"subroutine":13,"branch":10,"time":null,"statement":61}]},"49":{"extract_method_name":[{"branch":3,"time":null,"statement":30,"condition":1,"pod":1,"subroutine":8}]},"9":{"BEGIN":[{"time":null,"statement":12,"branch":null,"subroutine":4,"condition":null,"pod":null}]},"28":{"check_slurpy_arg":[{"subroutine":7,"pod":null,"condition":null,"time":null,"statement":21,"branch":null}]},"69":{"find_stub":[{"branch":4,"time":null,"statement":39,"condition":1,"pod":3,"subroutine":10}]},"5":{"BEGIN":[{"subroutine":1,"condition":null,"pod":null,"statement":3,"time":null,"branch":null}]}}}