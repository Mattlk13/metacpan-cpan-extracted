# This file was automatically generated by Dist::Zilla::Plugin::MakeMaker v6.030.
use strict;
use warnings;

use 5.020;

use ExtUtils::MakeMaker;

use File::ShareDir::Install;
$File::ShareDir::Install::INCLUDE_DOTFILES = 1;
$File::ShareDir::Install::INCLUDE_DOTDIRS = 1;
install_share dist => "share";


my %WriteMakefileArgs = (
  "ABSTRACT" => "Acceptance testing for JSON-Schema based validators",
  "AUTHOR" => "Ben Hutton (\@relequestual) <relequest\@cpan.org>",
  "CONFIGURE_REQUIRES" => {
    "ExtUtils::MakeMaker" => 0,
    "File::ShareDir::Install" => "0.06"
  },
  "DISTNAME" => "Test-JSON-Schema-Acceptance",
  "LICENSE" => "mit",
  "MIN_PERL_VERSION" => "5.020",
  "NAME" => "Test::JSON::Schema::Acceptance",
  "PREREQ_PM" => {
    "Feature::Compat::Try" => 0,
    "File::ShareDir" => 0,
    "JSON::MaybeXS" => "1.004001",
    "List::Util" => "1.33",
    "Moo" => 0,
    "MooX::TypeTiny" => "0.002002",
    "Path::Tiny" => "0.069",
    "Ref::Util" => 0,
    "Test2::API" => 0,
    "Test2::Todo" => 0,
    "Test2::Tools::Compare" => 0,
    "Types::Common::Numeric" => 0,
    "Types::Standard" => "1.016003",
    "constant" => 0,
    "experimental" => 0,
    "if" => 0,
    "namespace::clean" => 0,
    "stable" => "0.031",
    "strict" => 0,
    "strictures" => 2,
    "warnings" => 0
  },
  "TEST_REQUIRES" => {
    "ExtUtils::MakeMaker" => 0,
    "File::Spec" => 0,
    "JSON::PP" => 0,
    "Scalar::Util" => 0,
    "Test2::Suite" => "0.000131",
    "Test::Deep" => 0,
    "Test::Fatal" => 0,
    "Test::File::ShareDir" => 0,
    "Test::More" => "0.88",
    "Test::Simple" => "1.302176",
    "Test::Warnings" => 0,
    "feature" => 0,
    "lib" => 0,
    "open" => 0,
    "utf8" => 0
  },
  "VERSION" => "1.020",
  "test" => {
    "TESTS" => "t/*.t"
  }
);


my %FallbackPrereqs = (
  "ExtUtils::MakeMaker" => 0,
  "Feature::Compat::Try" => 0,
  "File::ShareDir" => 0,
  "File::Spec" => 0,
  "JSON::MaybeXS" => "1.004001",
  "JSON::PP" => 0,
  "List::Util" => "1.33",
  "Moo" => 0,
  "MooX::TypeTiny" => "0.002002",
  "Path::Tiny" => "0.069",
  "Ref::Util" => 0,
  "Scalar::Util" => 0,
  "Test2::API" => 0,
  "Test2::Suite" => "0.000131",
  "Test2::Todo" => 0,
  "Test2::Tools::Compare" => 0,
  "Test::Deep" => 0,
  "Test::Fatal" => 0,
  "Test::File::ShareDir" => 0,
  "Test::More" => "0.88",
  "Test::Simple" => "1.302176",
  "Test::Warnings" => 0,
  "Types::Common::Numeric" => 0,
  "Types::Standard" => "1.016003",
  "constant" => 0,
  "experimental" => 0,
  "feature" => 0,
  "if" => 0,
  "lib" => 0,
  "namespace::clean" => 0,
  "open" => 0,
  "stable" => "0.031",
  "strict" => 0,
  "strictures" => 2,
  "utf8" => 0,
  "warnings" => 0
);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.040
if (can_xs()) {
requires('Cpanel::JSON::XS', '3.0223')
}



unless ( eval { ExtUtils::MakeMaker->VERSION(6.63_03) } ) {
  delete $WriteMakefileArgs{TEST_REQUIRES};
  delete $WriteMakefileArgs{BUILD_REQUIRES};
  $WriteMakefileArgs{PREREQ_PM} = \%FallbackPrereqs;
}

delete $WriteMakefileArgs{CONFIGURE_REQUIRES}
  unless eval { ExtUtils::MakeMaker->VERSION(6.52) };

WriteMakefile(%WriteMakefileArgs);

{
package
MY;
use File::ShareDir::Install qw(postamble);
}

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.040
sub _add_prereq {
  my ($mm_key, $module, $version_or_range) = @_;
  $version_or_range ||= 0;
  warn "$module already exists in $mm_key (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $WriteMakefileArgs{$mm_key}{$module}
      and $WriteMakefileArgs{$mm_key}{$module} ne '0'
      and $WriteMakefileArgs{$mm_key}{$module} ne $version_or_range;
  warn "$module already exists in FallbackPrereqs (at version $FallbackPrereqs{$module}) -- need to do a sane metamerge!"
    if exists $FallbackPrereqs{$module} and $FallbackPrereqs{$module} ne '0'
        and $FallbackPrereqs{$module} ne $version_or_range;
  $WriteMakefileArgs{$mm_key}{$module} = $FallbackPrereqs{$module} = $version_or_range;
  return;
}

use lib 'inc';
use ExtUtils::HasCompiler 0.014 'can_compile_loadable_object';
{
  my $can_xs;
  sub can_xs {
    return $can_xs if defined $can_xs;
    $can_xs = can_compile_loadable_object(quiet => 1) ? 1 : 0;
  }
}

sub requires { goto &runtime_requires }

sub runtime_requires {
  my ($module, $version_or_range) = @_;
  _add_prereq(PREREQ_PM => $module, $version_or_range);
}
