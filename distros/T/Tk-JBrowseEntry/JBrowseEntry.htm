<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title></title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:root@localhost" />
</head>

<body>



<ul id="index">
  <li><a href="#NAME">NAME</a></li>
  <li><a href="#SYNOPSIS">SYNOPSIS</a></li>
  <li><a href="#DESCRIPTION">DESCRIPTION</a></li>
  <li><a href="#EXAMPLES">EXAMPLES</a></li>
  <li><a href="#SEE-ALSO">SEE ALSO</a></li>
  <li><a href="#WIDGET-SPECIFIC-OPTIONS">WIDGET-SPECIFIC OPTIONS</a></li>
  <li><a href="#INHERITED-OPTIONS">INHERITED OPTIONS</a></li>
  <li><a href="#WIDGET-METHODS">WIDGET METHODS</a></li>
  <li><a href="#AUTHOR">AUTHOR</a></li>
  <li><a href="#COPYRIGHT">COPYRIGHT</a></li>
</ul>

<h1 id="NAME">NAME</h1>

<p>Tk::JBrowseEntry - Full-featured &quot;Combo-box&quot; (Text-entry combined with drop-down listbox) derived from Tk::BrowseEntry with many additional features and options.</p>

<h1 id="SYNOPSIS">SYNOPSIS</h1>

<pre><code>        use Tk;
        use Tk::JBrowseEntry;

        my $mw = MainWindow-&gt;new;
        my $var;

        my $widget = $mw-&gt;JBrowseEntry(
                -label =&gt; &#39;Normal:&#39;,
                -variable =&gt; \$var,
                -state =&gt; &#39;normal&#39;,
                -choices =&gt; [qw(pigs cows foxes goats)],
                -width  =&gt; 12
        )-&gt;pack(
                -side   =&gt; &#39;top&#39;,
                -pady =&gt; &#39;10&#39;,
                -anchor =&gt; &#39;w&#39;);

        MainLoop;</code></pre>

<h1 id="DESCRIPTION">DESCRIPTION</h1>

<p>Tk::JBrowseEntry is a derived widget from Tk::BrowseEntry, but adds numerous features and options. Among them are hash lists (one set of values is displayed for the user, but another is used as data), ability to disable either the text entry widget or the listbox, ability to allow user to delete items from the list, additional keyboard bindings, and much more.</p>

<p>JBrowseEntry widgets allow one to specify a full combo-box, a &quot;readonly&quot; box (text field allows user to type the 1st letter of an item to search for, but user may only ultimately select one of the items in the list); a &quot;textonly&quot; version (drop-down list and list pattern-matching disabled); a &quot;text&quot; version (drop-down list disabled), but the up, down, and right arrows will still do text-completion by matching against the choices in the list; or a completely disabled widget.</p>

<p>This widget is similar to other combo-boxes, ie. JComboBox, but has better keyboard bindings and allows for quick lookup/search within the listbox. pressing &lt;RETURN&gt; in entry field displays the drop-down box with the first entry most closly matching whatever&#39;s in the entry field highlighted. Pressing &lt;RETURN&gt; or &lt;SPACE&gt; in the listbox selects the highlighted entry and copies it to the text field and removes the listbox. &lt;ESC&gt; removes the listbox from view. &lt;UP&gt; and &lt;DOWN&gt; arrows work the listbox as well as pressing a key, which will move the highlight to the next item starting with that letter/number, etc. &lt;UP&gt; and &lt;DOWN&gt; arrows pressed within the entry field circle through the various list options as well (unless &quot;-state&quot; is set to &#39;textonly&#39;). Set &quot;-state&quot; to &quot;text&quot; to disable the drop-down list, but allow &lt;UP&gt; and &lt;DOWN&gt; to cycle among the choices. Setting &quot;-state&quot; to &#39;textonly&#39; completely hides the choices list from the user - he must type in his choice just like a normal entry widget.</p>

<p>One may also specify whether or not the button which activates the drop-down list via the mouse can take focus or not (-btntakesfocus) or whether the widget itself can take focus or is skipped in the focusing order. The developer can also specify alternate bitmap images for the button (-arrowimage and / or -farrowimage). The developer can also specify the maximum length of the drop-down list such that if more than that number of items is added, a vertical scrollbar is automatically added (-height). A fixed width in characters (-width) can be specified, or the widget can be allowed to resize itself to the width of the longest string in the list. The listbox and text entry field are automatically kept to the same width.</p>

<p>One can optionally specify a label (-label), similar to the &quot;LabEntry&quot; widget. By default, the label appears packed to the left of the widget. The positioning can be specified via the &quot;-labelPack&quot; option. For example, to position the label above the widget, use &quot;-labelPack =&gt; [-side =&gt; &#39;top&#39;]&quot;.</p>

<h1 id="EXAMPLES">EXAMPLES</h1>

<pre><code> It is easiest to illustrate this widget&#39;s capabilities via examples:
 
 use Tk;
 use Tk::JBrowseEntry;
 
 $MainWin = MainWindow-&gt;new;
 
 #SET UP SOME DEFAULT VALUES.
 
 $dbname1 = &#39;cows&#39;;
 $dbname2 = &#39;foxes&#39;;
 $dbname3 = &#39;goats&#39;;
 $dbname5 = &#39;default&#39;;
 
 #HERE&#39;S A NORMAL COMBO-BOX.
 
 $jb1 = $MainWin-&gt;JBrowseEntry(
        -label =&gt; &#39;Normal:&#39;,
        -variable =&gt; \$dbname1,
        -state =&gt; &#39;normal&#39;,
        -choices =&gt; [qw(pigs cows foxes goats)],
        -width  =&gt; 12);
 $jb1-&gt;pack(
        -side   =&gt; &#39;top&#39;, -pady =&gt; &#39;10&#39;, -anchor =&gt; &#39;w&#39;);
 
 #THIS ONE HAS THE DROP-DOWN LIST DISABLED.
 
 $jb2 = $MainWin-&gt;JBrowseEntry(
        -label =&gt; &#39;TextOnly:&#39;,
        -variable =&gt; \$dbname2,
        -state =&gt; &#39;text&#39;,
        -choices =&gt; [qw(pigs cows foxes goats)],
        -width  =&gt; 12);
 $jb2-&gt;pack(
        -side   =&gt; &#39;top&#39;, -pady =&gt; &#39;10&#39;, -anchor =&gt; &#39;w&#39;);
 
 #THIS ONE&#39;S &quot;READONLY&quot; (USER MUST PICK FROM THE LIST, TEXT BOX ALLOWS QUICK 
 #SEARCH.
 
 $jb3 = $MainWin-&gt;JBrowseEntry(
        -label =&gt; &#39;ReadOnly:&#39;,
        -variable =&gt; \$dbname3,
        -choices =&gt; [qw(pigs cows foxes goats)],
        -state =&gt; &#39;readonly&#39;,
        -width  =&gt; 12);
 $jb3-&gt;pack(
        -side   =&gt; &#39;top&#39;, -pady =&gt; &#39;10&#39;, -anchor =&gt; &#39;w&#39;);
 
 #THIS ONE&#39;S COMPLETELY DISABLED!
 
 $jb4 = $MainWin-&gt;JBrowseEntry(
        -label =&gt; &#39;Disabled:&#39;,
        -variable =&gt; \$dbname3,
        -state =&gt; &#39;disabled&#39;,
        -choices =&gt; [qw(pigs cows foxes goats)],
        -width  =&gt; 12);
 $jb4-&gt;pack(
        -side   =&gt; &#39;top&#39;, -pady =&gt; &#39;10&#39;, -anchor =&gt; &#39;w&#39;);
 
 #HERE&#39;S ONE WITH A SCROLLBAR (NOTE THE &quot;-height&quot; ATTRIBUTE).
 
 $jb5 = $MainWin-&gt;JBrowseEntry(
        -label =&gt; &#39;Scrolled List:&#39;,
        -width =&gt; 12,
        -default =&gt; $dbname5,
        -height =&gt; 4,
        -variable =&gt; \$dbname5,
        -browsecmd =&gt; sub {print &quot;-browsecmd!\n&quot;;},
        -listcmd =&gt; sub {print &quot;-listcmd!\n&quot;;},
        -state =&gt; &#39;normal&#39;,
        -choices =&gt; [qw(pigs cows foxes goats horses sheep dogs cats ardvarks default)]);
 $jb5-&gt;pack(
        -side   =&gt; &#39;top&#39;, -pady =&gt; &#39;10&#39;, -anchor =&gt; &#39;w&#39;);
 
 #HERE&#39;S ONE THAT THE BUTTON TAKES KEYBOARD FOCUS.
 
 $jb6 = $MainWin-&gt;JBrowseEntry(
        -label =&gt; &#39;Button Focus:&#39;,
        -btntakesfocus =&gt; 1,
        -arrowimage =&gt; $MainWin-&gt;Getimage(&#39;balArrow&#39;),   #SPECIFY A DIFFERENT BUTTON IMAGE.
        -farrowimage =&gt; $MainWin-&gt;Getimage(&#39;cbxarrow&#39;),  #OPTIONAL 2ND IMAGE FOR BUTTON WHEN FOCUSED. 
        -width =&gt; 12,
        -height =&gt; 4,
        -variable =&gt; \$dbname6,
        -browsecmd =&gt; sub {print &quot;-browsecmd!\n&quot;;},
        -listcmd =&gt; sub {print &quot;-listcmd!\n&quot;;},
        -state =&gt; &#39;normal&#39;,
        -choices =&gt; [qw(pigs cows foxes goats horses sheep dogs cats ardvarks default)]);
 $jb6-&gt;pack(
        -side   =&gt; &#39;top&#39;, -pady =&gt; &#39;10&#39;, -anchor =&gt; &#39;w&#39;);
 
 #HERE&#39;S ONE THAT DOWS NOT TAKE KEYBOARD FOCUS.
 
 $jb7 = $MainWin-&gt;JBrowseEntry(
        -label =&gt; &#39;Skip Focus:&#39;,
        -takefocus =&gt; 0,
        -width =&gt; 12,
        -height =&gt; 4,
        -variable =&gt; \$dbname7,
        -browsecmd =&gt; sub {print &quot;-browsecmd!\n&quot;;},
        -listcmd =&gt; sub {print &quot;-listcmd!\n&quot;;},
        -state =&gt; &#39;normal&#39;,
        -choices =&gt; [qw(pigs cows foxes goats horses sheep dogs cats ardvarks default)]);
 $jb7-&gt;pack(
        -side   =&gt; &#39;top&#39;, -pady =&gt; &#39;10&#39;, -anchor =&gt; &#39;w&#39;);
 
 $jb7-&gt;choices([qw(First Second Fifth Sixth)]);   #REPLACE LIST CHOICES!
 $jb7-&gt;insert(2, &#39;Third&#39;, &#39;Fourth&#39;);              #ADD MORE AFTER 1ST 2.
 $jb7-&gt;insert(&#39;end&#39;, [qw(Seventh Oops Eighth)]);  #ADD STILL MORE AT END.
 $jb7-&gt;delete(7);                                 #REMOVE ONE.
 
 $b = $MainWin-&gt;Button(-text =&gt; &#39;Quit&#39;, -command =&gt; sub {exit(); });
 $b-&gt;pack(-side =&gt; &#39;top&#39;);
 $jb1-&gt;focus;   #PICK ONE TO START WITH KEYBOARD FOCUS.
 
 MainLoop;</code></pre>

<h1 id="SEE-ALSO">SEE ALSO</h1>

<p><a>Tk::JComboBox</a> <a>Tk::BrowseEntry</a> <a>Tk::Listbox</a> <a>Tk::Entry</a></p>

<h1 id="WIDGET-SPECIFIC-OPTIONS">WIDGET-SPECIFIC OPTIONS</h1>

<dl>

<dt id="state-normal-readonly-text-textonly-disabled"><b>-state</b> =&gt; <i>normal | readonly | text | textonly | disabled</i></dt>
<dd>

<p>Default: <b>normal</b></p>

<p>JBrowseEntry supports 5 different states:</p>

<ul>

<p><i>normal</i>: Default operation -- Both text entry field and drop-down list button function normally.</p>

<p><i>readonly</i>: Drop-down list functions normally. When text entry field has focus, user may type in a letter, and the drop-down list immediately drops down and the first/ next matching item becomes highlighted. The user must ultimately select from the list of valid entries and may not enter anything else.</p>

<p><i>text</i>: Text entry functions normally, but drop-down list button is disabled. User must type in an entry or use the up and down arrows to choose from among the list items.</p>

<p><i>textonly</i>: Similar to &quot;text&quot;: Text entry functions normally, but drop-down list button is disabled. User must type in an entry. The list choices are completely hidden from the user.</p>

<p><i>disabled</i>: Widget is completely disabled and greyed out. It will not activate or take focus.</p>

</ul>

</dd>
<dt id="altbinding"><b>-altbinding</b></dt>
<dd>

<p>Allows one to specify alternate binding schema for certain keys. Each binding pair may be separated by a comma, semicolon, colon, space, or virtical bar. Case is insensitive. Currently valid values are:</p>

<p>&quot;Return=Go&quot; - causes [Return] key to roll up the drop-down list and invoke the <i>-browsecmd</i> callback, if any.</p>

<p>&quot;Return=NonEmptyGo&quot; - same as &quot;Return=Go&quot; if the text field is non-empty, otherwises pops up the drop-down list.</p>

<p>&quot;Return=SingleGo&quot; - same as &quot;Return=Go&quot; if there are no choices in the drop-down list (instead of popping up the drop-down list).</p>

<p>&quot;Return=Next&quot; - causes pressing the [Return] key to advance the focus to the next widget in the main window.</p>

<p>&quot;Right=NoSearch&quot; - Do not complete the text in the text field with the next matching value found in the choices list when the [Right-arrow] key is pressed in the entry field, rather leave it unchanged.</p>

<p>&quot;Down=Popup&quot; - causes the [Down-arrow] key pressed in the entry field to pop up the selection listbox. Useful particularly if the [arrow-button] isn&#39;t displayed, ie. (<i>-nobutton</i> =&gt; 1) and/or the [Return] key is bound with an <i>-altbinding</i>, etc. to do something other than pop up the drop-down list.</p>

<p>&quot;Nolistbox=actions&quot; - causes certain <i>actions</i> to NOT invoke the <i>-browsecmd</i> callback when activated within the listbox widget, ie. &quot;Nolistbox=listbox.space&quot; means don&#39;t invoke <i>-browsecmd</i> callback if &lt;spacebar&gt; pressed in the listbox. Valid values are ([listbox.]{space|return|button1|*button1|mod[.{shift|Control|alt|*}-]button1}: &quot;space,button1,return,mod.Shift-button1,mod.Control-button1,mod.Alt-button1,mod,*button1&quot;, etc. Multiple values can be separated by commas. &quot;mod&quot; means any modifier (Shift|Control|Alt), &quot;*button1&quot; means button1 regardless of modifier.</p>

<p>&quot;Tab=PopList&quot; - Normally, if the [Tab] key is pressed while the drop-down list is displayed, the focus simply returns to the text entry field and the listbox remains displayed. Modern combo-boxes generally don&#39;t do this and many users don&#39;t expect it. Specifying &quot;Tab=PopList&quot; makes Tk::JBrowseEntry behave like most modern combo-boxes by simply undisplaying the drop-down list and restoring focus to the text entry field. Either way, the listbox is undisplayed anyway when the JBrowseEntry widget itself goes out of focus, or either the [Enter] or [Esc] key is pressed.</p>

<p>&quot;Down=None&quot;, &quot;Up=None&quot;, &quot;Right=None&quot;, &quot;Esc=None&quot;, &quot;Return=None&quot;, &quot;Space=None&quot; - causes pressing that respective key to NOT perform it&#39;s default binding action. User can still add their own bindings within their calling program though.</p>

</dd>
<dt id="arrowimage"><b>-arrowimage</b></dt>
<dd>

<p>Allows one to specify an image for the the button which activates the drop-down list when the button has the keyboard focus. The default is: $MainWin-&gt;Getimage(&#39;cbxarrow&#39;) on Linux and a custom bitmap on M$-Windows. Also see the &quot;-farrowimage&quot; option below, as well as the &quot;-arrowimage&quot; option under Standard BrowseEntry options for more details. On Linux, this is used regardless of the focus status of the button, which is indicated by the border, unless a &quot;-farrowimage&quot; image is specified. On M$-Windows, a separate custom bitmap is provided for the focused version, since Windows does not change the border color when the button takes focus.</p>

</dd>
<dt id="browse"><b>-browse</b></dt>
<dd>

<p>Adds several additional triggering events which invoke the <b>-browsecmd</b> callback: entry.tab, frame.tab, and key.&lt;character-typed&gt;, if set to 1. Default is 0. This likely is rarely needed in practice, but allows the calling program to know whenever a key is typed into the entry field or if the field is tabbed away from. The one case the author uses this option on is the &quot;drive-letter&quot; field in the M$-Windows version of his Tk::JFileDialog widget.</p>

</dd>
<dt id="browsecmd"><b>-browsecmd</b></dt>
<dd>

<p>Specifies a callback function to call when a selection is made in the popped up listbox. It is passed the widget and the text of the entry selected. This function is called after the entry variable has been assigned the value, (so the programmer can validate and override the user&#39;s entry if desired).</p>

<p>The function is passed the widget reference itself (self), the content of the entry field (not necessarily equal to the <b>-variable</b> reference value), and the triggering &quot;event&quot; as described below.</p>

<p>Specific cases (events) where it is invoked: entry.[-mod.{Shift|Control|Alt}]return[.{go|browse}], listbox.return, listbox.space, or listbox.[-mod.{Shift|Control|Alt}]button1. If <b>-browse</b> is set to 1, then additional triggering events are: entry.tab, frame.tab, and key.&lt;character-typed&gt;.</p>

</dd>
<dt id="btntakesfocus"><b>-btntakesfocus</b></dt>
<dd>

<p>The drop-down list button is normally activated with the mouse and is skipped in the focusing circuit. If this option is set, then the button will take keyboard focus. Pressing &lt;Return&gt;, &lt;Spacebar&gt;, or &lt;Downarrow&gt; will cause the list to be dropped down, repeating causes the list to be removed again. Normally, the text entry widget receives the keyboard focus. This option can be used in combination with &quot;-takefocus&quot; so that either the text entry widget, the button, or both or neither receive keyboard focus. If both options are set, the entry field first receives focus, then pressing &lt;Tab&gt; causes the button to be focused.</p>

</dd>
<dt id="deleteitemsok"><b>-deleteitemsok</b></dt>
<dd>

<p>If set, allows user to delete individual items in the drop-down list by pressing the &lt;Delete&gt; key to delete the current (active) item. No effect if the state is &quot;text&quot; or &quot;textonly&quot;.</p>

</dd>
<dt id="deletecmd"><b>-deletecmd</b></dt>
<dd>

<p>(ADDED v4.9): Specifies a callback function to call when the user deletes an entry (if <b>-deleteitemsok</b> is set to true) in the popped up listbox. It is passed the widget and either the index of the entry being deleted OR -1. This function is called BOTH before AND after the entry is deleted. The entry parameter is -1 on the second call, and the first call if $_[1] (the index to be deleted) &gt;= 0, the function should return false/undef to permit the delete or true to SUPPRESS the delete (in which case, the callback will NOT be called a second time)! No effect if the state is &quot;text&quot; or &quot;textonly&quot;.</p>

</dd>
<dt id="farrowimage"><b>-farrowimage</b></dt>
<dd>

<p>Allows one to specify a second, alternate bitmap for the image on the button which activates the drop-down list when the button has the keyboard focus. The default is to use the &quot;-arrowimage&quot; image, EXCEPT in M$-Windows, in which case, the default remains the default &quot;focused&quot; bitmap, since Windows does not use a focus border, but rather, the image itself must change to indicate focus status. See the &quot;-arrowimage&quot; option under Standard BrowseEntry options for more details. The default image for Linux is: $MainWin-&gt;Getimage(&#39;cbxarrow&#39;) and a custom bitmap for M$-Windows.</p>

</dd>
<dt id="labelPack"><b>-labelPack</b></dt>
<dd>

<p>Specify alternate packing options for the label. The default is: &quot;[-side =&gt; &#39;left&#39;, -anchor =&gt; &#39;e&#39;]&quot;. The argument is an arrayref. Note: if no label is specified, none is packed or displayed.</p>

</dd>
<dt id="labelrelief"><b>-labelrelief</b></dt>
<dd>

<p>Default <b>&quot;flat&quot;</b></p>

<p>Allow relief of the label portion of the widget to be specified.</p>

</dd>
<dt id="listcmd"><b>-listcmd</b></dt>
<dd>

<p>Specifies a callback function to call when the button next to the entry is pressed to popup the choices in the listbox. This is called before popping up the listbox, so can be used to populate the entries in the listbox.</p>

</dd>
<dt id="listfont"><b>-listfont</b></dt>
<dd>

<p>Specify an alternate font for the text in the listbox. Use &quot;-font&quot; to change the text of the text entry field. For best results, &quot;-font&quot; and &quot;-listfont&quot; should specify fonts of similar size.</p>

</dd>
<dt id="listrelief"><b>-listrelief</b></dt>
<dd>

<p>Specifies relief for the drop-down list (default is &quot;sunken&quot;).</p>

</dd>
<dt id="listwidth"><b>-listwidth</b></dt>
<dd>

<p>Specifies the width of the popup listbox.</p>

</dd>
<dt id="nobutton"><b>-nobutton</b></dt>
<dd>

<p>Default <b>0</b> (display the button) NOTE: Regardless of setting, the button is not displayed if the state is &quot;text&quot; or &quot;textonly&quot;.</p>

<p>Prevents drop-down list button from being displayed if set to 1 (true).</p>

</dd>
<dt id="noselecttext"><b>-noselecttext</b></dt>
<dd>

<p>Normally, when the widget has the focus and is set by listbox selection, the text will then be &quot;selected&quot; (highlighted and in the cut-buffer). Some consider this annoying. Setting this option will cause the text to not be selected. The user can still select the text themself, ie. for pasting somewhere else.</p>

</dd>
<dt id="tabcomplete"><b>-tabcomplete</b></dt>
<dd>

<p>If set to &quot;1&quot;, pressing the &quot;&lt;Tab&gt;&quot; key will cause the string in the entry field to be &quot;auto-completed&quot; to the next matching item in the list. If there is no match, the typed text is not changed. If it already matches a list item, then the listbox is removed from view and keyboard focus transfers to the next widget. If set to &quot;2&quot; and there is no match in the list, then entry is set to the default value or empty string. If set to &quot;0&quot;, focus is simply advanced to the next widget in the main window.</p>

</dd>
</dl>

<h1 id="INHERITED-OPTIONS">INHERITED OPTIONS</h1>

<dl>

<dt id="choices"><b>-choices</b></dt>
<dd>

<p>Specifies the list of initial choices to pop up. This is a reference to an array or hash of strings specifying the choices. If a <i>hashref</i> is specified, the keys represent the actual data values and the values represent the corresponding values the user sees displayed in the listbox. NOTE: If a <i>hashref</i> is specified, the <b>-variable</b> should be initialized to one of the hash VALUES rather than it&#39;s corresponding key.</p>

</dd>
<dt id="colorstate"><b>-colorstate</b></dt>
<dd>

<p>Depreciated -- Appears to force the background of the entry widget on the Unix version to &quot;grey95&quot; if state is normal and a &quot;-background&quot; color is not specified.</p>

</dd>
<dt id="height"><b>-height</b></dt>
<dd>

<p>Specify the maximum number of items to be displayed in the listbox before a vertical scrollbar is automatically added. Default is infinity (listbox will not be given a scrollbar regardless of the number of items added).</p>

</dd>
<dt id="maxwidth"><b>-maxwidth</b></dt>
<dd>

<p>Specifies the maximum width the entry and listbox widgets can expand to in characters. The default is zero, meaning expand to the width to accomodate the widest string in the list.</p>

</dd>
<dt id="variable"><b>-variable</b></dt>
<dd>

<p>Specifies a scalar reference to the variable in which the entered value is to be stored/retrieved (tied).</p>

</dd>
<dt id="width"><b>-width</b></dt>
<dd>

<p>The number of characters (average if proportional font used) wide to make the entry field. The drop-down list will be set the same width as the entry widget plus the width of the button. If not specified, the default is to calculate the width to the width of the longest item in the choices list and if items are later added or removed the width will be recalculated.</p>

</dd>
</dl>

<h1 id="WIDGET-METHODS">WIDGET METHODS</h1>

<dl>

<dt id="widget-activate-index">$widget-&gt;<b>activate</b>(index)</dt>
<dd>

<p>activate() invokes the activate() option on the listbox to make the item with the index specified by the first argument &quot;active&quot;. Unless a second argument is passed containing a false value, the value of the &quot;-textvariable&quot; variable is also set to this now active value.</p>

</dd>
<dt id="widget-choices-listref">$widget-&gt;<b>choices</b>([listref])</dt>
<dd>

<p>Sets the drop-down list listbox to the list of values referenced by <i>listref</i>, if specified. Returns the current list of choices in the listbox if no arguments provided. If a <i>hashref</i> is specified, the keys represent the actual data values and the values represent the corresponding values the user sees displayed in the listbox. NOTE: If a <i>hashref</i> is specified, the <b>-variable</b> should be initialized to one of the hash VALUES rather than it&#39;s corresponding key.</p>

</dd>
<dt id="widget-curselection">$widget-&gt;<b>curselection</b>()</dt>
<dd>

<p>Returns the currently-selected element in the listbox, if any, otherwise, <b>undef</b>.</p>

</dd>
<dt id="widget-delete-first-last">$widget-&gt;<b>delete</b>(first [, last])</dt>
<dd>

<p>Deletes one or more elements of the listbox. First and last are indices specifying the first and last elements in the range to delete. If last isn&#39;t specified it defaults to first, i.e. a single element is deleted.</p>

</dd>
<dt id="widget-delete_byvalue-hashkey">$widget-&gt;<b>delete_byvalue</b>(hashkey)</dt>
<dd>

<p>Deletes one or more elements of the listbox. &quot;hashkey&quot; specifies the element to be deleted by the value visible to the user.</p>

</dd>
<dt id="widget-reference-hashkey">$widget-&gt;<b>reference</b>(hashkey)</dt>
<dd>

<p>Returns the value (displayed in the listbox) that corresponds to the choice key specified by &quot;hashkey&quot;. If the key is not one of the valid choices or the choices are a list instead of a hash, then the hashkey itself is returned. If the choices are a list rather than a hash, then the value is returned as is. Returns <b>undef</b> on error.</p>

</dd>
<dt id="widget-dereference-hashvalue">$widget-&gt;<b>dereference</b>(hashvalue)</dt>
<dd>

<p>Returns the actual option key value that corresponds to the choice value displayed in the listbox. (undef if there is none). (Opposite of reference() and referenceOnly(). Use this function on the -variable reference variable to get the actual data (hash key), since the reference variable will contain the VALUE displayed to the user! If the choices are a list rather than a hash, then the value is returned as is. Returns <b>undef</b> on error.</p>

</dd>
<dt id="widget-dereferenceOnly-hashkey">$widget-&gt;<b>dereferenceOnly</b>(hashkey)</dt>
<dd>

<p>Returns 1 if the key specified by &quot;hashkey&quot; is one of the valid choices and the list of choices is a hash, otherwise <b>undef</b> is returned.</p>

</dd>
<dt id="widget-get_hashref_byname">$widget-&gt;<b>get_hashref_byname</b>()</dt>
<dd>

<p>Returns a reference to the current hash of choices (keyed by the option visable to the user) if the choice list is a hash (reversed from the hash passed to choices()), otherwise, <b>undef</b> is returned.</p>

</dd>
<dt id="widget-get_hashref_byvalue">$widget-&gt;<b>get_hashref_byvalue</b>()</dt>
<dd>

<p>Returns a reference to the current hash of choices (keyed by actual option value) if the choice list is a hash (same as the hash passed to choices()), otherwise, <b>undef</b> is returned.</p>

</dd>
<dt id="widget-get-first-last">$widget-&gt;<b>get</b>([first [, last])</dt>
<dd>

<p>get() with no arguments returns the current value of the &quot;-textvariable&quot; variable. If any arguments are passed, they are passed directly to the listbox-&gt;get() function, ie. &quot;0&quot;, &quot;end&quot; to return all values of the listbox. For choice hashes, the value returned is what is displayed to the user. The arguments are indices.</p>

</dd>
<dt id="widget-get_icursor-index">$widget-&gt;<b>get_icursor</b>(index)</dt>
<dd>

<p>Return the location of <i>index</i> in the <i>text-entry</i> field. Values known to be valid are: &quot;insert&quot; and &quot;end&quot;, which return the character position of the insertion cursor and the location of the &quot;end&quot; of the current input string (ie. it&#39;s length). The cursor is set by the $widget-&gt;<b>icursor</b> function.</p>

</dd>
<dt id="widget-get_index-value">$widget-&gt;<b>get_index</b>(value)</dt>
<dd>

<p>Returns the index number in the list (zero-based) that can be used by get() of the value specified by &quot;value&quot;, or undef if &quot;value&quot; is not in the list of choices. If the choice list is a hash, then &quot;value&quot; should be the value displayed (stored in the -variable reference variable), not the hash key. This function is the reverse of the <b>get</b>() function.</p>

</dd>
<dt id="widget-hasreference-hashkey">$widget-&gt;<b>hasreference</b>(hashkey)</dt>
<dd>

<p>Returns the value (displayed in the listbox) that corresponds to the choice key specified by &quot;hashkey&quot;. If the key is not one of the valid choices or the choices are a list instead of a hash, then <b>undef</b> is returned.</p>

</dd>
<dt id="widget-icursor-index">$widget-&gt;<b>icursor</b>(index)</dt>
<dd>

<p>Sets the location of the text-entry field&#39;s text cursor to <i>index</i>. Valid values are numeric (zero for beginning) and &quot;end&quot; for placing the cursor at the end of the text. The index can be retrieved by using the $widget-&gt;<b>get_icursor</b>(index) function.</p>

</dd>
<dt id="widget-index-index">$widget-&gt;<b>index</b>(index)</dt>
<dd>

<p>Invokes and returns the result of the listbox-&gt;index() function.</p>

</dd>
<dt id="widget-insert-index-item-list-listref-hashref">$widget-&gt;<b>insert</b>(index, [item | list | listref | hashref])</dt>
<dd>

<p>Inserts one or more elements in the list just before the element given by index. If <i>index</i> is specified as &quot;end&quot; then the new elements are added to the end of the list. List can be a reference to a list (<i>listref</i>). If a hash reference is specified, then the values are displayed to the user in the drop-down list, but the values returned by the &quot;-textvariable&quot; variable or the get() function are the corresponding hash key(s).</p>

</dd>
<dt id="widget-selectionRange-index1-index2">$widget-&gt;<b>selectionRange</b>(index1, index2)</dt>
<dd>

<p>Select (highlight) the text in the text-entry field between <i>index1</i> and <i>index2</i>. Valid values are numeric (zero for beginning), &quot;insert&quot; and &quot;end&quot;.</p>

</dd>
<dt id="widget-size">$widget-&gt;<b>size</b>()</dt>
<dd>

<p>Invokes and returns the result of the listbox size() function (the number of items in the list).</p>

</dd>
<dt id="widget-state-normal-readonly-text-textonly-disabled">$widget-&gt;<b>state</b>([normal | readonly | text | textonly | disabled])</dt>
<dd>

<p>Get or set the state of the widget.</p>

</dd>
<dt id="widget-Popdown-nofocusrestore">$widget-&gt;<b>Popdown</b>([nofocusrestore])</dt>
<dd>

<p>Roll up (undisplay) the drop-down list. If <i>nofocusrestore</i> is specified and is true, no attempt will be made to refocus the previous widget focused when the drop-down list was popped up. This is useful when the developer intends to immediately focus somewhere else.</p>

</dd>
<dt id="widget-PressButton">$widget-&gt;<b>PressButton</b>()</dt>
<dd>

<p>Activates drop-down list as if user pressed the button (unless state is &quot;text&quot; or &quot;textonly&quot; or &quot;disabled&quot;. Returns 1 if drop-down list activated, zero otherwise. If the drop-down list is already visible, then removes it (pops it back down) and returns zero. Available in versions 5.0 and later.</p>

</dd>
</dl>

<h1 id="AUTHOR">AUTHOR</h1>

<p>Jim Turner, <code>&lt;https://metacpan.org/author/TURNERJW&gt;</code>.</p>

<h1 id="COPYRIGHT">COPYRIGHT</h1>

<p>Copyright (c) 2001-2018 Jim Turner <code>&lt;mailto:turnerjw784@yahoo.com&gt;</code>. All rights reserved.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>This is a derived work from Tk::Listbox and Tk::HList.</p>

<p>This code may be distributed under the same conditions as Perl itself.</p>

<p>This is a derived work from Tk::BrowseEntry. Tk::BrowseEntry is copyrighted by Rajappa Iyer</p>


</body>

</html>


