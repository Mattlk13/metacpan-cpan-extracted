diff -u -r bcm2835-1.71/src/bcm2835.c bcm2835-1.71-HIPI/src/bcm2835.c
--- bcm2835-1.71/src/bcm2835.c	2021-12-01 07:36:10.000000000 +0000
+++ bcm2835-1.71-HIPI/src/bcm2835.c	2023-02-18 02:58:03.407984268 +0000
@@ -1241,6 +1241,38 @@
     return 1;
 }
 
+int bcm2835_hipi_i2c_begin(int boardrevision)
+{
+    uint16_t cdiv;
+    volatile uint32_t* paddr;
+    
+    if (   bcm2835_bsc0 == MAP_FAILED
+	|| bcm2835_bsc1 == MAP_FAILED)
+      return 0; /* bcm2835_init() failed, or not root */
+    
+    if( boardrevision == 1 ) {
+        paddr = bcm2835_bsc0 + BCM2835_BSC_DIV/4;
+        /* Set the I2C/BSC0 pins to the Alt 0 function to enable I2C access on them */
+        bcm2835_gpio_fsel(RPI_GPIO_P1_03, BCM2835_GPIO_FSEL_ALT0); /* SDA */
+        bcm2835_gpio_fsel(RPI_GPIO_P1_05, BCM2835_GPIO_FSEL_ALT0); /* SCL */
+    } else {
+        paddr = bcm2835_bsc1 + BCM2835_BSC_DIV/4;
+        /* Set the I2C/BSC1 pins to the Alt 0 function to enable I2C access on them */
+        bcm2835_gpio_fsel(RPI_V2_GPIO_P1_03, BCM2835_GPIO_FSEL_ALT0); /* SDA */
+        bcm2835_gpio_fsel(RPI_V2_GPIO_P1_05, BCM2835_GPIO_FSEL_ALT0); /* SCL */
+    }
+    
+    /* Read the clock divider register */
+    cdiv = bcm2835_peri_read(paddr);
+    /* Calculate time for transmitting one byte
+    // 1000000 = micros seconds in a second
+    // 9 = Clocks per byte : 8 bits + ACK
+    */
+    i2c_byte_wait_us = ((float)cdiv / BCM2835_CORE_CLK_HZ) * 1000000 * 9;
+
+    return 1;
+}
+
 void bcm2835_i2c_end(void)
 {
 #ifdef I2C_V1
@@ -1254,6 +1286,19 @@
 #endif
 }
 
+int bcm2835_hipi_i2c_end(int boardrevision)
+{    
+    if( boardrevision == 1 ) {
+        /* Set all the I2C/BSC0 pins back to input */
+        bcm2835_gpio_fsel(RPI_GPIO_P1_03, BCM2835_GPIO_FSEL_INPT); /* SDA */
+        bcm2835_gpio_fsel(RPI_GPIO_P1_05, BCM2835_GPIO_FSEL_INPT); /* SCL */
+    } else {
+        /* Set all the I2C/BSC1 pins back to input */
+        bcm2835_gpio_fsel(RPI_V2_GPIO_P1_03, BCM2835_GPIO_FSEL_INPT); /* SDA */
+        bcm2835_gpio_fsel(RPI_V2_GPIO_P1_05, BCM2835_GPIO_FSEL_INPT); /* SCL */
+    } 
+}
+
 void bcm2835_i2c_setSlaveAddress(uint8_t addr)
 {
     /* Set I2C Device Address */
@@ -1265,6 +1310,12 @@
     bcm2835_peri_write(paddr, addr);
 }
 
+void bcm2835_hipi_i2c_setSlaveAddress(volatile uint32_t* baseaddress, uint8_t addr )
+{
+   	volatile uint32_t* paddr = baseaddress + BCM2835_BSC_A/4;
+	bcm2835_peri_write(paddr, addr);
+}
+
 /* defaults to 0x5dc, should result in a 166.666 kHz I2C clock frequency.
 // The divisor must be a power of 2. Odd numbers
 // rounded down.
@@ -1284,6 +1335,13 @@
     i2c_byte_wait_us = ((float)divider / BCM2835_CORE_CLK_HZ) * 1000000 * 9;
 }
 
+void bcm2835_hipi_i2c_setClockDivider( volatile uint32_t* baseaddress, uint16_t divider )
+{
+    volatile uint32_t* paddr = baseaddress + BCM2835_BSC_DIV/4;
+    bcm2835_peri_write(paddr, divider);
+    i2c_byte_wait_us = ((float)divider / BCM2835_CORE_CLK_HZ) * 1000000 * 9;
+}
+
 /* set I2C clock divider by means of a baudrate number */
 void bcm2835_i2c_set_baudrate(uint32_t baudrate)
 {
@@ -1293,6 +1351,14 @@
 	bcm2835_i2c_setClockDivider( (uint16_t)divider );
 }
 
+void bcm2835_hipi_i2c_set_baudrate( volatile uint32_t* baseaddress, uint32_t baudrate)
+{
+	uint32_t divider;
+	/* use 0xFFFE mask to limit a max value and round down any odd number */
+	divider = (BCM2835_CORE_CLK_HZ / baudrate) & 0xFFFE;
+	bcm2835_hipi_i2c_setClockDivider( baseaddress, (uint16_t)divider );
+}
+
 /* Writes an number of bytes to I2C */
 uint8_t bcm2835_i2c_write(const char * buf, uint32_t len)
 {
diff -u -r bcm2835-1.71/src/bcm2835.h bcm2835-1.71-HIPI/src/bcm2835.h
--- bcm2835-1.71/src/bcm2835.h	2021-12-01 07:46:46.000000000 +0000
+++ bcm2835-1.71-HIPI/src/bcm2835.h	2023-02-17 20:18:13.257024880 +0000
@@ -2140,6 +2140,16 @@
       Can vary from 0 to RANGE.
     */
     extern void bcm2835_pwm_set_data(uint8_t channel, uint32_t data);
+       
+    extern int bcm2835_hipi_i2c_begin(int boardrevision);
+    
+    extern int bcm2835_hipi_i2c_end(int boardrevision);
+    
+    extern void bcm2835_hipi_i2c_setSlaveAddress(volatile uint32_t* baseaddress, uint8_t addr );
+    
+    extern void bcm2835_hipi_i2c_setClockDivider(volatile uint32_t* baseaddress, uint16_t divider );
+    
+    extern void bcm2835_hipi_i2c_set_baudrate( volatile uint32_t* baseaddress, uint32_t baudrate);
 
     /*! @}  */
 #ifdef __cplusplus
