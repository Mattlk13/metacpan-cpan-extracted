lib lib
tlib t
author LNATION
email email@lnation.org
version 0.19
macro {
	Dolos
	YAML
}
Hades::Myths use POSIX [qw/locale_h/] {
	abstract {  error handling for hades. }
	synopsis {
	
	use Hades::Myths;

	say stranger;
	die locales->stranger;

	}
	our $STASH
	import $locales :t(Optional[HashRef]) @additional {
		€caller;
		€delete($locales, stash, $STASH, q|'Hades::Myths::Object'|);
		€require($STASH);
		€call_sub_my(
			( $locale, $lang, $fb ), 
			$STASH->convert_locale, 
			€delete($locales, locale, undef, setlocale(LC_CTYPE), 1);, 
			€delete($locales, fb, undef, undef, 1);
		);
		€delete($locales, as_keywords, my $as_keyword);
		€clear_unless_keys($locales, $locales);
		€call_sub_my(
			$new,
			$STASH->new,
			€maybe(fb, $fb);,
			€maybe(language, $lang);,
			€maybe(locale, $locale);,
			€maybe(locales, $locales);,
			@additional
		);
		{
			€export(locales, $new);
			€if(
				$as_keyword, 
				€for_keys(%{$new->locales}, $key, €export($key, €call_sub($new->string, $key, @_);););
			);
		}
	}
	new_object %object :pod(
Accepts a list of arguments that are used to build a new Hades::Myths::Object.
	) :example(
	Hades::Myths::Object->new_object(
		locale => $locale,
		locales => {
			%locales
		}
	);
	) {
		return €call_sub($STASH->new, %object);
	}
}
Hades::Myths::Object use POSIX [qw/locale_h/]  {
	abstract {  display text locally. }
	synopsis {
Quick summary of what the module does:

	use Hades::Myths::Object;

	my $locales = Hades::Myths::Object->new({
		locale => 'ja_JP',
		locales => {
			stranger => {
				en_GB => 'Hello stranger',
				en_US => 'Howdy stranger',
				ja_JP => 'こんにちは見知らぬ人'
			},
		}
	});

	say $locales->stranger;

	}
	fb :t(Str) :d('en') :pod(The fallback locale/language that is used when no value in the locales hash matches the objects locale or language. You can get or set this attribute and it expects a Str value. This attribute will default to be 'en'.)
	locale :t(Str) :bdr  :tr(_set_language_from_locale) :pod(The locale that will be checked for first when stringiying. You can get or set this attribute and it expects a Str value. This attribute will default to use Posix::setlocale) 
	_build_locale $locale :t(Optional[Str]) {
		return $locale || setlocale(LC_CTYPE);
	}
	_set_language_from_locale $value :t(Str) :test(
		['eval', '$obj->_set_language_from_locale()', q|undef|]
	) {
		€unless(
			£has_language, 
			€call_sub_my( ( $locale, $lang ), £convert_locale, $value);, 
			€if($lang, €call_sub(£language, $lang););
		);
	}
	language :t(Str) :pr :no_success_test :pod(The language that will be checked for second when stringifying. You can get or set this attribute and it expects a Str value. This attribute will be defaulted to be the first part of a locale.)
	locales :t(Map[Str, HashRef]) :bdr :pod(The hash reference of strings that map to each locale.) :example(
	$obj->locales({ 
		stranger => {
			en_US => 'Howdy stranger!'
		}
	})
	)
	_build_locales $values :t(HashRef) :d({}) {
		€call_sub_my($debug_steps, debug_steps);
		return {%{$values}, %{$debug_steps}, (£locales ? (%{£locales}) : ())};
	}
	convert_locale $locale :t(Str) $fb :t(Str) :d(en) :pod(Split a locale into locale and language.) {
		$locale =~ m/^(\w\w)_(\w\w).*/;
		return $1 && $2 ? ( $1 . '_' . $2, $1, $fb ) : ($locale, $fb, $fb);
	}
	add $key :t(Str) $locales :t(Map[Str, HashRef]) :pod(Add an item into the locales. This method expects a reference $key that should be a Str and a locales HashRef where the keys are locales and the values are the text string.) :example(
	locales->add('stranger', {
		en_US => 'Howdy stranger!'
	});
	) {
		€merge_hash_refs(£locales->{$key}, $locales);
	}
	string $key :t(Str) $locale :t(Str) :d(£locale) $lang :t(Str) :d(£language) $fb :t(Str) :d(£fb) {
		€die_unless_keys(£locales->{$key}, string $key is empty);
		€for_key_exists_and_return(£locales->{$key}, ( $locale, $lang, $fb ));
		return £locales->{$key}->{[keys %{£locales->{$key}}]->[0]};
	}
	debug_steps $steps {
		$steps = {
			debug_step_1 => {
				en => 'About to run hades with %s.',
			},
			debug_step_2 => {
				en => 'Parsing the eval string of length %s into classes.',
			},
			debug_step_3 => {
				en => 'Parsed the eval string into %s number of classes.',
			},
			debug_step_4 => {
				en => 'Set the Module::Generate %s accessor with the value %s.'
			},
			debug_step_5 => {
				en => 'Start building macros'
			},	
			debug_step_6 => {
				en => 'Build macro'
			},
			debug_step_7 => {
				en => 'Attempt to import %s macro object.'
			},
			debug_step_8 => {
				en => 'Successfully imported %s macro object.',
			},
			debug_step_9 => {
				en => 'Attempt to import %s macro from the hades file.'
			},
			debug_step_10 => {
				en => 'Successfully imported %s macro from the hades file.'
			},
			debug_step_11 => {
				en => 'Successfully built macros.'
			},
			debug_step_12 => {
				en => 'Building Module::Generate class %s.'
			},
			debug_step_13 => {
				en => 'Parsing class token.'
			},
			debug_step_14 => {
				en => 'Setting last inheritance token: %s.'
			},
			debug_step_14_b => {
				en => 'The last token was: %s.'
			},
			debug_step_15 => {
				en => 'Call Module::Generate\'s %s method with the value %s.' 
			},
			debug_step_16 => {
				en => 'Build a accessor named %s with no arguments.'
			},
			debug_step_17 => {
				en => 'Build the classes %s.'
			},
			debug_step_18 => {
				en => 'Build a sub named %s with no arguments.'
			},
			debug_step_19 => {
				en => 'Declare the classes global our variables',
			},
			debug_step_20 => {
				en => 'Found a group of attributes or subs so will iterrate each.'
			},
			debug_step_21 => {
				en => 'Building attributes for a sub or accessor named %s.'
			},
			debug_step_22 => {
				en => 'Built attributes for %s.'
			},
			debug_step_23 => {
				en => 'Constructing accessor named %s.'
			},
			debug_step_24 => {
				en => 'Built private code for %s.'
			},
			debug_step_25 => {
				en => 'Built coerce code for %s.'
			},
			debug_step_26 => {
				en => 'Built type code for %s.'
			},
			debug_step_27 => {
				en => 'Built trigger for %s.'
			},
			debug_step_28 => {
				en => 'Constructed accessor named %s.'
			},
			debug_step_29 => {
				en => 'Construct a modify sub routine named %s.'
			},
			debug_step_30 => {
				en => 'Constructed a modify sub routine named %s.'
			},
			debug_step_31 =>  {
				en => 'Construct a sub routine named %s.'
			},
			debug_step_32 =>  {
				en => 'Constructed a sub routine named %s.'
			},
			debug_step_33 => {
				en => 'Construct the new sub routine for class %s.'
			},
			debug_step_34 => {
				en => 'Constructed the new sub routine for class %s.'
			},
			debug_step_35 => {
				en => 'Finished Compiling the class.'
			},
			debug_step_36 => {
				en => 'Finished Compiling all classes.'
			},
			debug_step_37 => {
				en => 'Calling Module::Generates generate method which will write the files to disk.'
			},
			debug_step_38 => {
				en => 'Constructing code for %s.',
			},	
			debug_step_39 => {
				en => 'Build macro for: %s.'
			},					
			debug_step_40 => {
				en => 'Matched macro %s that has parameters.'
			},
			debug_step_41 => {
				en => 'Macro %s has a code callback.'
			},
			debug_step_42 => {
				en => 'Generated code for macro %s.'
			},
			debug_step_43 => {
				en => 'Match macro %s that has no parameters.'
			},
			debug_step_44 => {
				en => 'Constructed code for %s.',
			},
			debug_step_45 => {
				en => 'Constructing predicate named has_%s.'
			},
			debug_step_46 => {
				en => 'Constructed predicate named has_%s.'
			},
			debug_step_47 => {
				en => 'Constructing clearer named clearer_%s.'
			},
			debug_step_48 => {
				en => 'Constructed clearer named clearer_%s.'
			},
			press_enter_to_continue => {
				en => 'Press enter to continue'
			},
		};
		return $steps;
	}
	DESTROY {}
	AUTOLOAD {
		€autoload_cb(£string);
	}
}

